; from /usr/include/gtk-2.0/gtk/gtkwindow.h
; struct definitions ...
(struct AccelKey 
  (in-module Gtk)
  (c-name GtkAccelKey)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
)
(struct AccelGroupEntry 
  (in-module Gtk)
  (c-name GtkAccelGroupEntry)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
)
(struct BindingSet 
  (in-module Gtk)
  (c-name GtkBindingSet)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
)
(struct BindingEntry 
  (in-module Gtk)
  (c-name GtkBindingEntry)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
)
(struct BindingSignal 
  (in-module Gtk)
  (c-name GtkBindingSignal)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
)
(struct BoxChild 
  (in-module Gtk)
  (c-name GtkBoxChild)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
)
(struct CListCellInfo 
  (in-module Gtk)
  (c-name GtkCListCellInfo)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
)
(struct CListDestInfo 
  (in-module Gtk)
  (c-name GtkCListDestInfo)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
)
(struct CListColumn 
  (in-module Gtk)
  (c-name GtkCListColumn)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
)
(struct CListRow 
  (in-module Gtk)
  (c-name GtkCListRow)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
)
(struct CellText 
  (in-module Gtk)
  (c-name GtkCellText)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
)
(struct CellPixmap 
  (in-module Gtk)
  (c-name GtkCellPixmap)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
)
(struct CellPixText 
  (in-module Gtk)
  (c-name GtkCellPixText)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
)
(struct CellWidget 
  (in-module Gtk)
  (c-name GtkCellWidget)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
)
(struct CTreeRow 
  (in-module Gtk)
  (c-name GtkCTreeRow)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
)
(struct CTreeNode 
  (in-module Gtk)
  (c-name GtkCTreeNode)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
)
(struct FixedChild 
  (in-module Gtk)
  (c-name GtkFixedChild)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
)
(struct ImagePixmapData 
  (in-module Gtk)
  (c-name GtkImagePixmapData)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
)
(struct ImageImageData 
  (in-module Gtk)
  (c-name GtkImageImageData)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
)
(struct ImagePixbufData 
  (in-module Gtk)
  (c-name GtkImagePixbufData)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
)
(struct ImageStockData 
  (in-module Gtk)
  (c-name GtkImageStockData)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
)
(struct ImageIconSetData 
  (in-module Gtk)
  (c-name GtkImageIconSetData)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
)
(struct ImageAnimationData 
  (in-module Gtk)
  (c-name GtkImageAnimationData)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
)
(struct IMContextInfo 
  (in-module Gtk)
  (c-name GtkIMContextInfo)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
)
(struct ItemFactoryEntry 
  (in-module Gtk)
  (c-name GtkItemFactoryEntry)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
)
(struct ItemFactoryItem 
  (in-module Gtk)
  (c-name GtkItemFactoryItem)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
)
(struct PreviewInfo 
  (in-module Gtk)
  (c-name GtkPreviewInfo)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
)
(struct RcProperty 
  (in-module Gtk)
  (c-name GtkRcProperty)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
)
(struct RulerMetric 
  (in-module Gtk)
  (c-name GtkRulerMetric)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
)
(struct SelectionData 
  (in-module Gtk)
  (c-name GtkSelectionData)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
)
(struct TargetEntry 
  (in-module Gtk)
  (c-name GtkTargetEntry)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
)
(struct TargetList 
  (in-module Gtk)
  (c-name GtkTargetList)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
)
(struct TargetPair 
  (in-module Gtk)
  (c-name GtkTargetPair)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
)
(struct SettingsValue 
  (in-module Gtk)
  (c-name GtkSettingsValue)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
)
(struct StockItem 
  (in-module Gtk)
  (c-name GtkStockItem)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
)
(struct Border 
  (in-module Gtk)
  (c-name GtkBorder)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
)
(struct TableChild 
  (in-module Gtk)
  (c-name GtkTableChild)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
)
(struct TableRowCol 
  (in-module Gtk)
  (c-name GtkTableRowCol)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
)
(struct TextIter 
  (in-module Gtk)
  (c-name GtkTextIter)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
)
(struct TextAttrAppearance 
  (in-module Gtk)
  (c-name GtkTextAttrAppearance)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
)
(struct TextCursorDisplay 
  (in-module Gtk)
  (c-name GtkTextCursorDisplay)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
)
(struct TextLineDisplay 
  (in-module Gtk)
  (c-name GtkTextLineDisplay)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
  (field (type-and-name PangoLayout *layout))
  (field (type-and-name GSList *cursors))
  (field (type-and-name GSList *shaped_objects))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name gint width))
  (field (type-and-name gint total_width))
  (field (type-and-name gint height))
  (field (type-and-name gint x_offset))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint top_margin))
  (field (type-and-name gint bottom_margin))
  (field (type-and-name gint insert_index))
  (field (type-and-name gboolean size_only))
  (field (type-and-name GtkTextLine *line))
)
(struct TextAppearance 
  (in-module Gtk)
  (c-name GtkTextAppearance)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
  (field (type-and-name PangoLayout *layout))
  (field (type-and-name GSList *cursors))
  (field (type-and-name GSList *shaped_objects))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name gint width))
  (field (type-and-name gint total_width))
  (field (type-and-name gint height))
  (field (type-and-name gint x_offset))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint top_margin))
  (field (type-and-name gint bottom_margin))
  (field (type-and-name gint insert_index))
  (field (type-and-name gboolean size_only))
  (field (type-and-name GtkTextLine *line))
  (field (type-and-name GdkColor bg_color))
  (field (type-and-name GdkColor fg_color))
  (field (type-and-name GdkBitmap *bg_stipple))
  (field (type-and-name GdkBitmap *fg_stipple))
  (field (type-and-name gint rise))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint underline))
  (field (type-and-name guint strikethrough))
  (field (type-and-name guint draw_bg))
  (field (type-and-name guint inside_selection))
  (field (type-and-name guint is_text))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
)
(struct TextAttributes 
  (in-module Gtk)
  (c-name GtkTextAttributes)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
  (field (type-and-name PangoLayout *layout))
  (field (type-and-name GSList *cursors))
  (field (type-and-name GSList *shaped_objects))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name gint width))
  (field (type-and-name gint total_width))
  (field (type-and-name gint height))
  (field (type-and-name gint x_offset))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint top_margin))
  (field (type-and-name gint bottom_margin))
  (field (type-and-name gint insert_index))
  (field (type-and-name gboolean size_only))
  (field (type-and-name GtkTextLine *line))
  (field (type-and-name GdkColor bg_color))
  (field (type-and-name GdkColor fg_color))
  (field (type-and-name GdkBitmap *bg_stipple))
  (field (type-and-name GdkBitmap *fg_stipple))
  (field (type-and-name gint rise))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint underline))
  (field (type-and-name guint strikethrough))
  (field (type-and-name guint draw_bg))
  (field (type-and-name guint inside_selection))
  (field (type-and-name guint is_text))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name guint refcount))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name PangoFontDescription *font))
  (field (type-and-name gdouble font_scale))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint indent))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint pixels_above_lines))
  (field (type-and-name gint pixels_below_lines))
  (field (type-and-name gint pixels_inside_wrap))
  (field (type-and-name PangoTabArray *tabs))
  (field (type-and-name GtkWrapMode wrap_mode))
  (field (type-and-name PangoLanguage *language))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint invisible))
  (field (type-and-name guint bg_full_height))
  (field (type-and-name guint editable))
  (field (type-and-name guint realized))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
)
(struct TipsQuery 
  (in-module Gtk)
  (c-name GtkTipsQuery)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
  (field (type-and-name PangoLayout *layout))
  (field (type-and-name GSList *cursors))
  (field (type-and-name GSList *shaped_objects))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name gint width))
  (field (type-and-name gint total_width))
  (field (type-and-name gint height))
  (field (type-and-name gint x_offset))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint top_margin))
  (field (type-and-name gint bottom_margin))
  (field (type-and-name gint insert_index))
  (field (type-and-name gboolean size_only))
  (field (type-and-name GtkTextLine *line))
  (field (type-and-name GdkColor bg_color))
  (field (type-and-name GdkColor fg_color))
  (field (type-and-name GdkBitmap *bg_stipple))
  (field (type-and-name GdkBitmap *fg_stipple))
  (field (type-and-name gint rise))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint underline))
  (field (type-and-name guint strikethrough))
  (field (type-and-name guint draw_bg))
  (field (type-and-name guint inside_selection))
  (field (type-and-name guint is_text))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name guint refcount))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name PangoFontDescription *font))
  (field (type-and-name gdouble font_scale))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint indent))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint pixels_above_lines))
  (field (type-and-name gint pixels_below_lines))
  (field (type-and-name gint pixels_inside_wrap))
  (field (type-and-name PangoTabArray *tabs))
  (field (type-and-name GtkWrapMode wrap_mode))
  (field (type-and-name PangoLanguage *language))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint invisible))
  (field (type-and-name guint bg_full_height))
  (field (type-and-name guint editable))
  (field (type-and-name guint realized))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name GtkLabel label))
  (field (type-and-name guint emit_always))
  (field (type-and-name guint in_query))
  (field (type-and-name gchar *label_inactive))
  (field (type-and-name gchar *label_no_tip))
  (field (type-and-name GtkWidget *caller))
  (field (type-and-name GtkWidget *last_crossed))
  (field (type-and-name GdkCursor *query_cursor))
)
(struct ToolbarChild 
  (in-module Gtk)
  (c-name GtkToolbarChild)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
  (field (type-and-name PangoLayout *layout))
  (field (type-and-name GSList *cursors))
  (field (type-and-name GSList *shaped_objects))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name gint width))
  (field (type-and-name gint total_width))
  (field (type-and-name gint height))
  (field (type-and-name gint x_offset))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint top_margin))
  (field (type-and-name gint bottom_margin))
  (field (type-and-name gint insert_index))
  (field (type-and-name gboolean size_only))
  (field (type-and-name GtkTextLine *line))
  (field (type-and-name GdkColor bg_color))
  (field (type-and-name GdkColor fg_color))
  (field (type-and-name GdkBitmap *bg_stipple))
  (field (type-and-name GdkBitmap *fg_stipple))
  (field (type-and-name gint rise))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint underline))
  (field (type-and-name guint strikethrough))
  (field (type-and-name guint draw_bg))
  (field (type-and-name guint inside_selection))
  (field (type-and-name guint is_text))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name guint refcount))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name PangoFontDescription *font))
  (field (type-and-name gdouble font_scale))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint indent))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint pixels_above_lines))
  (field (type-and-name gint pixels_below_lines))
  (field (type-and-name gint pixels_inside_wrap))
  (field (type-and-name PangoTabArray *tabs))
  (field (type-and-name GtkWrapMode wrap_mode))
  (field (type-and-name PangoLanguage *language))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint invisible))
  (field (type-and-name guint bg_full_height))
  (field (type-and-name guint editable))
  (field (type-and-name guint realized))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name GtkLabel label))
  (field (type-and-name guint emit_always))
  (field (type-and-name guint in_query))
  (field (type-and-name gchar *label_inactive))
  (field (type-and-name gchar *label_no_tip))
  (field (type-and-name GtkWidget *caller))
  (field (type-and-name GtkWidget *last_crossed))
  (field (type-and-name GdkCursor *query_cursor))
  (field (type-and-name GtkToolbarChildType type))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkWidget *icon))
  (field (type-and-name GtkWidget *label))
)
(struct TooltipsData 
  (in-module Gtk)
  (c-name GtkTooltipsData)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
  (field (type-and-name PangoLayout *layout))
  (field (type-and-name GSList *cursors))
  (field (type-and-name GSList *shaped_objects))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name gint width))
  (field (type-and-name gint total_width))
  (field (type-and-name gint height))
  (field (type-and-name gint x_offset))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint top_margin))
  (field (type-and-name gint bottom_margin))
  (field (type-and-name gint insert_index))
  (field (type-and-name gboolean size_only))
  (field (type-and-name GtkTextLine *line))
  (field (type-and-name GdkColor bg_color))
  (field (type-and-name GdkColor fg_color))
  (field (type-and-name GdkBitmap *bg_stipple))
  (field (type-and-name GdkBitmap *fg_stipple))
  (field (type-and-name gint rise))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint underline))
  (field (type-and-name guint strikethrough))
  (field (type-and-name guint draw_bg))
  (field (type-and-name guint inside_selection))
  (field (type-and-name guint is_text))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name guint refcount))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name PangoFontDescription *font))
  (field (type-and-name gdouble font_scale))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint indent))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint pixels_above_lines))
  (field (type-and-name gint pixels_below_lines))
  (field (type-and-name gint pixels_inside_wrap))
  (field (type-and-name PangoTabArray *tabs))
  (field (type-and-name GtkWrapMode wrap_mode))
  (field (type-and-name PangoLanguage *language))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint invisible))
  (field (type-and-name guint bg_full_height))
  (field (type-and-name guint editable))
  (field (type-and-name guint realized))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name GtkLabel label))
  (field (type-and-name guint emit_always))
  (field (type-and-name guint in_query))
  (field (type-and-name gchar *label_inactive))
  (field (type-and-name gchar *label_no_tip))
  (field (type-and-name GtkWidget *caller))
  (field (type-and-name GtkWidget *last_crossed))
  (field (type-and-name GdkCursor *query_cursor))
  (field (type-and-name GtkToolbarChildType type))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkWidget *icon))
  (field (type-and-name GtkWidget *label))
  (field (type-and-name GtkTooltips *tooltips))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gchar *tip_text))
  (field (type-and-name gchar *tip_private))
)
(struct TreeIter 
  (in-module Gtk)
  (c-name GtkTreeIter)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
  (field (type-and-name PangoLayout *layout))
  (field (type-and-name GSList *cursors))
  (field (type-and-name GSList *shaped_objects))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name gint width))
  (field (type-and-name gint total_width))
  (field (type-and-name gint height))
  (field (type-and-name gint x_offset))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint top_margin))
  (field (type-and-name gint bottom_margin))
  (field (type-and-name gint insert_index))
  (field (type-and-name gboolean size_only))
  (field (type-and-name GtkTextLine *line))
  (field (type-and-name GdkColor bg_color))
  (field (type-and-name GdkColor fg_color))
  (field (type-and-name GdkBitmap *bg_stipple))
  (field (type-and-name GdkBitmap *fg_stipple))
  (field (type-and-name gint rise))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint underline))
  (field (type-and-name guint strikethrough))
  (field (type-and-name guint draw_bg))
  (field (type-and-name guint inside_selection))
  (field (type-and-name guint is_text))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name guint refcount))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name PangoFontDescription *font))
  (field (type-and-name gdouble font_scale))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint indent))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint pixels_above_lines))
  (field (type-and-name gint pixels_below_lines))
  (field (type-and-name gint pixels_inside_wrap))
  (field (type-and-name PangoTabArray *tabs))
  (field (type-and-name GtkWrapMode wrap_mode))
  (field (type-and-name PangoLanguage *language))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint invisible))
  (field (type-and-name guint bg_full_height))
  (field (type-and-name guint editable))
  (field (type-and-name guint realized))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name GtkLabel label))
  (field (type-and-name guint emit_always))
  (field (type-and-name guint in_query))
  (field (type-and-name gchar *label_inactive))
  (field (type-and-name gchar *label_no_tip))
  (field (type-and-name GtkWidget *caller))
  (field (type-and-name GtkWidget *last_crossed))
  (field (type-and-name GdkCursor *query_cursor))
  (field (type-and-name GtkToolbarChildType type))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkWidget *icon))
  (field (type-and-name GtkWidget *label))
  (field (type-and-name GtkTooltips *tooltips))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gchar *tip_text))
  (field (type-and-name gchar *tip_private))
  (field (type-and-name gint stamp))
  (field (type-and-name gpointer user_data))
  (field (type-and-name gpointer user_data2))
  (field (type-and-name gpointer user_data3))
)
(struct TypeInfo 
  (in-module Gtk)
  (c-name GtkTypeInfo)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
  (field (type-and-name PangoLayout *layout))
  (field (type-and-name GSList *cursors))
  (field (type-and-name GSList *shaped_objects))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name gint width))
  (field (type-and-name gint total_width))
  (field (type-and-name gint height))
  (field (type-and-name gint x_offset))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint top_margin))
  (field (type-and-name gint bottom_margin))
  (field (type-and-name gint insert_index))
  (field (type-and-name gboolean size_only))
  (field (type-and-name GtkTextLine *line))
  (field (type-and-name GdkColor bg_color))
  (field (type-and-name GdkColor fg_color))
  (field (type-and-name GdkBitmap *bg_stipple))
  (field (type-and-name GdkBitmap *fg_stipple))
  (field (type-and-name gint rise))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint underline))
  (field (type-and-name guint strikethrough))
  (field (type-and-name guint draw_bg))
  (field (type-and-name guint inside_selection))
  (field (type-and-name guint is_text))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name guint refcount))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name PangoFontDescription *font))
  (field (type-and-name gdouble font_scale))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint indent))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint pixels_above_lines))
  (field (type-and-name gint pixels_below_lines))
  (field (type-and-name gint pixels_inside_wrap))
  (field (type-and-name PangoTabArray *tabs))
  (field (type-and-name GtkWrapMode wrap_mode))
  (field (type-and-name PangoLanguage *language))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint invisible))
  (field (type-and-name guint bg_full_height))
  (field (type-and-name guint editable))
  (field (type-and-name guint realized))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name GtkLabel label))
  (field (type-and-name guint emit_always))
  (field (type-and-name guint in_query))
  (field (type-and-name gchar *label_inactive))
  (field (type-and-name gchar *label_no_tip))
  (field (type-and-name GtkWidget *caller))
  (field (type-and-name GtkWidget *last_crossed))
  (field (type-and-name GdkCursor *query_cursor))
  (field (type-and-name GtkToolbarChildType type))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkWidget *icon))
  (field (type-and-name GtkWidget *label))
  (field (type-and-name GtkTooltips *tooltips))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gchar *tip_text))
  (field (type-and-name gchar *tip_private))
  (field (type-and-name gint stamp))
  (field (type-and-name gpointer user_data))
  (field (type-and-name gpointer user_data2))
  (field (type-and-name gpointer user_data3))
  (field (type-and-name gchar *type_name))
  (field (type-and-name guint object_size))
  (field (type-and-name guint class_size))
  (field (type-and-name GtkClassInitFunc class_init_func))
  (field (type-and-name GtkObjectInitFunc object_init_func))
  (field (type-and-name gpointer reserved_1))
  (field (type-and-name gpointer reserved_2))
  (field (type-and-name GtkClassInitFunc base_class_init_func))
)
(struct Requisition 
  (in-module Gtk)
  (c-name GtkRequisition)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
  (field (type-and-name PangoLayout *layout))
  (field (type-and-name GSList *cursors))
  (field (type-and-name GSList *shaped_objects))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name gint width))
  (field (type-and-name gint total_width))
  (field (type-and-name gint height))
  (field (type-and-name gint x_offset))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint top_margin))
  (field (type-and-name gint bottom_margin))
  (field (type-and-name gint insert_index))
  (field (type-and-name gboolean size_only))
  (field (type-and-name GtkTextLine *line))
  (field (type-and-name GdkColor bg_color))
  (field (type-and-name GdkColor fg_color))
  (field (type-and-name GdkBitmap *bg_stipple))
  (field (type-and-name GdkBitmap *fg_stipple))
  (field (type-and-name gint rise))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint underline))
  (field (type-and-name guint strikethrough))
  (field (type-and-name guint draw_bg))
  (field (type-and-name guint inside_selection))
  (field (type-and-name guint is_text))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name guint refcount))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name PangoFontDescription *font))
  (field (type-and-name gdouble font_scale))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint indent))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint pixels_above_lines))
  (field (type-and-name gint pixels_below_lines))
  (field (type-and-name gint pixels_inside_wrap))
  (field (type-and-name PangoTabArray *tabs))
  (field (type-and-name GtkWrapMode wrap_mode))
  (field (type-and-name PangoLanguage *language))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint invisible))
  (field (type-and-name guint bg_full_height))
  (field (type-and-name guint editable))
  (field (type-and-name guint realized))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name GtkLabel label))
  (field (type-and-name guint emit_always))
  (field (type-and-name guint in_query))
  (field (type-and-name gchar *label_inactive))
  (field (type-and-name gchar *label_no_tip))
  (field (type-and-name GtkWidget *caller))
  (field (type-and-name GtkWidget *last_crossed))
  (field (type-and-name GdkCursor *query_cursor))
  (field (type-and-name GtkToolbarChildType type))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkWidget *icon))
  (field (type-and-name GtkWidget *label))
  (field (type-and-name GtkTooltips *tooltips))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gchar *tip_text))
  (field (type-and-name gchar *tip_private))
  (field (type-and-name gint stamp))
  (field (type-and-name gpointer user_data))
  (field (type-and-name gpointer user_data2))
  (field (type-and-name gpointer user_data3))
  (field (type-and-name gchar *type_name))
  (field (type-and-name guint object_size))
  (field (type-and-name guint class_size))
  (field (type-and-name GtkClassInitFunc class_init_func))
  (field (type-and-name GtkObjectInitFunc object_init_func))
  (field (type-and-name gpointer reserved_1))
  (field (type-and-name gpointer reserved_2))
  (field (type-and-name GtkClassInitFunc base_class_init_func))
  (field (type-and-name gint width))
  (field (type-and-name gint height))
)
(struct WidgetAuxInfo 
  (in-module Gtk)
  (c-name GtkWidgetAuxInfo)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
  (field (type-and-name PangoLayout *layout))
  (field (type-and-name GSList *cursors))
  (field (type-and-name GSList *shaped_objects))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name gint width))
  (field (type-and-name gint total_width))
  (field (type-and-name gint height))
  (field (type-and-name gint x_offset))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint top_margin))
  (field (type-and-name gint bottom_margin))
  (field (type-and-name gint insert_index))
  (field (type-and-name gboolean size_only))
  (field (type-and-name GtkTextLine *line))
  (field (type-and-name GdkColor bg_color))
  (field (type-and-name GdkColor fg_color))
  (field (type-and-name GdkBitmap *bg_stipple))
  (field (type-and-name GdkBitmap *fg_stipple))
  (field (type-and-name gint rise))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint underline))
  (field (type-and-name guint strikethrough))
  (field (type-and-name guint draw_bg))
  (field (type-and-name guint inside_selection))
  (field (type-and-name guint is_text))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name guint refcount))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name PangoFontDescription *font))
  (field (type-and-name gdouble font_scale))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint indent))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint pixels_above_lines))
  (field (type-and-name gint pixels_below_lines))
  (field (type-and-name gint pixels_inside_wrap))
  (field (type-and-name PangoTabArray *tabs))
  (field (type-and-name GtkWrapMode wrap_mode))
  (field (type-and-name PangoLanguage *language))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint invisible))
  (field (type-and-name guint bg_full_height))
  (field (type-and-name guint editable))
  (field (type-and-name guint realized))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name GtkLabel label))
  (field (type-and-name guint emit_always))
  (field (type-and-name guint in_query))
  (field (type-and-name gchar *label_inactive))
  (field (type-and-name gchar *label_no_tip))
  (field (type-and-name GtkWidget *caller))
  (field (type-and-name GtkWidget *last_crossed))
  (field (type-and-name GdkCursor *query_cursor))
  (field (type-and-name GtkToolbarChildType type))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkWidget *icon))
  (field (type-and-name GtkWidget *label))
  (field (type-and-name GtkTooltips *tooltips))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gchar *tip_text))
  (field (type-and-name gchar *tip_private))
  (field (type-and-name gint stamp))
  (field (type-and-name gpointer user_data))
  (field (type-and-name gpointer user_data2))
  (field (type-and-name gpointer user_data3))
  (field (type-and-name gchar *type_name))
  (field (type-and-name guint object_size))
  (field (type-and-name guint class_size))
  (field (type-and-name GtkClassInitFunc class_init_func))
  (field (type-and-name GtkObjectInitFunc object_init_func))
  (field (type-and-name gpointer reserved_1))
  (field (type-and-name gpointer reserved_2))
  (field (type-and-name GtkClassInitFunc base_class_init_func))
  (field (type-and-name gint width))
  (field (type-and-name gint height))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint width))
  (field (type-and-name gint height))
  (field (type-and-name guint x_set))
  (field (type-and-name guint y_set))
)
(struct WidgetShapeInfo 
  (in-module Gtk)
  (c-name GtkWidgetShapeInfo)
  (field (type-and-name guint accel_key))
  (field (type-and-name GdkModifierType accel_mods))
  (field (type-and-name guint accel_flags))
  (field (type-and-name GtkAccelKey key))
  (field (type-and-name GClosure *closure))
  (field (type-and-name GQuark accel_path_quark))
  (field (type-and-name gchar *set_name))
  (field (type-and-name gint priority))
  (field (type-and-name GSList *widget_path_pspecs))
  (field (type-and-name GSList *widget_class_pspecs))
  (field (type-and-name GSList *class_branch_pspecs))
  (field (type-and-name GtkBindingEntry *entries))
  (field (type-and-name GtkBindingEntry *current))
  (field (type-and-name guint parsed))
  (field (type-and-name guint keyval))
  (field (type-and-name GdkModifierType modifiers))
  (field (type-and-name GtkBindingSet *binding_set))
  (field (type-and-name guint destroyed))
  (field (type-and-name guint in_emission))
  (field (type-and-name GtkBindingEntry *set_next))
  (field (type-and-name GtkBindingEntry *hash_next))
  (field (type-and-name GtkBindingSignal *signals))
  (field (type-and-name GtkBindingSignal *next))
  (field (type-and-name gchar *signal_name))
  (field (type-and-name guint n_args))
  (field (type-and-name GtkBindingArg *args))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 padding))
  (field (type-and-name guint expand))
  (field (type-and-name guint fill))
  (field (type-and-name guint pack))
  (field (type-and-name guint is_secondary))
  (field (type-and-name gint row))
  (field (type-and-name gint column))
  (field (type-and-name GtkCListCellInfo cell))
  (field (type-and-name GtkCListDragPos insert_pos))
  (field (type-and-name gchar *title))
  (field (type-and-name GdkRectangle area))
  (field (type-and-name GtkWidget *button))
  (field (type-and-name GdkWindow *window))
  (field (type-and-name gint width))
  (field (type-and-name gint min_width))
  (field (type-and-name gint max_width))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name guint visible))
  (field (type-and-name guint width_set))
  (field (type-and-name guint resizeable))
  (field (type-and-name guint auto_resize))
  (field (type-and-name guint button_passive))
  (field (type-and-name GtkCell *cell))
  (field (type-and-name GtkStateType state))
  (field (type-and-name GdkColor foreground))
  (field (type-and-name GdkColor background))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gpointer data))
  (field (type-and-name GtkDestroyNotify destroy))
  (field (type-and-name guint fg_set))
  (field (type-and-name guint bg_set))
  (field (type-and-name guint selectable))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name gchar *text))
  (field (type-and-name guint8 spacing))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkBitmap *mask))
  (field (type-and-name GtkCellType type))
  (field (type-and-name gint16 vertical))
  (field (type-and-name gint16 horizontal))
  (field (type-and-name GtkStyle *style))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkCListRow row))
  (field (type-and-name GtkCTreeNode *parent))
  (field (type-and-name GtkCTreeNode *sibling))
  (field (type-and-name GtkCTreeNode *children))
  (field (type-and-name GdkPixmap *pixmap_closed))
  (field (type-and-name GdkBitmap *mask_closed))
  (field (type-and-name GdkPixmap *pixmap_opened))
  (field (type-and-name GdkBitmap *mask_opened))
  (field (type-and-name guint16 level))
  (field (type-and-name guint is_leaf))
  (field (type-and-name guint expanded))
  (field (type-and-name GList list))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name GdkPixmap *pixmap))
  (field (type-and-name GdkImage *image))
  (field (type-and-name GdkPixbuf *pixbuf))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name GtkIconSet *icon_set))
  (field (type-and-name GdkPixbufAnimation *anim))
  (field (type-and-name GdkPixbufAnimationIter *iter))
  (field (type-and-name guint frame_timeout))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name const gchar))
  (field (type-and-name gchar *path))
  (field (type-and-name gchar *accelerator))
  (field (type-and-name GtkItemFactoryCallback callback))
  (field (type-and-name guint callback_action))
  (field (type-and-name gchar *item_type))
  (field (type-and-name gconstpointer extra_data))
  (field (type-and-name gchar *path))
  (field (type-and-name GSList *widgets))
  (field (type-and-name guchar *lookup))
  (field (type-and-name gdouble gamma))
  (field (type-and-name GQuark type_name))
  (field (type-and-name GQuark property_name))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *metric_name))
  (field (type-and-name gchar *abbrev))
  (field (type-and-name gdouble pixels_per_unit))
  (field (type-and-name gdouble ruler_scale[10]))
  (field (type-and-name gint subdivide[5]))
  (field (type-and-name GdkAtom selection))
  (field (type-and-name GdkAtom target))
  (field (type-and-name GdkAtom type))
  (field (type-and-name gint format))
  (field (type-and-name guchar *data))
  (field (type-and-name gint length))
  (field (type-and-name GdkDisplay *display))
  (field (type-and-name gchar *target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name GList *list))
  (field (type-and-name guint ref_count))
  (field (type-and-name GdkAtom target))
  (field (type-and-name guint flags))
  (field (type-and-name guint info))
  (field (type-and-name gchar *origin))
  (field (type-and-name GValue value))
  (field (type-and-name gchar *stock_id))
  (field (type-and-name gchar *label))
  (field (type-and-name GdkModifierType modifier))
  (field (type-and-name guint keyval))
  (field (type-and-name gchar *translation_domain))
  (field (type-and-name gint left))
  (field (type-and-name gint right))
  (field (type-and-name gint top))
  (field (type-and-name gint bottom))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name guint16 left_attach))
  (field (type-and-name guint16 right_attach))
  (field (type-and-name guint16 top_attach))
  (field (type-and-name guint16 bottom_attach))
  (field (type-and-name guint16 xpadding))
  (field (type-and-name guint16 ypadding))
  (field (type-and-name guint xexpand))
  (field (type-and-name guint yexpand))
  (field (type-and-name guint xshrink))
  (field (type-and-name guint yshrink))
  (field (type-and-name guint xfill))
  (field (type-and-name guint yfill))
  (field (type-and-name guint16 requisition))
  (field (type-and-name guint16 allocation))
  (field (type-and-name guint16 spacing))
  (field (type-and-name guint need_expand))
  (field (type-and-name guint need_shrink))
  (field (type-and-name guint expand))
  (field (type-and-name guint shrink))
  (field (type-and-name guint empty))
  (field (type-and-name gpointer dummy1))
  (field (type-and-name gpointer dummy2))
  (field (type-and-name gint dummy3))
  (field (type-and-name gint dummy4))
  (field (type-and-name gint dummy5))
  (field (type-and-name gint dummy6))
  (field (type-and-name gint dummy7))
  (field (type-and-name gint dummy8))
  (field (type-and-name gpointer dummy9))
  (field (type-and-name gpointer dummy10))
  (field (type-and-name gint dummy11))
  (field (type-and-name gint dummy12))
  (field (type-and-name gint dummy13))
  (field (type-and-name gpointer dummy14))
  (field (type-and-name PangoAttribute attr))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint height))
  (field (type-and-name guint is_strong))
  (field (type-and-name guint is_weak))
  (field (type-and-name PangoLayout *layout))
  (field (type-and-name GSList *cursors))
  (field (type-and-name GSList *shaped_objects))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name gint width))
  (field (type-and-name gint total_width))
  (field (type-and-name gint height))
  (field (type-and-name gint x_offset))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint top_margin))
  (field (type-and-name gint bottom_margin))
  (field (type-and-name gint insert_index))
  (field (type-and-name gboolean size_only))
  (field (type-and-name GtkTextLine *line))
  (field (type-and-name GdkColor bg_color))
  (field (type-and-name GdkColor fg_color))
  (field (type-and-name GdkBitmap *bg_stipple))
  (field (type-and-name GdkBitmap *fg_stipple))
  (field (type-and-name gint rise))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint underline))
  (field (type-and-name guint strikethrough))
  (field (type-and-name guint draw_bg))
  (field (type-and-name guint inside_selection))
  (field (type-and-name guint is_text))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name guint refcount))
  (field (type-and-name GtkTextAppearance appearance))
  (field (type-and-name GtkJustification justification))
  (field (type-and-name GtkTextDirection direction))
  (field (type-and-name PangoFontDescription *font))
  (field (type-and-name gdouble font_scale))
  (field (type-and-name gint left_margin))
  (field (type-and-name gint indent))
  (field (type-and-name gint right_margin))
  (field (type-and-name gint pixels_above_lines))
  (field (type-and-name gint pixels_below_lines))
  (field (type-and-name gint pixels_inside_wrap))
  (field (type-and-name PangoTabArray *tabs))
  (field (type-and-name GtkWrapMode wrap_mode))
  (field (type-and-name PangoLanguage *language))
  (field (type-and-name gpointer padding1))
  (field (type-and-name guint invisible))
  (field (type-and-name guint bg_full_height))
  (field (type-and-name guint editable))
  (field (type-and-name guint realized))
  (field (type-and-name guint pad1))
  (field (type-and-name guint pad2))
  (field (type-and-name guint pad3))
  (field (type-and-name guint pad4))
  (field (type-and-name GtkLabel label))
  (field (type-and-name guint emit_always))
  (field (type-and-name guint in_query))
  (field (type-and-name gchar *label_inactive))
  (field (type-and-name gchar *label_no_tip))
  (field (type-and-name GtkWidget *caller))
  (field (type-and-name GtkWidget *last_crossed))
  (field (type-and-name GdkCursor *query_cursor))
  (field (type-and-name GtkToolbarChildType type))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name GtkWidget *icon))
  (field (type-and-name GtkWidget *label))
  (field (type-and-name GtkTooltips *tooltips))
  (field (type-and-name GtkWidget *widget))
  (field (type-and-name gchar *tip_text))
  (field (type-and-name gchar *tip_private))
  (field (type-and-name gint stamp))
  (field (type-and-name gpointer user_data))
  (field (type-and-name gpointer user_data2))
  (field (type-and-name gpointer user_data3))
  (field (type-and-name gchar *type_name))
  (field (type-and-name guint object_size))
  (field (type-and-name guint class_size))
  (field (type-and-name GtkClassInitFunc class_init_func))
  (field (type-and-name GtkObjectInitFunc object_init_func))
  (field (type-and-name gpointer reserved_1))
  (field (type-and-name gpointer reserved_2))
  (field (type-and-name GtkClassInitFunc base_class_init_func))
  (field (type-and-name gint width))
  (field (type-and-name gint height))
  (field (type-and-name gint x))
  (field (type-and-name gint y))
  (field (type-and-name gint width))
  (field (type-and-name gint height))
  (field (type-and-name guint x_set))
  (field (type-and-name guint y_set))
  (field (type-and-name gint16 offset_x))
  (field (type-and-name gint16 offset_y))
  (field (type-and-name GdkBitmap *shape_mask))
)
;; -*- scheme -*-
; object definitions ...
(object AccelGroup 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkAccelGroup )
)

(object AccelLabel 
  (in-module Gtk)
  (parent Label (Gtk))
  (c-name GtkAccelLabel )
)

(object Accessible 
  (in-module Gtk)
  (parent Object (Atk))
  (c-name GtkAccessible )
)

(object Adjustment 
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkAdjustment )
)

(object Alignment 
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkAlignment )
)

(object Arrow 
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkArrow )
)

(object AspectFrame 
  (in-module Gtk)
  (parent Frame (Gtk))
  (c-name GtkAspectFrame )
)

(object ButtonBox 
  (in-module Gtk)
  (parent Box (Gtk))
  (c-name GtkButtonBox )
)

(object Bin 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkBin )
)

(object Box 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkBox )
)

(object Button 
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkButton )
)

(object Calendar 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkCalendar )
)

(object CellRenderer 
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkCellRenderer )
)

(object CellRendererPixbuf 
  (in-module Gtk)
  (parent CellRenderer (Gtk))
  (c-name GtkCellRendererPixbuf )
)

(object CellRendererText 
  (in-module Gtk)
  (parent CellRenderer (Gtk))
  (c-name GtkCellRendererText )
)

(object CellRendererToggle 
  (in-module Gtk)
  (parent CellRenderer (Gtk))
  (c-name GtkCellRendererToggle )
)

(object CheckButton 
  (in-module Gtk)
  (parent ToggleButton (Gtk))
  (c-name GtkCheckButton )
)

(object CheckMenuItem 
  (in-module Gtk)
  (parent MenuItem (Gtk))
  (c-name GtkCheckMenuItem )
)

(object CList 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkCList )
)

(object ColorSelectionDialog 
  (in-module Gtk)
  (parent Dialog (Gtk))
  (c-name GtkColorSelectionDialog )
)

(object ColorSelection 
  (in-module Gtk)
  (parent VBox (Gtk))
  (c-name GtkColorSelection )
)

(object Combo 
  (in-module Gtk)
  (parent HBox (Gtk))
  (c-name GtkCombo )
)

(object Container 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkContainer )
)

(object CTree 
  (in-module Gtk)
  (parent CList (Gtk))
  (c-name GtkCTree )
)

(object Curve 
  (in-module Gtk)
  (parent DrawingArea (Gtk))
  (c-name GtkCurve )
)

(object Dialog 
  (in-module Gtk)
  (parent Window (Gtk))
  (c-name GtkDialog )
)

(object DrawingArea 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkDrawingArea )
)

(object Entry 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkEntry )
)

(object EventBox 
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkEventBox )
)

(object FileSelection 
  (in-module Gtk)
  (parent Dialog (Gtk))
  (c-name GtkFileSelection )
)

(object Fixed 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkFixed )
)

(object FontSelection 
  (in-module Gtk)
  (parent VBox (Gtk))
  (c-name GtkFontSelection )
)

(object FontSelectionDialog 
  (in-module Gtk)
  (parent Dialog (Gtk))
  (c-name GtkFontSelectionDialog )
)

(object Frame 
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkFrame )
)

(object GammaCurve 
  (in-module Gtk)
  (parent VBox (Gtk))
  (c-name GtkGammaCurve )
)

(object HandleBox 
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkHandleBox )
)

(object HButtonBox 
  (in-module Gtk)
  (parent ButtonBox (Gtk))
  (c-name GtkHButtonBox )
)

(object HBox 
  (in-module Gtk)
  (parent Box (Gtk))
  (c-name GtkHBox )
)

(object HPaned 
  (in-module Gtk)
  (parent Paned (Gtk))
  (c-name GtkHPaned )
)

(object HRuler 
  (in-module Gtk)
  (parent Ruler (Gtk))
  (c-name GtkHRuler )
)

(object HScale 
  (in-module Gtk)
  (parent Scale (Gtk))
  (c-name GtkHScale )
)

(object HScrollbar 
  (in-module Gtk)
  (parent Scrollbar (Gtk))
  (c-name GtkHScrollbar )
)

(object HSeparator 
  (in-module Gtk)
  (parent Separator (Gtk))
  (c-name GtkHSeparator )
)

(object IconFactory 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkIconFactory )
)

(object Image 
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkImage )
)

(object ImageMenuItem 
  (in-module Gtk)
  (parent MenuItem (Gtk))
  (c-name GtkImageMenuItem )
)

(object IMContext 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkIMContext )
)

(object IMContextSimple 
  (in-module Gtk)
  (parent IMContext (Gtk))
  (c-name GtkIMContextSimple )
)

(object IMMulticontext 
  (in-module Gtk)
  (parent IMContext (Gtk))
  (c-name GtkIMMulticontext )
)

(object InputDialog 
  (in-module Gtk)
  (parent Dialog (Gtk))
  (c-name GtkInputDialog )
)

(object Invisible 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkInvisible )
)

(object ItemFactory 
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkItemFactory )
)

(object Item 
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkItem )
)

(object Label 
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkLabel )
)

(object Layout 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkLayout )
)

(object List 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkList )
)

(object ListItem 
  (in-module Gtk)
  (parent Item (Gtk))
  (c-name GtkListItem )
)

(object ListStore 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkListStore )
)

(object MenuBar 
  (in-module Gtk)
  (parent MenuShell (Gtk))
  (c-name GtkMenuBar )
)

(object Menu 
  (in-module Gtk)
  (parent MenuShell (Gtk))
  (c-name GtkMenu )
)

(object MenuItem 
  (in-module Gtk)
  (parent Item (Gtk))
  (c-name GtkMenuItem )
)

(object MenuShell 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkMenuShell )
)

(object MessageDialog 
  (in-module Gtk)
  (parent Dialog (Gtk))
  (c-name GtkMessageDialog )
)

(object Misc 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkMisc )
)

(object Notebook 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkNotebook )
)

(object Object 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkObject )
)

(object OldEditable 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkOldEditable )
)

(object OptionMenu 
  (in-module Gtk)
  (parent Button (Gtk))
  (c-name GtkOptionMenu )
)

(object Paned 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkPaned )
)

(object Pixmap 
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkPixmap )
)

(object Plug 
  (in-module Gtk)
  (parent Window (Gtk))
  (c-name GtkPlug )
)

(object Preview 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkPreview )
)

(object ProgressBar 
  (in-module Gtk)
  (parent Progress (Gtk))
  (c-name GtkProgressBar )
)

(object Progress 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkProgress )
)

(object RadioButton 
  (in-module Gtk)
  (parent CheckButton (Gtk))
  (c-name GtkRadioButton )
)

(object RadioMenuItem 
  (in-module Gtk)
  (parent CheckMenuItem (Gtk))
  (c-name GtkRadioMenuItem )
)

(object Range 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkRange )
)

(object RcStyle 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkRcStyle )
)

(object Ruler 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkRuler )
)

(object Scale 
  (in-module Gtk)
  (parent Range (Gtk))
  (c-name GtkScale )
)

(object Scrollbar 
  (in-module Gtk)
  (parent Range (Gtk))
  (c-name GtkScrollbar )
)

(object ScrolledWindow 
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkScrolledWindow )
)

(object Separator 
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkSeparator )
)

(object SeparatorMenuItem 
  (in-module Gtk)
  (parent MenuItem (Gtk))
  (c-name GtkSeparatorMenuItem )
)

(object Settings 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkSettings )
)

(object SizeGroup 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkSizeGroup )
)

(object Socket 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkSocket )
)

(object SpinButton 
  (in-module Gtk)
  (parent Entry (Gtk))
  (c-name GtkSpinButton )
)

(object Statusbar 
  (in-module Gtk)
  (parent HBox (Gtk))
  (c-name GtkStatusbar )
)

(object Style 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkStyle )
)

(object Table 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkTable )
)

(object TearoffMenuItem 
  (in-module Gtk)
  (parent MenuItem (Gtk))
  (c-name GtkTearoffMenuItem )
)

(object TextBuffer 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkTextBuffer )
)

(object TextChildAnchor 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkTextChildAnchor )
)

(object TextLayout 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkTextLayout )
)

(object TextMark 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkTextMark )
)

(object TextTag 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkTextTag )
)

(object TextTagTable 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkTextTagTable )
)

(object TextView 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkTextView )
)

(object ToggleButton 
  (in-module Gtk)
  (parent Button (Gtk))
  (c-name GtkToggleButton )
)

(object Toolbar 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkToolbar )
)

(object Tooltips 
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkTooltips )
)

(object TreeModelSort 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkTreeModelSort )
)

(object TreeSelection 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkTreeSelection )
)

(object TreeStore 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkTreeStore )
)

(object TreeViewColumn 
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkTreeViewColumn )
)

(object TreeView 
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkTreeView )
)

(object VButtonBox 
  (in-module Gtk)
  (parent ButtonBox (Gtk))
  (c-name GtkVButtonBox )
)

(object VBox 
  (in-module Gtk)
  (parent Box (Gtk))
  (c-name GtkVBox )
)

(object Viewport 
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkViewport )
)

(object VPaned 
  (in-module Gtk)
  (parent Paned (Gtk))
  (c-name GtkVPaned )
)

(object VRuler 
  (in-module Gtk)
  (parent Ruler (Gtk))
  (c-name GtkVRuler )
)

(object VScale 
  (in-module Gtk)
  (parent Scale (Gtk))
  (c-name GtkVScale )
)

(object VScrollbar 
  (in-module Gtk)
  (parent Scrollbar (Gtk))
  (c-name GtkVScrollbar )
)

(object VSeparator 
  (in-module Gtk)
  (parent Separator (Gtk))
  (c-name GtkVSeparator )
)

(object Widget 
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkWidget )
)

(object Window 
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkWindow )
)

(object WindowGroup 
  (in-module Gtk)
  (parent GObject)
  (c-name GtkWindowGroup )
)

;; Enumerations and flags ...

(enum AccelFlags
  (in-module gtk)
  (c-name GtkAccelFlags)
  (value (name visible) (c-name GTK_ACCEL_VISIBLE))
  (value (name locked) (c-name GTK_ACCEL_LOCKED))
  (value (name mask) (c-name GTK_ACCEL_MASK))
)

(enum CalendarDisplayOptions
  (in-module gtk)
  (c-name GtkCalendarDisplayOptions)
  (value (name heading) (c-name GTK_CALENDAR_SHOW_HEADING))
  (value (name day_names) (c-name GTK_CALENDAR_SHOW_DAY_NAMES))
  (value (name nth_change) (c-name GTK_CALENDAR_NO_MONTH_CHANGE))
  (value (name week_numbers) (c-name GTK_CALENDAR_SHOW_WEEK_NUMBERS))
  (value (name start_monday) (c-name GTK_CALENDAR_WEEK_START_MONDAY))
)

(enum CellRendererState
  (in-module gtk)
  (c-name GtkCellRendererState)
  (value (name selected) (c-name GTK_CELL_RENDERER_SELECTED))
  (value (name prelit) (c-name GTK_CELL_RENDERER_PRELIT))
  (value (name insensitive) (c-name GTK_CELL_RENDERER_INSENSITIVE))
  (value (name sorted) (c-name GTK_CELL_RENDERER_SORTED))
  (value (name focused) (c-name GTK_CELL_RENDERER_FOCUSED))
)

(enum CellRendererMode
  (in-module gtk)
  (c-name GtkCellRendererMode)
  (value (name inert) (c-name GTK_CELL_RENDERER_MODE_INERT))
  (value (name activatable) (c-name GTK_CELL_RENDERER_MODE_ACTIVATABLE))
  (value (name editable) (c-name GTK_CELL_RENDERER_MODE_EDITABLE))
)

(enum 
  (in-module gtk)
  (value (name tk_tree_sortable_default_sort_column_id) (c-name GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID))
)

(enum CellType
  (in-module gtk)
  (c-name GtkCellType)
  (value (name empty) (c-name GTK_CELL_EMPTY))
  (value (name text) (c-name GTK_CELL_TEXT))
  (value (name pixmap) (c-name GTK_CELL_PIXMAP))
  (value (name pixtext) (c-name GTK_CELL_PIXTEXT))
  (value (name widget) (c-name GTK_CELL_WIDGET))
)

(enum CListDragPos
  (in-module gtk)
  (c-name GtkCListDragPos)
  (value (name none) (c-name GTK_CLIST_DRAG_NONE))
  (value (name before) (c-name GTK_CLIST_DRAG_BEFORE))
  (value (name into) (c-name GTK_CLIST_DRAG_INTO))
  (value (name after) (c-name GTK_CLIST_DRAG_AFTER))
)

(enum ButtonAction
  (in-module gtk)
  (c-name GtkButtonAction)
  (value (name ignored) (c-name GTK_BUTTON_IGNORED))
  (value (name selects) (c-name GTK_BUTTON_SELECTS))
  (value (name drags) (c-name GTK_BUTTON_DRAGS))
  (value (name expands) (c-name GTK_BUTTON_EXPANDS))
)

(enum CTreePos
  (in-module gtk)
  (c-name GtkCTreePos)
  (value (name before) (c-name GTK_CTREE_POS_BEFORE))
  (value (name as_child) (c-name GTK_CTREE_POS_AS_CHILD))
  (value (name after) (c-name GTK_CTREE_POS_AFTER))
)

(enum CTreeLineStyle
  (in-module gtk)
  (c-name GtkCTreeLineStyle)
  (value (name none) (c-name GTK_CTREE_LINES_NONE))
  (value (name solid) (c-name GTK_CTREE_LINES_SOLID))
  (value (name dotted) (c-name GTK_CTREE_LINES_DOTTED))
  (value (name tabbed) (c-name GTK_CTREE_LINES_TABBED))
)

(enum CTreeExpanderStyle
  (in-module gtk)
  (c-name GtkCTreeExpanderStyle)
  (value (name none) (c-name GTK_CTREE_EXPANDER_NONE))
  (value (name square) (c-name GTK_CTREE_EXPANDER_SQUARE))
  (value (name triangle) (c-name GTK_CTREE_EXPANDER_TRIANGLE))
  (value (name circular) (c-name GTK_CTREE_EXPANDER_CIRCULAR))
)

(enum CTreeExpansionType
  (in-module gtk)
  (c-name GtkCTreeExpansionType)
  (value (name expand) (c-name GTK_CTREE_EXPANSION_EXPAND))
  (value (name expand_recursive) (c-name GTK_CTREE_EXPANSION_EXPAND_RECURSIVE))
  (value (name collapse) (c-name GTK_CTREE_EXPANSION_COLLAPSE))
  (value (name collapse_recursive) (c-name GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE))
  (value (name toggle) (c-name GTK_CTREE_EXPANSION_TOGGLE))
  (value (name toggle_recursive) (c-name GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE))
)

(enum DebugFlag
  (in-module gtk)
  (c-name GtkDebugFlag)
  (value (name misc) (c-name GTK_DEBUG_MISC))
  (value (name plugsocket) (c-name GTK_DEBUG_PLUGSOCKET))
  (value (name text) (c-name GTK_DEBUG_TEXT))
  (value (name tree) (c-name GTK_DEBUG_TREE))
  (value (name updates) (c-name GTK_DEBUG_UPDATES))
  (value (name keybindings) (c-name GTK_DEBUG_KEYBINDINGS))
  (value (name multihead) (c-name GTK_DEBUG_MULTIHEAD))
)

(enum DialogFlags
  (in-module gtk)
  (c-name GtkDialogFlags)
  (value (name modal) (c-name GTK_DIALOG_MODAL))
  (value (name destroy_with_parent) (c-name GTK_DIALOG_DESTROY_WITH_PARENT))
  (value (name no_separator) (c-name GTK_DIALOG_NO_SEPARATOR))
)

(enum ResponseType
  (in-module gtk)
  (c-name GtkResponseType)
  (value (name none) (c-name GTK_RESPONSE_NONE))
  (value (name reject) (c-name GTK_RESPONSE_REJECT))
  (value (name accept) (c-name GTK_RESPONSE_ACCEPT))
  (value (name delete_event) (c-name GTK_RESPONSE_DELETE_EVENT))
  (value (name ok) (c-name GTK_RESPONSE_OK))
  (value (name cancel) (c-name GTK_RESPONSE_CANCEL))
  (value (name close) (c-name GTK_RESPONSE_CLOSE))
  (value (name yes) (c-name GTK_RESPONSE_YES))
  (value (name no) (c-name GTK_RESPONSE_NO))
  (value (name apply) (c-name GTK_RESPONSE_APPLY))
  (value (name help) (c-name GTK_RESPONSE_HELP))
)

(enum DestDefaults
  (in-module gtk)
  (c-name GtkDestDefaults)
  (value (name motion) (c-name GTK_DEST_DEFAULT_MOTION))
  (value (name highlight) (c-name GTK_DEST_DEFAULT_HIGHLIGHT))
  (value (name drop) (c-name GTK_DEST_DEFAULT_DROP))
  (value (name all) (c-name GTK_DEST_DEFAULT_ALL))
)

(enum TargetFlags
  (in-module gtk)
  (c-name GtkTargetFlags)
  (value (name app) (c-name GTK_TARGET_SAME_APP))
  (value (name widget) (c-name GTK_TARGET_SAME_WIDGET))
)

(enum AnchorType
  (in-module gtk)
  (c-name GtkAnchorType)
  (value (name center) (c-name GTK_ANCHOR_CENTER))
  (value (name north) (c-name GTK_ANCHOR_NORTH))
  (value (name north_west) (c-name GTK_ANCHOR_NORTH_WEST))
  (value (name north_east) (c-name GTK_ANCHOR_NORTH_EAST))
  (value (name south) (c-name GTK_ANCHOR_SOUTH))
  (value (name south_west) (c-name GTK_ANCHOR_SOUTH_WEST))
  (value (name south_east) (c-name GTK_ANCHOR_SOUTH_EAST))
  (value (name west) (c-name GTK_ANCHOR_WEST))
  (value (name east) (c-name GTK_ANCHOR_EAST))
  (value (name n) (c-name GTK_ANCHOR_N))
  (value (name nw) (c-name GTK_ANCHOR_NW))
  (value (name ne) (c-name GTK_ANCHOR_NE))
  (value (name s) (c-name GTK_ANCHOR_S))
  (value (name sw) (c-name GTK_ANCHOR_SW))
  (value (name se) (c-name GTK_ANCHOR_SE))
  (value (name w) (c-name GTK_ANCHOR_W))
  (value (name e) (c-name GTK_ANCHOR_E))
)

(enum ArrowType
  (in-module gtk)
  (c-name GtkArrowType)
  (value (name up) (c-name GTK_ARROW_UP))
  (value (name down) (c-name GTK_ARROW_DOWN))
  (value (name left) (c-name GTK_ARROW_LEFT))
  (value (name right) (c-name GTK_ARROW_RIGHT))
)

(enum AttachOptions
  (in-module gtk)
  (c-name GtkAttachOptions)
  (value (name expand) (c-name GTK_EXPAND))
  (value (name shrink) (c-name GTK_SHRINK))
  (value (name fill) (c-name GTK_FILL))
)

(enum ButtonBoxStyle
  (in-module gtk)
  (c-name GtkButtonBoxStyle)
  (value (name default_style) (c-name GTK_BUTTONBOX_DEFAULT_STYLE))
  (value (name spread) (c-name GTK_BUTTONBOX_SPREAD))
  (value (name edge) (c-name GTK_BUTTONBOX_EDGE))
  (value (name start) (c-name GTK_BUTTONBOX_START))
  (value (name end) (c-name GTK_BUTTONBOX_END))
)

(enum CurveType
  (in-module gtk)
  (c-name GtkCurveType)
  (value (name linear) (c-name GTK_CURVE_TYPE_LINEAR))
  (value (name spline) (c-name GTK_CURVE_TYPE_SPLINE))
  (value (name free) (c-name GTK_CURVE_TYPE_FREE))
)

(enum DeleteType
  (in-module gtk)
  (c-name GtkDeleteType)
  (value (name chars) (c-name GTK_DELETE_CHARS))
  (value (name word_ends) (c-name GTK_DELETE_WORD_ENDS))
  (value (name words) (c-name GTK_DELETE_WORDS))
  (value (name display_lines) (c-name GTK_DELETE_DISPLAY_LINES))
  (value (name display_line_ends) (c-name GTK_DELETE_DISPLAY_LINE_ENDS))
  (value (name paragraph_ends) (c-name GTK_DELETE_PARAGRAPH_ENDS))
  (value (name paragraphs) (c-name GTK_DELETE_PARAGRAPHS))
  (value (name whitespace) (c-name GTK_DELETE_WHITESPACE))
)

(enum DirectionType
  (in-module gtk)
  (c-name GtkDirectionType)
  (value (name tab_forward) (c-name GTK_DIR_TAB_FORWARD))
  (value (name tab_backward) (c-name GTK_DIR_TAB_BACKWARD))
  (value (name up) (c-name GTK_DIR_UP))
  (value (name down) (c-name GTK_DIR_DOWN))
  (value (name left) (c-name GTK_DIR_LEFT))
  (value (name right) (c-name GTK_DIR_RIGHT))
)

(enum ExpanderStyle
  (in-module gtk)
  (c-name GtkExpanderStyle)
  (value (name collapsed) (c-name GTK_EXPANDER_COLLAPSED))
  (value (name semi_collapsed) (c-name GTK_EXPANDER_SEMI_COLLAPSED))
  (value (name semi_expanded) (c-name GTK_EXPANDER_SEMI_EXPANDED))
  (value (name expanded) (c-name GTK_EXPANDER_EXPANDED))
)

(enum IconSize
  (in-module gtk)
  (c-name GtkIconSize)
  (value (name invalid) (c-name GTK_ICON_SIZE_INVALID))
  (value (name menu) (c-name GTK_ICON_SIZE_MENU))
  (value (name small_toolbar) (c-name GTK_ICON_SIZE_SMALL_TOOLBAR))
  (value (name large_toolbar) (c-name GTK_ICON_SIZE_LARGE_TOOLBAR))
  (value (name button) (c-name GTK_ICON_SIZE_BUTTON))
  (value (name dnd) (c-name GTK_ICON_SIZE_DND))
  (value (name dialog) (c-name GTK_ICON_SIZE_DIALOG))
)

(enum SideType
  (in-module gtk)
  (c-name GtkSideType)
  (value (name top) (c-name GTK_SIDE_TOP))
  (value (name bottom) (c-name GTK_SIDE_BOTTOM))
  (value (name left) (c-name GTK_SIDE_LEFT))
  (value (name right) (c-name GTK_SIDE_RIGHT))
)

(enum TextDirection
  (in-module gtk)
  (c-name GtkTextDirection)
  (value (name none) (c-name GTK_TEXT_DIR_NONE))
  (value (name ltr) (c-name GTK_TEXT_DIR_LTR))
  (value (name rtl) (c-name GTK_TEXT_DIR_RTL))
)

(enum Justification
  (in-module gtk)
  (c-name GtkJustification)
  (value (name left) (c-name GTK_JUSTIFY_LEFT))
  (value (name right) (c-name GTK_JUSTIFY_RIGHT))
  (value (name center) (c-name GTK_JUSTIFY_CENTER))
  (value (name fill) (c-name GTK_JUSTIFY_FILL))
)

(enum MatchType
  (in-module gtk)
  (c-name GtkMatchType)
  (value (name all) (c-name GTK_MATCH_ALL))
  (value (name all_tail) (c-name GTK_MATCH_ALL_TAIL))
  (value (name head) (c-name GTK_MATCH_HEAD))
  (value (name tail) (c-name GTK_MATCH_TAIL))
  (value (name exact) (c-name GTK_MATCH_EXACT))
  (value (name last) (c-name GTK_MATCH_LAST))
)

(enum MenuDirectionType
  (in-module gtk)
  (c-name GtkMenuDirectionType)
  (value (name parent) (c-name GTK_MENU_DIR_PARENT))
  (value (name child) (c-name GTK_MENU_DIR_CHILD))
  (value (name next) (c-name GTK_MENU_DIR_NEXT))
  (value (name prev) (c-name GTK_MENU_DIR_PREV))
)

(enum MetricType
  (in-module gtk)
  (c-name GtkMetricType)
  (value (name pixels) (c-name GTK_PIXELS))
  (value (name inches) (c-name GTK_INCHES))
  (value (name centimeters) (c-name GTK_CENTIMETERS))
)

(enum MovementStep
  (in-module gtk)
  (c-name GtkMovementStep)
  (value (name logical_positions) (c-name GTK_MOVEMENT_LOGICAL_POSITIONS))
  (value (name visual_positions) (c-name GTK_MOVEMENT_VISUAL_POSITIONS))
  (value (name words) (c-name GTK_MOVEMENT_WORDS))
  (value (name display_lines) (c-name GTK_MOVEMENT_DISPLAY_LINES))
  (value (name display_line_ends) (c-name GTK_MOVEMENT_DISPLAY_LINE_ENDS))
  (value (name paragraphs) (c-name GTK_MOVEMENT_PARAGRAPHS))
  (value (name paragraph_ends) (c-name GTK_MOVEMENT_PARAGRAPH_ENDS))
  (value (name pages) (c-name GTK_MOVEMENT_PAGES))
  (value (name buffer_ends) (c-name GTK_MOVEMENT_BUFFER_ENDS))
)

(enum Orientation
  (in-module gtk)
  (c-name GtkOrientation)
  (value (name horizontal) (c-name GTK_ORIENTATION_HORIZONTAL))
  (value (name vertical) (c-name GTK_ORIENTATION_VERTICAL))
)

(enum CornerType
  (in-module gtk)
  (c-name GtkCornerType)
  (value (name left) (c-name GTK_CORNER_TOP_LEFT))
  (value (name om_left) (c-name GTK_CORNER_BOTTOM_LEFT))
  (value (name right) (c-name GTK_CORNER_TOP_RIGHT))
  (value (name om_right) (c-name GTK_CORNER_BOTTOM_RIGHT))
)

(enum PackType
  (in-module gtk)
  (c-name GtkPackType)
  (value (name start) (c-name GTK_PACK_START))
  (value (name end) (c-name GTK_PACK_END))
)

(enum PathPriorityType
  (in-module gtk)
  (c-name GtkPathPriorityType)
  (value (name lowest) (c-name GTK_PATH_PRIO_LOWEST))
  (value (name gtk) (c-name GTK_PATH_PRIO_GTK))
  (value (name application) (c-name GTK_PATH_PRIO_APPLICATION))
  (value (name theme) (c-name GTK_PATH_PRIO_THEME))
  (value (name rc) (c-name GTK_PATH_PRIO_RC))
  (value (name highest) (c-name GTK_PATH_PRIO_HIGHEST))
)

(enum PathType
  (in-module gtk)
  (c-name GtkPathType)
  (value (name widget) (c-name GTK_PATH_WIDGET))
  (value (name widget_class) (c-name GTK_PATH_WIDGET_CLASS))
  (value (name class) (c-name GTK_PATH_CLASS))
)

(enum PolicyType
  (in-module gtk)
  (c-name GtkPolicyType)
  (value (name always) (c-name GTK_POLICY_ALWAYS))
  (value (name automatic) (c-name GTK_POLICY_AUTOMATIC))
  (value (name never) (c-name GTK_POLICY_NEVER))
)

(enum PositionType
  (in-module gtk)
  (c-name GtkPositionType)
  (value (name left) (c-name GTK_POS_LEFT))
  (value (name right) (c-name GTK_POS_RIGHT))
  (value (name top) (c-name GTK_POS_TOP))
  (value (name bottom) (c-name GTK_POS_BOTTOM))
)

(enum PreviewType
  (in-module gtk)
  (c-name GtkPreviewType)
  (value (name color) (c-name GTK_PREVIEW_COLOR))
  (value (name grayscale) (c-name GTK_PREVIEW_GRAYSCALE))
)

(enum ReliefStyle
  (in-module gtk)
  (c-name GtkReliefStyle)
  (value (name normal) (c-name GTK_RELIEF_NORMAL))
  (value (name half) (c-name GTK_RELIEF_HALF))
  (value (name none) (c-name GTK_RELIEF_NONE))
)

(enum ResizeMode
  (in-module gtk)
  (c-name GtkResizeMode)
  (value (name parent) (c-name GTK_RESIZE_PARENT))
  (value (name queue) (c-name GTK_RESIZE_QUEUE))
  (value (name immediate) (c-name GTK_RESIZE_IMMEDIATE))
)

(enum SignalRunType
  (in-module gtk)
  (c-name GtkSignalRunType)
  (value (name first) (c-name GTK_RUN_FIRST))
  (value (name last) (c-name GTK_RUN_LAST))
  (value (name both) (c-name GTK_RUN_BOTH))
  (value (name no_recurse) (c-name GTK_RUN_NO_RECURSE))
  (value (name action) (c-name GTK_RUN_ACTION))
  (value (name no_hooks) (c-name GTK_RUN_NO_HOOKS))
)

(enum ScrollType
  (in-module gtk)
  (c-name GtkScrollType)
  (value (name none) (c-name GTK_SCROLL_NONE))
  (value (name jump) (c-name GTK_SCROLL_JUMP))
  (value (name step_backward) (c-name GTK_SCROLL_STEP_BACKWARD))
  (value (name step_forward) (c-name GTK_SCROLL_STEP_FORWARD))
  (value (name page_backward) (c-name GTK_SCROLL_PAGE_BACKWARD))
  (value (name page_forward) (c-name GTK_SCROLL_PAGE_FORWARD))
  (value (name step_up) (c-name GTK_SCROLL_STEP_UP))
  (value (name step_down) (c-name GTK_SCROLL_STEP_DOWN))
  (value (name page_up) (c-name GTK_SCROLL_PAGE_UP))
  (value (name page_down) (c-name GTK_SCROLL_PAGE_DOWN))
  (value (name step_left) (c-name GTK_SCROLL_STEP_LEFT))
  (value (name step_right) (c-name GTK_SCROLL_STEP_RIGHT))
  (value (name page_left) (c-name GTK_SCROLL_PAGE_LEFT))
  (value (name page_right) (c-name GTK_SCROLL_PAGE_RIGHT))
  (value (name start) (c-name GTK_SCROLL_START))
  (value (name end) (c-name GTK_SCROLL_END))
)

(enum SelectionMode
  (in-module gtk)
  (c-name GtkSelectionMode)
  (value (name none) (c-name GTK_SELECTION_NONE))
  (value (name single) (c-name GTK_SELECTION_SINGLE))
  (value (name browse) (c-name GTK_SELECTION_BROWSE))
  (value (name multiple) (c-name GTK_SELECTION_MULTIPLE))
  (value (name extended) (c-name GTK_SELECTION_EXTENDED))
)

(enum ShadowType
  (in-module gtk)
  (c-name GtkShadowType)
  (value (name none) (c-name GTK_SHADOW_NONE))
  (value (name in) (c-name GTK_SHADOW_IN))
  (value (name out) (c-name GTK_SHADOW_OUT))
  (value (name etched_in) (c-name GTK_SHADOW_ETCHED_IN))
  (value (name etched_out) (c-name GTK_SHADOW_ETCHED_OUT))
)

(enum StateType
  (in-module gtk)
  (c-name GtkStateType)
  (value (name normal) (c-name GTK_STATE_NORMAL))
  (value (name active) (c-name GTK_STATE_ACTIVE))
  (value (name prelight) (c-name GTK_STATE_PRELIGHT))
  (value (name selected) (c-name GTK_STATE_SELECTED))
  (value (name insensitive) (c-name GTK_STATE_INSENSITIVE))
)

(enum SubmenuDirection
  (in-module gtk)
  (c-name GtkSubmenuDirection)
  (value (name left) (c-name GTK_DIRECTION_LEFT))
  (value (name right) (c-name GTK_DIRECTION_RIGHT))
)

(enum SubmenuPlacement
  (in-module gtk)
  (c-name GtkSubmenuPlacement)
  (value (name tk_top_bottom) (c-name GTK_TOP_BOTTOM))
  (value (name tk_left_right) (c-name GTK_LEFT_RIGHT))
)

(enum ToolbarStyle
  (in-module gtk)
  (c-name GtkToolbarStyle)
  (value (name icons) (c-name GTK_TOOLBAR_ICONS))
  (value (name text) (c-name GTK_TOOLBAR_TEXT))
  (value (name both) (c-name GTK_TOOLBAR_BOTH))
  (value (name both_horiz) (c-name GTK_TOOLBAR_BOTH_HORIZ))
)

(enum UpdateType
  (in-module gtk)
  (c-name GtkUpdateType)
  (value (name continuous) (c-name GTK_UPDATE_CONTINUOUS))
  (value (name discontinuous) (c-name GTK_UPDATE_DISCONTINUOUS))
  (value (name delayed) (c-name GTK_UPDATE_DELAYED))
)

(enum Visibility
  (in-module gtk)
  (c-name GtkVisibility)
  (value (name none) (c-name GTK_VISIBILITY_NONE))
  (value (name partial) (c-name GTK_VISIBILITY_PARTIAL))
  (value (name full) (c-name GTK_VISIBILITY_FULL))
)

(enum WindowPosition
  (in-module gtk)
  (c-name GtkWindowPosition)
  (value (name none) (c-name GTK_WIN_POS_NONE))
  (value (name center) (c-name GTK_WIN_POS_CENTER))
  (value (name mouse) (c-name GTK_WIN_POS_MOUSE))
  (value (name center_always) (c-name GTK_WIN_POS_CENTER_ALWAYS))
  (value (name center_on_parent) (c-name GTK_WIN_POS_CENTER_ON_PARENT))
)

(enum WindowType
  (in-module gtk)
  (c-name GtkWindowType)
  (value (name toplevel) (c-name GTK_WINDOW_TOPLEVEL))
  (value (name popup) (c-name GTK_WINDOW_POPUP))
)

(enum WrapMode
  (in-module gtk)
  (c-name GtkWrapMode)
  (value (name tk_wrap_none) (c-name GTK_WRAP_NONE))
  (value (name tk_wrap_char) (c-name GTK_WRAP_CHAR))
  (value (name tk_wrap_word) (c-name GTK_WRAP_WORD))
)

(enum SortType
  (in-module gtk)
  (c-name GtkSortType)
  (value (name ascending) (c-name GTK_SORT_ASCENDING))
  (value (name descending) (c-name GTK_SORT_DESCENDING))
)

(enum IMPreeditStyle
  (in-module gtk)
  (c-name GtkIMPreeditStyle)
  (value (name nothing) (c-name GTK_IM_PREEDIT_NOTHING))
  (value (name callback) (c-name GTK_IM_PREEDIT_CALLBACK))
)

(enum IMStatusStyle
  (in-module gtk)
  (c-name GtkIMStatusStyle)
  (value (name nothing) (c-name GTK_IM_STATUS_NOTHING))
  (value (name callback) (c-name GTK_IM_STATUS_CALLBACK))
)

(enum ImageType
  (in-module gtk)
  (c-name GtkImageType)
  (value (name empty) (c-name GTK_IMAGE_EMPTY))
  (value (name pixmap) (c-name GTK_IMAGE_PIXMAP))
  (value (name image) (c-name GTK_IMAGE_IMAGE))
  (value (name pixbuf) (c-name GTK_IMAGE_PIXBUF))
  (value (name stock) (c-name GTK_IMAGE_STOCK))
  (value (name icon_set) (c-name GTK_IMAGE_ICON_SET))
  (value (name animation) (c-name GTK_IMAGE_ANIMATION))
)

(enum MessageType
  (in-module gtk)
  (c-name GtkMessageType)
  (value (name info) (c-name GTK_MESSAGE_INFO))
  (value (name warning) (c-name GTK_MESSAGE_WARNING))
  (value (name question) (c-name GTK_MESSAGE_QUESTION))
  (value (name error) (c-name GTK_MESSAGE_ERROR))
)

(enum ButtonsType
  (in-module gtk)
  (c-name GtkButtonsType)
  (value (name none) (c-name GTK_BUTTONS_NONE))
  (value (name ok) (c-name GTK_BUTTONS_OK))
  (value (name close) (c-name GTK_BUTTONS_CLOSE))
  (value (name cancel) (c-name GTK_BUTTONS_CANCEL))
  (value (name yes_no) (c-name GTK_BUTTONS_YES_NO))
  (value (name ok_cancel) (c-name GTK_BUTTONS_OK_CANCEL))
)

(enum NotebookTab
  (in-module gtk)
  (c-name GtkNotebookTab)
  (value (name first) (c-name GTK_NOTEBOOK_TAB_FIRST))
  (value (name last) (c-name GTK_NOTEBOOK_TAB_LAST))
)

(enum ObjectFlags
  (in-module gtk)
  (c-name GtkObjectFlags)
  (value (name in_destruction) (c-name GTK_IN_DESTRUCTION))
  (value (name floating) (c-name GTK_FLOATING))
  (value (name reserved_1) (c-name GTK_RESERVED_1))
  (value (name reserved_2) (c-name GTK_RESERVED_2))
)

(enum ArgFlags
  (in-module gtk)
  (c-name GtkArgFlags)
  (value (name readable) (c-name GTK_ARG_READABLE))
  (value (name writable) (c-name GTK_ARG_WRITABLE))
  (value (name construct) (c-name GTK_ARG_CONSTRUCT))
  (value (name construct_only) (c-name GTK_ARG_CONSTRUCT_ONLY))
  (value (name child_arg) (c-name GTK_ARG_CHILD_ARG))
)

(enum PrivateFlags
  (in-module gtk)
  (c-name GtkPrivateFlags)
  (value (name user_style) (c-name PRIVATE_GTK_USER_STYLE))
  (value (name resize_pending) (c-name PRIVATE_GTK_RESIZE_PENDING))
  (value (name leave_pending) (c-name PRIVATE_GTK_LEAVE_PENDING))
  (value (name has_shape_mask) (c-name PRIVATE_GTK_HAS_SHAPE_MASK))
  (value (name in_reparent) (c-name PRIVATE_GTK_IN_REPARENT))
  (value (name direction_set) (c-name PRIVATE_GTK_DIRECTION_SET))
  (value (name direction_ltr) (c-name PRIVATE_GTK_DIRECTION_LTR))
  (value (name anchored) (c-name PRIVATE_GTK_ANCHORED))
  (value (name child_visible) (c-name PRIVATE_GTK_CHILD_VISIBLE))
  (value (name redraw_on_alloc) (c-name PRIVATE_GTK_REDRAW_ON_ALLOC))
  (value (name alloc_needed) (c-name PRIVATE_GTK_ALLOC_NEEDED))
  (value (name request_needed) (c-name PRIVATE_GTK_REQUEST_NEEDED))
)

(enum ProgressBarStyle
  (in-module gtk)
  (c-name GtkProgressBarStyle)
  (value (name continuous) (c-name GTK_PROGRESS_CONTINUOUS))
  (value (name discrete) (c-name GTK_PROGRESS_DISCRETE))
)

(enum ProgressBarOrientation
  (in-module gtk)
  (c-name GtkProgressBarOrientation)
  (value (name tk_progress_left_to_right) (c-name GTK_PROGRESS_LEFT_TO_RIGHT))
  (value (name tk_progress_right_to_left) (c-name GTK_PROGRESS_RIGHT_TO_LEFT))
  (value (name tk_progress_bottom_to_top) (c-name GTK_PROGRESS_BOTTOM_TO_TOP))
  (value (name tk_progress_top_to_bottom) (c-name GTK_PROGRESS_TOP_TO_BOTTOM))
)

(enum RcFlags
  (in-module gtk)
  (c-name GtkRcFlags)
  (value (name fg) (c-name GTK_RC_FG))
  (value (name bg) (c-name GTK_RC_BG))
  (value (name text) (c-name GTK_RC_TEXT))
  (value (name base) (c-name GTK_RC_BASE))
)

(enum RcTokenType
  (in-module gtk)
  (c-name GtkRcTokenType)
  (value (name invalid) (c-name GTK_RC_TOKEN_INVALID))
  (value (name include) (c-name GTK_RC_TOKEN_INCLUDE))
  (value (name normal) (c-name GTK_RC_TOKEN_NORMAL))
  (value (name active) (c-name GTK_RC_TOKEN_ACTIVE))
  (value (name prelight) (c-name GTK_RC_TOKEN_PRELIGHT))
  (value (name selected) (c-name GTK_RC_TOKEN_SELECTED))
  (value (name insensitive) (c-name GTK_RC_TOKEN_INSENSITIVE))
  (value (name fg) (c-name GTK_RC_TOKEN_FG))
  (value (name bg) (c-name GTK_RC_TOKEN_BG))
  (value (name text) (c-name GTK_RC_TOKEN_TEXT))
  (value (name base) (c-name GTK_RC_TOKEN_BASE))
  (value (name xthickness) (c-name GTK_RC_TOKEN_XTHICKNESS))
  (value (name ythickness) (c-name GTK_RC_TOKEN_YTHICKNESS))
  (value (name font) (c-name GTK_RC_TOKEN_FONT))
  (value (name fontset) (c-name GTK_RC_TOKEN_FONTSET))
  (value (name font_name) (c-name GTK_RC_TOKEN_FONT_NAME))
  (value (name bg_pixmap) (c-name GTK_RC_TOKEN_BG_PIXMAP))
  (value (name pixmap_path) (c-name GTK_RC_TOKEN_PIXMAP_PATH))
  (value (name style) (c-name GTK_RC_TOKEN_STYLE))
  (value (name binding) (c-name GTK_RC_TOKEN_BINDING))
  (value (name bind) (c-name GTK_RC_TOKEN_BIND))
  (value (name widget) (c-name GTK_RC_TOKEN_WIDGET))
  (value (name widget_class) (c-name GTK_RC_TOKEN_WIDGET_CLASS))
  (value (name class) (c-name GTK_RC_TOKEN_CLASS))
  (value (name lowest) (c-name GTK_RC_TOKEN_LOWEST))
  (value (name gtk) (c-name GTK_RC_TOKEN_GTK))
  (value (name application) (c-name GTK_RC_TOKEN_APPLICATION))
  (value (name theme) (c-name GTK_RC_TOKEN_THEME))
  (value (name rc) (c-name GTK_RC_TOKEN_RC))
  (value (name highest) (c-name GTK_RC_TOKEN_HIGHEST))
  (value (name engine) (c-name GTK_RC_TOKEN_ENGINE))
  (value (name module_path) (c-name GTK_RC_TOKEN_MODULE_PATH))
  (value (name im_module_path) (c-name GTK_RC_TOKEN_IM_MODULE_PATH))
  (value (name im_module_file) (c-name GTK_RC_TOKEN_IM_MODULE_FILE))
  (value (name stock) (c-name GTK_RC_TOKEN_STOCK))
  (value (name ltr) (c-name GTK_RC_TOKEN_LTR))
  (value (name rtl) (c-name GTK_RC_TOKEN_RTL))
  (value (name last) (c-name GTK_RC_TOKEN_LAST))
)

(enum SizeGroupMode
  (in-module gtk)
  (c-name GtkSizeGroupMode)
  (value (name none) (c-name GTK_SIZE_GROUP_NONE))
  (value (name horizontal) (c-name GTK_SIZE_GROUP_HORIZONTAL))
  (value (name vertical) (c-name GTK_SIZE_GROUP_VERTICAL))
  (value (name both) (c-name GTK_SIZE_GROUP_BOTH))
)

(enum SpinButtonUpdatePolicy
  (in-module gtk)
  (c-name GtkSpinButtonUpdatePolicy)
  (value (name always) (c-name GTK_UPDATE_ALWAYS))
  (value (name if_valid) (c-name GTK_UPDATE_IF_VALID))
)

(enum SpinType
  (in-module gtk)
  (c-name GtkSpinType)
  (value (name step_forward) (c-name GTK_SPIN_STEP_FORWARD))
  (value (name step_backward) (c-name GTK_SPIN_STEP_BACKWARD))
  (value (name page_forward) (c-name GTK_SPIN_PAGE_FORWARD))
  (value (name page_backward) (c-name GTK_SPIN_PAGE_BACKWARD))
  (value (name home) (c-name GTK_SPIN_HOME))
  (value (name end) (c-name GTK_SPIN_END))
  (value (name user_defined) (c-name GTK_SPIN_USER_DEFINED))
)

(enum TextSearchFlags
  (in-module gtk)
  (c-name GtkTextSearchFlags)
  (value (name visible_only) (c-name GTK_TEXT_SEARCH_VISIBLE_ONLY))
  (value (name text_only) (c-name GTK_TEXT_SEARCH_TEXT_ONLY))
)

(enum TextWindowType
  (in-module gtk)
  (c-name GtkTextWindowType)
  (value (name private) (c-name GTK_TEXT_WINDOW_PRIVATE))
  (value (name widget) (c-name GTK_TEXT_WINDOW_WIDGET))
  (value (name text) (c-name GTK_TEXT_WINDOW_TEXT))
  (value (name left) (c-name GTK_TEXT_WINDOW_LEFT))
  (value (name right) (c-name GTK_TEXT_WINDOW_RIGHT))
  (value (name top) (c-name GTK_TEXT_WINDOW_TOP))
  (value (name bottom) (c-name GTK_TEXT_WINDOW_BOTTOM))
)

(enum ToolbarChildType
  (in-module gtk)
  (c-name GtkToolbarChildType)
  (value (name space) (c-name GTK_TOOLBAR_CHILD_SPACE))
  (value (name button) (c-name GTK_TOOLBAR_CHILD_BUTTON))
  (value (name togglebutton) (c-name GTK_TOOLBAR_CHILD_TOGGLEBUTTON))
  (value (name radiobutton) (c-name GTK_TOOLBAR_CHILD_RADIOBUTTON))
  (value (name widget) (c-name GTK_TOOLBAR_CHILD_WIDGET))
)

(enum ToolbarSpaceStyle
  (in-module gtk)
  (c-name GtkToolbarSpaceStyle)
  (value (name empty) (c-name GTK_TOOLBAR_SPACE_EMPTY))
  (value (name line) (c-name GTK_TOOLBAR_SPACE_LINE))
)

(enum TreeModelFlags
  (in-module gtk)
  (c-name GtkTreeModelFlags)
  (value (name iters_persist) (c-name GTK_TREE_MODEL_ITERS_PERSIST))
  (value (name list_only) (c-name GTK_TREE_MODEL_LIST_ONLY))
)

(enum TreeViewColumnSizing
  (in-module gtk)
  (c-name GtkTreeViewColumnSizing)
  (value (name grow_only) (c-name GTK_TREE_VIEW_COLUMN_GROW_ONLY))
  (value (name autosize) (c-name GTK_TREE_VIEW_COLUMN_AUTOSIZE))
  (value (name fixed) (c-name GTK_TREE_VIEW_COLUMN_FIXED))
)

(enum TreeViewDropPosition
  (in-module gtk)
  (c-name GtkTreeViewDropPosition)
  (value (name before) (c-name GTK_TREE_VIEW_DROP_BEFORE))
  (value (name after) (c-name GTK_TREE_VIEW_DROP_AFTER))
  (value (name into_or_before) (c-name GTK_TREE_VIEW_DROP_INTO_OR_BEFORE))
  (value (name into_or_after) (c-name GTK_TREE_VIEW_DROP_INTO_OR_AFTER))
)

(enum WidgetFlags
  (in-module gtk)
  (c-name GtkWidgetFlags)
  (value (name toplevel) (c-name GTK_TOPLEVEL))
  (value (name no_window) (c-name GTK_NO_WINDOW))
  (value (name realized) (c-name GTK_REALIZED))
  (value (name mapped) (c-name GTK_MAPPED))
  (value (name visible) (c-name GTK_VISIBLE))
  (value (name sensitive) (c-name GTK_SENSITIVE))
  (value (name parent_sensitive) (c-name GTK_PARENT_SENSITIVE))
  (value (name can_focus) (c-name GTK_CAN_FOCUS))
  (value (name has_focus) (c-name GTK_HAS_FOCUS))
  (value (name can_default) (c-name GTK_CAN_DEFAULT))
  (value (name has_default) (c-name GTK_HAS_DEFAULT))
  (value (name has_grab) (c-name GTK_HAS_GRAB))
  (value (name rc_style) (c-name GTK_RC_STYLE))
  (value (name composite_child) (c-name GTK_COMPOSITE_CHILD))
  (value (name no_reparent) (c-name GTK_NO_REPARENT))
  (value (name app_paintable) (c-name GTK_APP_PAINTABLE))
  (value (name receives_default) (c-name GTK_RECEIVES_DEFAULT))
  (value (name double_buffered) (c-name GTK_DOUBLE_BUFFERED))
)

(enum WidgetHelpType
  (in-module gtk)
  (c-name GtkWidgetHelpType)
  (value (name tooltip) (c-name GTK_WIDGET_HELP_TOOLTIP))
  (value (name whats_this) (c-name GTK_WIDGET_HELP_WHATS_THIS))
)

(function gtk_window_get_type 
  (c-name gtk_window_get_type)
  (return-type GType)
)

(function gtk_window_new 
  (c-name gtk_window_new)
  (is-constructor-of GtkWindow)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkWindowType type))
)

(method set_title 
  (of-object Window (Gtk))
  (c-name gtk_window_set_title)
  (return-type none)
  (parameter (type-and-name const-gchar* title))
)

(method get_title 
  (of-object Window (Gtk))
  (c-name gtk_window_get_title)
  (return-type gchar*)
)

(method set_wmclass 
  (of-object Window (Gtk))
  (c-name gtk_window_set_wmclass)
  (return-type none)
  (parameter (type-and-name const-gchar* wmclass_name))
  (parameter (type-and-name const-gchar* wmclass_class))
)

(method set_role 
  (of-object Window (Gtk))
  (c-name gtk_window_set_role)
  (return-type none)
  (parameter (type-and-name const-gchar* role))
)

(method get_role 
  (of-object Window (Gtk))
  (c-name gtk_window_get_role)
  (return-type gchar*)
)

(method add_accel_group 
  (of-object Window (Gtk))
  (c-name gtk_window_add_accel_group)
  (return-type none)
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method remove_accel_group 
  (of-object Window (Gtk))
  (c-name gtk_window_remove_accel_group)
  (return-type none)
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method set_position 
  (of-object Window (Gtk))
  (c-name gtk_window_set_position)
  (return-type none)
  (parameter (type-and-name GtkWindowPosition position))
)

(method activate_focus 
  (of-object Window (Gtk))
  (c-name gtk_window_activate_focus)
  (return-type gboolean)
)

(method set_focus 
  (of-object Window (Gtk))
  (c-name gtk_window_set_focus)
  (return-type none)
  (parameter (type-and-name GtkWidget* focus))
)

(method get_focus 
  (of-object Window (Gtk))
  (c-name gtk_window_get_focus)
  (return-type GtkWidget*)
)

(method set_default 
  (of-object Window (Gtk))
  (c-name gtk_window_set_default)
  (return-type none)
  (parameter (type-and-name GtkWidget* default_widget))
)

(method activate_default 
  (of-object Window (Gtk))
  (c-name gtk_window_activate_default)
  (return-type gboolean)
)

(method set_transient_for 
  (of-object Window (Gtk))
  (c-name gtk_window_set_transient_for)
  (return-type none)
  (parameter (type-and-name GtkWindow* parent))
)

(method get_transient_for 
  (of-object Window (Gtk))
  (c-name gtk_window_get_transient_for)
  (return-type GtkWindow*)
)

(method set_type_hint 
  (of-object Window (Gtk))
  (c-name gtk_window_set_type_hint)
  (return-type none)
  (parameter (type-and-name GdkWindowTypeHint hint))
)

(method get_type_hint 
  (of-object Window (Gtk))
  (c-name gtk_window_get_type_hint)
  (return-type GdkWindowTypeHint)
)

(method set_skip_taskbar_hint 
  (of-object Window (Gtk))
  (c-name gtk_window_set_skip_taskbar_hint)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_skip_taskbar_hint 
  (of-object Window (Gtk))
  (c-name gtk_window_get_skip_taskbar_hint)
  (return-type gboolean)
)

(method set_skip_pager_hint 
  (of-object Window (Gtk))
  (c-name gtk_window_set_skip_pager_hint)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_skip_pager_hint 
  (of-object Window (Gtk))
  (c-name gtk_window_get_skip_pager_hint)
  (return-type gboolean)
)

(method set_destroy_with_parent 
  (of-object Window (Gtk))
  (c-name gtk_window_set_destroy_with_parent)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_destroy_with_parent 
  (of-object Window (Gtk))
  (c-name gtk_window_get_destroy_with_parent)
  (return-type gboolean)
)

(method set_resizable 
  (of-object Window (Gtk))
  (c-name gtk_window_set_resizable)
  (return-type none)
  (parameter (type-and-name gboolean resizable))
)

(method get_resizable 
  (of-object Window (Gtk))
  (c-name gtk_window_get_resizable)
  (return-type gboolean)
)

(method set_gravity 
  (of-object Window (Gtk))
  (c-name gtk_window_set_gravity)
  (return-type none)
  (parameter (type-and-name GdkGravity gravity))
)

(method get_gravity 
  (of-object Window (Gtk))
  (c-name gtk_window_get_gravity)
  (return-type GdkGravity)
)

(method set_geometry_hints 
  (of-object Window (Gtk))
  (c-name gtk_window_set_geometry_hints)
  (return-type none)
  (parameter (type-and-name GtkWidget* geometry_widget))
  (parameter (type-and-name GdkGeometry* geometry))
  (parameter (type-and-name GdkWindowHints geom_mask))
)

(method set_screen 
  (of-object Window (Gtk))
  (c-name gtk_window_set_screen)
  (return-type none)
  (parameter (type-and-name GdkScreen* screen))
)

(method get_screen 
  (of-object Window (Gtk))
  (c-name gtk_window_get_screen)
  (return-type GdkScreen*)
)

(method set_has_frame 
  (of-object Window (Gtk))
  (c-name gtk_window_set_has_frame)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_has_frame 
  (of-object Window (Gtk))
  (c-name gtk_window_get_has_frame)
  (return-type gboolean)
)

(method set_frame_dimensions 
  (of-object Window (Gtk))
  (c-name gtk_window_set_frame_dimensions)
  (return-type none)
  (parameter (type-and-name gint left))
  (parameter (type-and-name gint top))
  (parameter (type-and-name gint right))
  (parameter (type-and-name gint bottom))
)

(method get_frame_dimensions 
  (of-object Window (Gtk))
  (c-name gtk_window_get_frame_dimensions)
  (return-type none)
  (parameter (type-and-name gint* left))
  (parameter (type-and-name gint* top))
  (parameter (type-and-name gint* right))
  (parameter (type-and-name gint* bottom))
)

(method set_decorated 
  (of-object Window (Gtk))
  (c-name gtk_window_set_decorated)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_decorated 
  (of-object Window (Gtk))
  (c-name gtk_window_get_decorated)
  (return-type gboolean)
)

(method set_icon_list 
  (of-object Window (Gtk))
  (c-name gtk_window_set_icon_list)
  (return-type none)
  (parameter (type-and-name GList* list))
)

(method get_icon_list 
  (of-object Window (Gtk))
  (c-name gtk_window_get_icon_list)
  (return-type GList*)
)

(method set_icon 
  (of-object Window (Gtk))
  (c-name gtk_window_set_icon)
  (return-type none)
  (parameter (type-and-name GdkPixbuf* icon))
)

(method set_icon_from_file 
  (of-object Window (Gtk))
  (c-name gtk_window_set_icon_from_file)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* filename))
  (parameter (type-and-name GError** err))
)

(method get_icon 
  (of-object Window (Gtk))
  (c-name gtk_window_get_icon)
  (return-type GdkPixbuf*)
)

(function gtk_window_set_default_icon_list 
  (c-name gtk_window_set_default_icon_list)
  (return-type none)
  (parameter (type-and-name GList* list))
)

(function gtk_window_get_default_icon_list 
  (c-name gtk_window_get_default_icon_list)
  (return-type GList*)
)

(function gtk_window_set_default_icon_from_file 
  (c-name gtk_window_set_default_icon_from_file)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* filename))
  (parameter (type-and-name GError** err))
)

(function gtk_window_set_auto_startup_notification 
  (c-name gtk_window_set_auto_startup_notification)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method set_modal 
  (of-object Window (Gtk))
  (c-name gtk_window_set_modal)
  (return-type none)
  (parameter (type-and-name gboolean modal))
)

(method get_modal 
  (of-object Window (Gtk))
  (c-name gtk_window_get_modal)
  (return-type gboolean)
)

(function gtk_window_list_toplevels 
  (c-name gtk_window_list_toplevels)
  (return-type GList*)
)

(method add_mnemonic 
  (of-object Window (Gtk))
  (c-name gtk_window_add_mnemonic)
  (return-type none)
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GtkWidget* target))
)

(method remove_mnemonic 
  (of-object Window (Gtk))
  (c-name gtk_window_remove_mnemonic)
  (return-type none)
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GtkWidget* target))
)

(method mnemonic_activate 
  (of-object Window (Gtk))
  (c-name gtk_window_mnemonic_activate)
  (return-type gboolean)
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifier))
)

(method set_mnemonic_modifier 
  (of-object Window (Gtk))
  (c-name gtk_window_set_mnemonic_modifier)
  (return-type none)
  (parameter (type-and-name GdkModifierType modifier))
)

(method get_mnemonic_modifier 
  (of-object Window (Gtk))
  (c-name gtk_window_get_mnemonic_modifier)
  (return-type GdkModifierType)
)

(method present 
  (of-object Window (Gtk))
  (c-name gtk_window_present)
  (return-type none)
)

(method iconify 
  (of-object Window (Gtk))
  (c-name gtk_window_iconify)
  (return-type none)
)

(method deiconify 
  (of-object Window (Gtk))
  (c-name gtk_window_deiconify)
  (return-type none)
)

(method stick 
  (of-object Window (Gtk))
  (c-name gtk_window_stick)
  (return-type none)
)

(method unstick 
  (of-object Window (Gtk))
  (c-name gtk_window_unstick)
  (return-type none)
)

(method maximize 
  (of-object Window (Gtk))
  (c-name gtk_window_maximize)
  (return-type none)
)

(method unmaximize 
  (of-object Window (Gtk))
  (c-name gtk_window_unmaximize)
  (return-type none)
)

(method fullscreen 
  (of-object Window (Gtk))
  (c-name gtk_window_fullscreen)
  (return-type none)
)

(method unfullscreen 
  (of-object Window (Gtk))
  (c-name gtk_window_unfullscreen)
  (return-type none)
)

(method begin_resize_drag 
  (of-object Window (Gtk))
  (c-name gtk_window_begin_resize_drag)
  (return-type none)
  (parameter (type-and-name GdkWindowEdge edge))
  (parameter (type-and-name gint button))
  (parameter (type-and-name gint root_x))
  (parameter (type-and-name gint root_y))
  (parameter (type-and-name guint32 timestamp))
)

(method begin_move_drag 
  (of-object Window (Gtk))
  (c-name gtk_window_begin_move_drag)
  (return-type none)
  (parameter (type-and-name gint button))
  (parameter (type-and-name gint root_x))
  (parameter (type-and-name gint root_y))
  (parameter (type-and-name guint32 timestamp))
)

(method set_policy 
  (of-object Window (Gtk))
  (c-name gtk_window_set_policy)
  (return-type none)
  (parameter (type-and-name gint allow_shrink))
  (parameter (type-and-name gint allow_grow))
  (parameter (type-and-name gint auto_shrink))
)

(method set_default_size 
  (of-object Window (Gtk))
  (c-name gtk_window_set_default_size)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method get_default_size 
  (of-object Window (Gtk))
  (c-name gtk_window_get_default_size)
  (return-type none)
  (parameter (type-and-name gint* width))
  (parameter (type-and-name gint* height))
)

(method resize 
  (of-object Window (Gtk))
  (c-name gtk_window_resize)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method get_size 
  (of-object Window (Gtk))
  (c-name gtk_window_get_size)
  (return-type none)
  (parameter (type-and-name gint* width))
  (parameter (type-and-name gint* height))
)

(method move 
  (of-object Window (Gtk))
  (c-name gtk_window_move)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method get_position 
  (of-object Window (Gtk))
  (c-name gtk_window_get_position)
  (return-type none)
  (parameter (type-and-name gint* root_x))
  (parameter (type-and-name gint* root_y))
)

(method parse_geometry 
  (of-object Window (Gtk))
  (c-name gtk_window_parse_geometry)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* geometry))
)

(method reshow_with_initial_size 
  (of-object Window (Gtk))
  (c-name gtk_window_reshow_with_initial_size)
  (return-type none)
)

(function gtk_window_group_get_type 
  (c-name gtk_window_group_get_type)
  (return-type GType)
)

(function gtk_window_group_new 
  (c-name gtk_window_group_new)
  (is-constructor-of GtkWindowGroup)
  (return-type GtkWindowGroup*)
)

(method add_window 
  (of-object WindowGroup (Gtk))
  (c-name gtk_window_group_add_window)
  (return-type none)
  (parameter (type-and-name GtkWindow* window))
)

(method remove_window 
  (of-object WindowGroup (Gtk))
  (c-name gtk_window_group_remove_window)
  (return-type none)
  (parameter (type-and-name GtkWindow* window))
)

(method remove_embedded_xid 
  (of-object Window (Gtk))
  (c-name gtk_window_remove_embedded_xid)
  (return-type none)
  (parameter (type-and-name guint xid))
)

(method add_embedded_xid 
  (of-object Window (Gtk))
  (c-name gtk_window_add_embedded_xid)
  (return-type none)
  (parameter (type-and-name guint xid))
)

(function gtk_widget_get_type 
  (c-name gtk_widget_get_type)
  (return-type GType)
)

(function gtk_widget_new 
  (c-name gtk_widget_new)
  (is-constructor-of GtkWidget)
  (return-type GtkWidget*)
  (parameter (type-and-name GType type))
  (parameter (type-and-name const-gchar* first_property_name))
;  (varargs t)
)

(method ref 
  (of-object Widget (Gtk))
  (c-name gtk_widget_ref)
  (return-type GtkWidget*)
)

(method unref 
  (of-object Widget (Gtk))
  (c-name gtk_widget_unref)
  (return-type none)
)

(method destroy 
  (of-object Widget (Gtk))
  (c-name gtk_widget_destroy)
  (return-type none)
)

(method destroyed 
  (of-object Widget (Gtk))
  (c-name gtk_widget_destroyed)
  (return-type none)
  (parameter (type-and-name GtkWidget** widget_pointer))
)

(method set 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set)
  (return-type none)
  (parameter (type-and-name const-gchar* first_property_name))
 ; (varargs t)
)

(method unparent 
  (of-object Widget (Gtk))
  (c-name gtk_widget_unparent)
  (return-type none)
)

(method show 
  (of-object Widget (Gtk))
  (c-name gtk_widget_show)
  (return-type none)
)

(method show_now 
  (of-object Widget (Gtk))
  (c-name gtk_widget_show_now)
  (return-type none)
)

(method hide 
  (of-object Widget (Gtk))
  (c-name gtk_widget_hide)
  (return-type none)
)

(method show_all 
  (of-object Widget (Gtk))
  (c-name gtk_widget_show_all)
  (return-type none)
)

(method hide_all 
  (of-object Widget (Gtk))
  (c-name gtk_widget_hide_all)
  (return-type none)
)

(method map 
  (of-object Widget (Gtk))
  (c-name gtk_widget_map)
  (return-type none)
)

(method unmap 
  (of-object Widget (Gtk))
  (c-name gtk_widget_unmap)
  (return-type none)
)

(method realize 
  (of-object Widget (Gtk))
  (c-name gtk_widget_realize)
  (return-type none)
)

(method unrealize 
  (of-object Widget (Gtk))
  (c-name gtk_widget_unrealize)
  (return-type none)
)

(method queue_draw 
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_draw)
  (return-type none)
)

(method queue_draw_area 
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_draw_area)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method queue_clear 
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_clear)
  (return-type none)
)

(method queue_clear_area 
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_clear_area)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method queue_resize 
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_resize)
  (return-type none)
)

(method draw 
  (of-object Widget (Gtk))
  (c-name gtk_widget_draw)
  (return-type none)
  (parameter (type-and-name GdkRectangle* area))
)

(method size_request 
  (of-object Widget (Gtk))
  (c-name gtk_widget_size_request)
  (return-type none)
  (parameter (type-and-name GtkRequisition* requisition))
)

(method size_allocate 
  (of-object Widget (Gtk))
  (c-name gtk_widget_size_allocate)
  (return-type none)
  (parameter (type-and-name GtkAllocation* allocation))
)

(method get_child_requisition 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_child_requisition)
  (return-type none)
  (parameter (type-and-name GtkRequisition* requisition))
)

(method add_accelerator 
  (of-object Widget (Gtk))
  (c-name gtk_widget_add_accelerator)
  (return-type none)
  (parameter (type-and-name const-gchar* accel_signal))
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
  (parameter (type-and-name GtkAccelFlags accel_flags))
)

(method remove_accelerator 
  (of-object Widget (Gtk))
  (c-name gtk_widget_remove_accelerator)
  (return-type gboolean)
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(method set_accel_path 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_accel_path)
  (return-type none)
  (parameter (type-and-name const-gchar* accel_path))
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method list_accel_closures 
  (of-object Widget (Gtk))
  (c-name gtk_widget_list_accel_closures)
  (return-type GList*)
)

(method mnemonic_activate 
  (of-object Widget (Gtk))
  (c-name gtk_widget_mnemonic_activate)
  (return-type gboolean)
  (parameter (type-and-name gboolean group_cycling))
)

(method event 
  (of-object Widget (Gtk))
  (c-name gtk_widget_event)
  (return-type gboolean)
  (parameter (type-and-name GdkEvent* event))
)

(method send_expose 
  (of-object Widget (Gtk))
  (c-name gtk_widget_send_expose)
  (return-type gint)
  (parameter (type-and-name GdkEvent* event))
)

(method activate 
  (of-object Widget (Gtk))
  (c-name gtk_widget_activate)
  (return-type gboolean)
)

(method set_scroll_adjustments 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_scroll_adjustments)
  (return-type gboolean)
  (parameter (type-and-name GtkAdjustment* hadjustment))
  (parameter (type-and-name GtkAdjustment* vadjustment))
)

(method reparent 
  (of-object Widget (Gtk))
  (c-name gtk_widget_reparent)
  (return-type none)
  (parameter (type-and-name GtkWidget* new_parent))
)

(method intersect 
  (of-object Widget (Gtk))
  (c-name gtk_widget_intersect)
  (return-type gboolean)
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GdkRectangle* intersection))
)

(method region_intersect 
  (of-object Widget (Gtk))
  (c-name gtk_widget_region_intersect)
  (return-type GdkRegion*)
  (parameter (type-and-name GdkRegion* region))
)

(method freeze_child_notify 
  (of-object Widget (Gtk))
  (c-name gtk_widget_freeze_child_notify)
  (return-type none)
)

(method child_notify 
  (of-object Widget (Gtk))
  (c-name gtk_widget_child_notify)
  (return-type none)
  (parameter (type-and-name const-gchar* child_property))
)

(method thaw_child_notify 
  (of-object Widget (Gtk))
  (c-name gtk_widget_thaw_child_notify)
  (return-type none)
)

(method is_focus 
  (of-object Widget (Gtk))
  (c-name gtk_widget_is_focus)
  (return-type gboolean)
)

(method grab_focus 
  (of-object Widget (Gtk))
  (c-name gtk_widget_grab_focus)
  (return-type none)
)

(method grab_default 
  (of-object Widget (Gtk))
  (c-name gtk_widget_grab_default)
  (return-type none)
)

(method set_name 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
)

(method get_name 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_name)
  (return-type gchar*)
)

(method set_state 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_state)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
)

(method set_sensitive 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_sensitive)
  (return-type none)
  (parameter (type-and-name gboolean sensitive))
)

(method set_app_paintable 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_app_paintable)
  (return-type none)
  (parameter (type-and-name gboolean app_paintable))
)

(method set_double_buffered 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_double_buffered)
  (return-type none)
  (parameter (type-and-name gboolean double_buffered))
)

(method set_redraw_on_allocate 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_redraw_on_allocate)
  (return-type none)
  (parameter (type-and-name gboolean redraw_on_allocate))
)

(method set_parent 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_parent)
  (return-type none)
  (parameter (type-and-name GtkWidget* parent))
)

(method set_parent_window 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_parent_window)
  (return-type none)
  (parameter (type-and-name GdkWindow* parent_window))
)

(method set_child_visible 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_child_visible)
  (return-type none)
  (parameter (type-and-name gboolean is_visible))
)

(method get_child_visible 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_child_visible)
  (return-type gboolean)
)

(method get_parent 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_parent)
  (return-type GtkWidget*)
)

(method get_parent_window 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_parent_window)
  (return-type GdkWindow*)
)

(method child_focus 
  (of-object Widget (Gtk))
  (c-name gtk_widget_child_focus)
  (return-type gboolean)
  (parameter (type-and-name GtkDirectionType direction))
)

(method set_size_request 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_size_request)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method get_size_request 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_size_request)
  (return-type none)
  (parameter (type-and-name gint* width))
  (parameter (type-and-name gint* height))
)

(method set_uposition 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_uposition)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method set_usize 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_usize)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method set_events 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_events)
  (return-type none)
  (parameter (type-and-name gint events))
)

(method add_events 
  (of-object Widget (Gtk))
  (c-name gtk_widget_add_events)
  (return-type none)
  (parameter (type-and-name gint events))
)

(method set_extension_events 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_extension_events)
  (return-type none)
  (parameter (type-and-name GdkExtensionMode mode))
)

(method get_extension_events 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_extension_events)
  (return-type GdkExtensionMode)
)

(method get_toplevel 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_toplevel)
  (return-type GtkWidget*)
)

(method get_ancestor 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_ancestor)
  (return-type GtkWidget*)
  (parameter (type-and-name GType widget_type))
)

(method get_colormap 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_colormap)
  (return-type GdkColormap*)
)

(method get_visual 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_visual)
  (return-type GdkVisual*)
)

(method get_screen 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_screen)
  (return-type GdkScreen*)
)

(method has_screen 
  (of-object Widget (Gtk))
  (c-name gtk_widget_has_screen)
  (return-type gboolean)
)

(method get_display 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_display)
  (return-type GdkDisplay*)
)

(method get_root_window 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_root_window)
  (return-type GdkWindow*)
)

(method get_settings 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_settings)
  (return-type GtkSettings*)
)

(method get_clipboard 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_clipboard)
  (return-type GtkClipboard*)
  (parameter (type-and-name GdkAtom selection))
)

(method get_accessible 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_accessible)
  (return-type AtkObject*)
)

(method set_colormap 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_colormap)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
)

(method get_events 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_events)
  (return-type gint)
)

(method get_pointer 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_pointer)
  (return-type none)
  (parameter (type-and-name gint* x))
  (parameter (type-and-name gint* y))
)

(method is_ancestor 
  (of-object Widget (Gtk))
  (c-name gtk_widget_is_ancestor)
  (return-type gboolean)
  (parameter (type-and-name GtkWidget* ancestor))
)

(method translate_coordinates 
  (of-object Widget (Gtk))
  (c-name gtk_widget_translate_coordinates)
  (return-type gboolean)
  (parameter (type-and-name GtkWidget* dest_widget))
  (parameter (type-and-name gint src_x))
  (parameter (type-and-name gint src_y))
  (parameter (type-and-name gint* dest_x))
  (parameter (type-and-name gint* dest_y))
)

(method hide_on_delete 
  (of-object Widget (Gtk))
  (c-name gtk_widget_hide_on_delete)
  (return-type gboolean)
)

(method set_style 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_style)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
)

(method ensure_style 
  (of-object Widget (Gtk))
  (c-name gtk_widget_ensure_style)
  (return-type none)
)

(method get_style 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_style)
  (return-type GtkStyle*)
)

(method modify_style 
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* style))
)

(method get_modifier_style 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_modifier_style)
  (return-type GtkRcStyle*)
)

(method modify_fg 
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_fg)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
  (parameter (type-and-name GdkColor* color))
)

(method modify_bg 
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_bg)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
  (parameter (type-and-name GdkColor* color))
)

(method modify_text 
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_text)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
  (parameter (type-and-name GdkColor* color))
)

(method modify_base 
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_base)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
  (parameter (type-and-name GdkColor* color))
)

(method modify_font 
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_font)
  (return-type none)
  (parameter (type-and-name PangoFontDescription* font_desc))
)

(method create_pango_context 
  (of-object Widget (Gtk))
  (c-name gtk_widget_create_pango_context)
  (return-type PangoContext*)
)

(method get_pango_context 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_pango_context)
  (return-type PangoContext*)
)

(method create_pango_layout 
  (of-object Widget (Gtk))
  (c-name gtk_widget_create_pango_layout)
  (return-type PangoLayout*)
  (parameter (type-and-name const-gchar* text))
)

(method render_icon 
  (of-object Widget (Gtk))
  (c-name gtk_widget_render_icon)
  (return-type GdkPixbuf*)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name GtkIconSize size))
  (parameter (type-and-name const-gchar* detail))
)

(method set_composite_name 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_composite_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
)

(method get_composite_name 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_composite_name)
  (return-type gchar*)
)

(method reset_rc_styles 
  (of-object Widget (Gtk))
  (c-name gtk_widget_reset_rc_styles)
  (return-type none)
)

(function gtk_widget_push_colormap 
  (c-name gtk_widget_push_colormap)
  (return-type none)
  (parameter (type-and-name GdkColormap* cmap))
)

(function gtk_widget_push_composite_child 
  (c-name gtk_widget_push_composite_child)
  (return-type none)
)

(function gtk_widget_pop_composite_child 
  (c-name gtk_widget_pop_composite_child)
  (return-type none)
)

(function gtk_widget_pop_colormap 
  (c-name gtk_widget_pop_colormap)
  (return-type none)
)

(method style_get_property 
  (of-object Widget (Gtk))
  (c-name gtk_widget_style_get_property)
  (return-type none)
  (parameter (type-and-name const-gchar* property_name))
  (parameter (type-and-name GValue* value))
)

(method style_get_valist 
  (of-object Widget (Gtk))
  (c-name gtk_widget_style_get_valist)
  (return-type none)
  (parameter (type-and-name const-gchar* first_property_name))
  (parameter (type-and-name va_list var_args))
)

(method style_get 
  (of-object Widget (Gtk))
  (c-name gtk_widget_style_get)
  (return-type none)
  (parameter (type-and-name const-gchar* first_property_name))
 ; (varargs t)
)

(function gtk_widget_set_default_colormap 
  (c-name gtk_widget_set_default_colormap)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
)

(function gtk_widget_get_default_style 
  (c-name gtk_widget_get_default_style)
  (return-type GtkStyle*)
)

(function gtk_widget_get_default_colormap 
  (c-name gtk_widget_get_default_colormap)
  (return-type GdkColormap*)
)

(function gtk_widget_get_default_visual 
  (c-name gtk_widget_get_default_visual)
  (return-type GdkVisual*)
)

(method set_direction 
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_direction)
  (return-type none)
  (parameter (type-and-name GtkTextDirection dir))
)

(method get_direction 
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_direction)
  (return-type GtkTextDirection)
)

(function gtk_widget_set_default_direction 
  (c-name gtk_widget_set_default_direction)
  (return-type none)
  (parameter (type-and-name GtkTextDirection dir))
)

(function gtk_widget_get_default_direction 
  (c-name gtk_widget_get_default_direction)
  (return-type GtkTextDirection)
)

(method shape_combine_mask 
  (of-object Widget (Gtk))
  (c-name gtk_widget_shape_combine_mask)
  (return-type none)
  (parameter (type-and-name GdkBitmap* shape_mask))
  (parameter (type-and-name gint offset_x))
  (parameter (type-and-name gint offset_y))
)

(method reset_shapes 
  (of-object Widget (Gtk))
  (c-name gtk_widget_reset_shapes)
  (return-type none)
)

(method path 
  (of-object Widget (Gtk))
  (c-name gtk_widget_path)
  (return-type none)
  (parameter (type-and-name guint* path_length))
  (parameter (type-and-name gchar** path))
  (parameter (type-and-name gchar** path_reversed))
)

(method class_path 
  (of-object Widget (Gtk))
  (c-name gtk_widget_class_path)
  (return-type none)
  (parameter (type-and-name guint* path_length))
  (parameter (type-and-name gchar** path))
  (parameter (type-and-name gchar** path_reversed))
)

(function gtk_requisition_get_type 
  (c-name gtk_requisition_get_type)
  (return-type GType)
)

(function gtk_requisition_copy 
  (c-name gtk_requisition_copy)
  (return-type GtkRequisition*)
  (parameter (type-and-name const-GtkRequisition* requisition))
)

(function gtk_vseparator_get_type 
  (c-name gtk_vseparator_get_type)
  (return-type GType)
)

(function gtk_vseparator_new 
  (c-name gtk_vseparator_new)
  (is-constructor-of GtkVSeparator)
  (return-type GtkWidget*)
)

(function gtk_vscrollbar_get_type 
  (c-name gtk_vscrollbar_get_type)
  (return-type GType)
)

(function gtk_vscrollbar_new 
  (c-name gtk_vscrollbar_new)
  (is-constructor-of GtkVScrollbar)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(function gtk_vscale_get_type 
  (c-name gtk_vscale_get_type)
  (return-type GType)
)

(function gtk_vscale_new 
  (c-name gtk_vscale_new)
  (is-constructor-of GtkVScale)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(function gtk_vscale_new_with_range 
  (c-name gtk_vscale_new_with_range)
  (is-constructor-of GtkVScale)
  (return-type GtkWidget*)
  (parameter (type-and-name gdouble min))
  (parameter (type-and-name gdouble max))
  (parameter (type-and-name gdouble step))
)

(function gtk_vruler_get_type 
  (c-name gtk_vruler_get_type)
  (return-type GType)
)

(function gtk_vruler_new 
  (c-name gtk_vruler_new)
  (is-constructor-of GtkVRuler)
  (return-type GtkWidget*)
)

(function gtk_vpaned_get_type 
  (c-name gtk_vpaned_get_type)
  (return-type GType)
)

(function gtk_vpaned_new 
  (c-name gtk_vpaned_new)
  (is-constructor-of GtkVPaned)
  (return-type GtkWidget*)
)

(function gtk_viewport_get_type 
  (c-name gtk_viewport_get_type)
  (return-type GType)
)

(function gtk_viewport_new 
  (c-name gtk_viewport_new)
  (is-constructor-of GtkViewport)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* hadjustment))
  (parameter (type-and-name GtkAdjustment* vadjustment))
)

(method get_hadjustment 
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment 
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_hadjustment 
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_vadjustment 
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_shadow_type 
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)

(method get_shadow_type 
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_get_shadow_type)
  (return-type GtkShadowType)
)

(function gtk_vbox_get_type 
  (c-name gtk_vbox_get_type)
  (return-type GType)
)

(function gtk_vbox_new 
  (c-name gtk_vbox_new)
  (is-constructor-of GtkVBox)
  (return-type GtkWidget*)
  (parameter (type-and-name gboolean homogeneous))
  (parameter (type-and-name gint spacing))
)

(function gtk_vbutton_box_get_type 
  (c-name gtk_vbutton_box_get_type)
  (return-type GType)
)

(function gtk_vbutton_box_new 
  (c-name gtk_vbutton_box_new)
  (is-constructor-of GtkVButtonBox)
  (return-type GtkWidget*)
)

(function gtk_vbutton_box_get_spacing_default 
  (c-name gtk_vbutton_box_get_spacing_default)
  (return-type gint)
)

(function gtk_vbutton_box_set_spacing_default 
  (c-name gtk_vbutton_box_set_spacing_default)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(function gtk_vbutton_box_get_layout_default 
  (c-name gtk_vbutton_box_get_layout_default)
  (return-type GtkButtonBoxStyle)
)

(function gtk_vbutton_box_set_layout_default 
  (c-name gtk_vbutton_box_set_layout_default)
  (return-type none)
  (parameter (type-and-name GtkButtonBoxStyle layout))
)

(function gtk_identifier_get_type 
  (c-name gtk_identifier_get_type)
  (return-type GType)
)

(function gtk_type_init 
  (c-name gtk_type_init)
  (return-type none)
  (parameter (type-and-name GTypeDebugFlags debug_flags))
)

(function gtk_accel_flags_get_type 
  (c-name gtk_accel_flags_get_type)
  (return-type GType)
)

(function gtk_calendar_display_options_get_type 
  (c-name gtk_calendar_display_options_get_type)
  (return-type GType)
)

(function gtk_cell_type_get_type 
  (c-name gtk_cell_type_get_type)
  (return-type GType)
)

(function gtk_clist_drag_pos_get_type 
  (c-name gtk_clist_drag_pos_get_type)
  (return-type GType)
)

(function gtk_button_action_get_type 
  (c-name gtk_button_action_get_type)
  (return-type GType)
)

(function gtk_ctree_pos_get_type 
  (c-name gtk_ctree_pos_get_type)
  (return-type GType)
)

(function gtk_ctree_line_style_get_type 
  (c-name gtk_ctree_line_style_get_type)
  (return-type GType)
)

(function gtk_ctree_expander_style_get_type 
  (c-name gtk_ctree_expander_style_get_type)
  (return-type GType)
)

(function gtk_ctree_expansion_type_get_type 
  (c-name gtk_ctree_expansion_type_get_type)
  (return-type GType)
)

(function gtk_cell_renderer_state_get_type 
  (c-name gtk_cell_renderer_state_get_type)
  (return-type GType)
)

(function gtk_cell_renderer_mode_get_type 
  (c-name gtk_cell_renderer_mode_get_type)
  (return-type GType)
)

(function gtk_debug_flag_get_type 
  (c-name gtk_debug_flag_get_type)
  (return-type GType)
)

(function gtk_dialog_flags_get_type 
  (c-name gtk_dialog_flags_get_type)
  (return-type GType)
)

(function gtk_response_type_get_type 
  (c-name gtk_response_type_get_type)
  (return-type GType)
)

(function gtk_dest_defaults_get_type 
  (c-name gtk_dest_defaults_get_type)
  (return-type GType)
)

(function gtk_target_flags_get_type 
  (c-name gtk_target_flags_get_type)
  (return-type GType)
)

(function gtk_anchor_type_get_type 
  (c-name gtk_anchor_type_get_type)
  (return-type GType)
)

(function gtk_arrow_type_get_type 
  (c-name gtk_arrow_type_get_type)
  (return-type GType)
)

(function gtk_attach_options_get_type 
  (c-name gtk_attach_options_get_type)
  (return-type GType)
)

(function gtk_button_box_style_get_type 
  (c-name gtk_button_box_style_get_type)
  (return-type GType)
)

(function gtk_curve_type_get_type 
  (c-name gtk_curve_type_get_type)
  (return-type GType)
)

(function gtk_delete_type_get_type 
  (c-name gtk_delete_type_get_type)
  (return-type GType)
)

(function gtk_direction_type_get_type 
  (c-name gtk_direction_type_get_type)
  (return-type GType)
)

(function gtk_expander_style_get_type 
  (c-name gtk_expander_style_get_type)
  (return-type GType)
)

(function gtk_icon_size_get_type 
  (c-name gtk_icon_size_get_type)
  (return-type GType)
)

(function gtk_side_type_get_type 
  (c-name gtk_side_type_get_type)
  (return-type GType)
)

(function gtk_text_direction_get_type 
  (c-name gtk_text_direction_get_type)
  (return-type GType)
)

(function gtk_justification_get_type 
  (c-name gtk_justification_get_type)
  (return-type GType)
)

(function gtk_match_type_get_type 
  (c-name gtk_match_type_get_type)
  (return-type GType)
)

(function gtk_menu_direction_type_get_type 
  (c-name gtk_menu_direction_type_get_type)
  (return-type GType)
)

(function gtk_metric_type_get_type 
  (c-name gtk_metric_type_get_type)
  (return-type GType)
)

(function gtk_movement_step_get_type 
  (c-name gtk_movement_step_get_type)
  (return-type GType)
)

(function gtk_orientation_get_type 
  (c-name gtk_orientation_get_type)
  (return-type GType)
)

(function gtk_corner_type_get_type 
  (c-name gtk_corner_type_get_type)
  (return-type GType)
)

(function gtk_pack_type_get_type 
  (c-name gtk_pack_type_get_type)
  (return-type GType)
)

(function gtk_path_priority_type_get_type 
  (c-name gtk_path_priority_type_get_type)
  (return-type GType)
)

(function gtk_path_type_get_type 
  (c-name gtk_path_type_get_type)
  (return-type GType)
)

(function gtk_policy_type_get_type 
  (c-name gtk_policy_type_get_type)
  (return-type GType)
)

(function gtk_position_type_get_type 
  (c-name gtk_position_type_get_type)
  (return-type GType)
)

(function gtk_preview_type_get_type 
  (c-name gtk_preview_type_get_type)
  (return-type GType)
)

(function gtk_relief_style_get_type 
  (c-name gtk_relief_style_get_type)
  (return-type GType)
)

(function gtk_resize_mode_get_type 
  (c-name gtk_resize_mode_get_type)
  (return-type GType)
)

(function gtk_signal_run_type_get_type 
  (c-name gtk_signal_run_type_get_type)
  (return-type GType)
)

(function gtk_scroll_type_get_type 
  (c-name gtk_scroll_type_get_type)
  (return-type GType)
)

(function gtk_selection_mode_get_type 
  (c-name gtk_selection_mode_get_type)
  (return-type GType)
)

(function gtk_shadow_type_get_type 
  (c-name gtk_shadow_type_get_type)
  (return-type GType)
)

(function gtk_state_type_get_type 
  (c-name gtk_state_type_get_type)
  (return-type GType)
)

(function gtk_submenu_direction_get_type 
  (c-name gtk_submenu_direction_get_type)
  (return-type GType)
)

(function gtk_submenu_placement_get_type 
  (c-name gtk_submenu_placement_get_type)
  (return-type GType)
)

(function gtk_toolbar_style_get_type 
  (c-name gtk_toolbar_style_get_type)
  (return-type GType)
)

(function gtk_update_type_get_type 
  (c-name gtk_update_type_get_type)
  (return-type GType)
)

(function gtk_visibility_get_type 
  (c-name gtk_visibility_get_type)
  (return-type GType)
)

(function gtk_window_position_get_type 
  (c-name gtk_window_position_get_type)
  (return-type GType)
)

(function gtk_window_type_get_type 
  (c-name gtk_window_type_get_type)
  (return-type GType)
)

(function gtk_wrap_mode_get_type 
  (c-name gtk_wrap_mode_get_type)
  (return-type GType)
)

(function gtk_sort_type_get_type 
  (c-name gtk_sort_type_get_type)
  (return-type GType)
)

(function gtk_im_preedit_style_get_type 
  (c-name gtk_im_preedit_style_get_type)
  (return-type GType)
)

(function gtk_im_status_style_get_type 
  (c-name gtk_im_status_style_get_type)
  (return-type GType)
)

(function gtk_image_type_get_type 
  (c-name gtk_image_type_get_type)
  (return-type GType)
)

(function gtk_message_type_get_type 
  (c-name gtk_message_type_get_type)
  (return-type GType)
)

(function gtk_buttons_type_get_type 
  (c-name gtk_buttons_type_get_type)
  (return-type GType)
)

(function gtk_notebook_tab_get_type 
  (c-name gtk_notebook_tab_get_type)
  (return-type GType)
)

(function gtk_object_flags_get_type 
  (c-name gtk_object_flags_get_type)
  (return-type GType)
)

(function gtk_arg_flags_get_type 
  (c-name gtk_arg_flags_get_type)
  (return-type GType)
)

(function gtk_private_flags_get_type 
  (c-name gtk_private_flags_get_type)
  (return-type GType)
)

(function gtk_progress_bar_style_get_type 
  (c-name gtk_progress_bar_style_get_type)
  (return-type GType)
)

(function gtk_progress_bar_orientation_get_type 
  (c-name gtk_progress_bar_orientation_get_type)
  (return-type GType)
)

(function gtk_rc_flags_get_type 
  (c-name gtk_rc_flags_get_type)
  (return-type GType)
)

(function gtk_rc_token_type_get_type 
  (c-name gtk_rc_token_type_get_type)
  (return-type GType)
)

(function gtk_size_group_mode_get_type 
  (c-name gtk_size_group_mode_get_type)
  (return-type GType)
)

(function gtk_spin_button_update_policy_get_type 
  (c-name gtk_spin_button_update_policy_get_type)
  (return-type GType)
)

(function gtk_spin_type_get_type 
  (c-name gtk_spin_type_get_type)
  (return-type GType)
)

(function gtk_text_search_flags_get_type 
  (c-name gtk_text_search_flags_get_type)
  (return-type GType)
)

(function gtk_text_window_type_get_type 
  (c-name gtk_text_window_type_get_type)
  (return-type GType)
)

(function gtk_toolbar_child_type_get_type 
  (c-name gtk_toolbar_child_type_get_type)
  (return-type GType)
)

(function gtk_toolbar_space_style_get_type 
  (c-name gtk_toolbar_space_style_get_type)
  (return-type GType)
)

(function gtk_tree_view_mode_get_type 
  (c-name gtk_tree_view_mode_get_type)
  (return-type GType)
)

(function gtk_tree_model_flags_get_type 
  (c-name gtk_tree_model_flags_get_type)
  (return-type GType)
)

(function gtk_tree_view_drop_position_get_type 
  (c-name gtk_tree_view_drop_position_get_type)
  (return-type GType)
)

(function gtk_tree_view_column_sizing_get_type 
  (c-name gtk_tree_view_column_sizing_get_type)
  (return-type GType)
)

(function gtk_widget_flags_get_type 
  (c-name gtk_widget_flags_get_type)
  (return-type GType)
)

(function gtk_widget_help_type_get_type 
  (c-name gtk_widget_help_type_get_type)
  (return-type GType)
)

(function gtk_tree_view_get_type 
  (c-name gtk_tree_view_get_type)
  (return-type GType)
)

(function gtk_tree_view_new 
  (c-name gtk_tree_view_new)
  (is-constructor-of GtkTreeView)
  (return-type GtkWidget*)
)

(function gtk_tree_view_new_with_model 
  (c-name gtk_tree_view_new_with_model)
  (is-constructor-of GtkTreeView)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkTreeModel* model))
)

(method get_model 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_model)
  (return-type GtkTreeModel*)
)

(method set_model 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_model)
  (return-type none)
  (parameter (type-and-name GtkTreeModel* model))
)

(method get_selection 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_selection)
  (return-type GtkTreeSelection*)
)

(method get_hadjustment 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method set_hadjustment 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_vadjustment 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_vadjustment 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_headers_visible 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_headers_visible)
  (return-type gboolean)
)

(method set_headers_visible 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_headers_visible)
  (return-type none)
  (parameter (type-and-name gboolean headers_visible))
)

(method columns_autosize 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_columns_autosize)
  (return-type none)
)

(method set_headers_clickable 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_headers_clickable)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method set_rules_hint 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_rules_hint)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_rules_hint 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_rules_hint)
  (return-type gboolean)
)

(method append_column 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_append_column)
  (return-type gint)
  (parameter (type-and-name GtkTreeViewColumn* column))
)

(method remove_column 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_remove_column)
  (return-type gint)
  (parameter (type-and-name GtkTreeViewColumn* column))
)

(method insert_column 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_insert_column)
  (return-type gint)
  (parameter (type-and-name GtkTreeViewColumn* column))
  (parameter (type-and-name gint position))
)

(method insert_column_with_attributes 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_insert_column_with_attributes)
  (return-type gint)
  (parameter (type-and-name gint position))
  (parameter (type-and-name const-gchar* title))
  (parameter (type-and-name GtkCellRenderer* cell))
 ; (varargs t)
)

(method insert_column_with_data_func 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_insert_column_with_data_func)
  (return-type gint)
  (parameter (type-and-name gint position))
  (parameter (type-and-name const-gchar* title))
  (parameter (type-and-name GtkCellRenderer* cell))
  (parameter (type-and-name GtkTreeCellDataFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GDestroyNotify dnotify))
)

(method get_column 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_column)
  (return-type GtkTreeViewColumn*)
  (parameter (type-and-name gint n))
)

(method get_columns 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_columns)
  (return-type GList*)
)

(method move_column_after 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_move_column_after)
  (return-type none)
  (parameter (type-and-name GtkTreeViewColumn* column))
  (parameter (type-and-name GtkTreeViewColumn* base_column))
)

(method set_expander_column 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_expander_column)
  (return-type none)
  (parameter (type-and-name GtkTreeViewColumn* column))
)

(method get_expander_column 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_expander_column)
  (return-type GtkTreeViewColumn*)
)

(method set_column_drag_function 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_column_drag_function)
  (return-type none)
  (parameter (type-and-name GtkTreeViewColumnDropFunc func))
  (parameter (type-and-name gpointer user_data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method scroll_to_point 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_scroll_to_point)
  (return-type none)
  (parameter (type-and-name gint tree_x))
  (parameter (type-and-name gint tree_y))
)

(method scroll_to_cell 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_scroll_to_cell)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewColumn* column))
  (parameter (type-and-name gboolean use_align))
  (parameter (type-and-name gfloat row_align))
  (parameter (type-and-name gfloat col_align))
)

(method row_activated 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_row_activated)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewColumn* column))
)

(method expand_all 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_expand_all)
  (return-type none)
)

(method collapse_all 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_collapse_all)
  (return-type none)
)

(method expand_to_path 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_expand_to_path)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
)

(method expand_row 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_expand_row)
  (return-type gboolean)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name gboolean open_all))
)

(method collapse_row 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_collapse_row)
  (return-type gboolean)
  (parameter (type-and-name GtkTreePath* path))
)

(method map_expanded_rows 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_map_expanded_rows)
  (return-type none)
  (parameter (type-and-name GtkTreeViewMappingFunc func))
  (parameter (type-and-name gpointer data))
)

(method row_expanded 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_row_expanded)
  (return-type gboolean)
  (parameter (type-and-name GtkTreePath* path))
)

(method set_reorderable 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_reorderable)
  (return-type none)
  (parameter (type-and-name gboolean reorderable))
)

(method get_reorderable 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_reorderable)
  (return-type gboolean)
)

(method set_cursor 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_cursor)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewColumn* focus_column))
  (parameter (type-and-name gboolean start_editing))
)

(method set_cursor_on_cell 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_cursor_on_cell)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewColumn* focus_column))
  (parameter (type-and-name GtkCellRenderer* focus_cell))
  (parameter (type-and-name gboolean start_editing))
)

(method get_cursor 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_cursor)
  (return-type none)
  (parameter (type-and-name GtkTreePath** path))
  (parameter (type-and-name GtkTreeViewColumn** focus_column))
)

(method get_bin_window 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_bin_window)
  (return-type GdkWindow*)
)

(method get_path_at_pos 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_path_at_pos)
  (return-type gboolean)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name GtkTreePath** path))
  (parameter (type-and-name GtkTreeViewColumn** column))
  (parameter (type-and-name gint* cell_x))
  (parameter (type-and-name gint* cell_y))
)

(method get_cell_area 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_cell_area)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewColumn* column))
  (parameter (type-and-name GdkRectangle* rect))
)

(method get_background_area 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_background_area)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewColumn* column))
  (parameter (type-and-name GdkRectangle* rect))
)

(method get_visible_rect 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_visible_rect)
  (return-type none)
  (parameter (type-and-name GdkRectangle* visible_rect))
)

(method widget_to_tree_coords 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_widget_to_tree_coords)
  (return-type none)
  (parameter (type-and-name gint wx))
  (parameter (type-and-name gint wy))
  (parameter (type-and-name gint* tx))
  (parameter (type-and-name gint* ty))
)

(method tree_to_widget_coords 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_tree_to_widget_coords)
  (return-type none)
  (parameter (type-and-name gint tx))
  (parameter (type-and-name gint ty))
  (parameter (type-and-name gint* wx))
  (parameter (type-and-name gint* wy))
)

(method enable_model_drag_source 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_enable_model_drag_source)
  (return-type none)
  (parameter (type-and-name GdkModifierType start_button_mask))
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name gint n_targets))
  (parameter (type-and-name GdkDragAction actions))
)

(method enable_model_drag_dest 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_enable_model_drag_dest)
  (return-type none)
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name gint n_targets))
  (parameter (type-and-name GdkDragAction actions))
)

(method unset_rows_drag_source 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_unset_rows_drag_source)
  (return-type none)
)

(method unset_rows_drag_dest 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_unset_rows_drag_dest)
  (return-type none)
)

(method set_drag_dest_row 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_drag_dest_row)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewDropPosition pos))
)

(method get_drag_dest_row 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_drag_dest_row)
  (return-type none)
  (parameter (type-and-name GtkTreePath** path))
  (parameter (type-and-name GtkTreeViewDropPosition* pos))
)

(method get_dest_row_at_pos 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_dest_row_at_pos)
  (return-type gboolean)
  (parameter (type-and-name gint drag_x))
  (parameter (type-and-name gint drag_y))
  (parameter (type-and-name GtkTreePath** path))
  (parameter (type-and-name GtkTreeViewDropPosition* pos))
)

(method create_row_drag_icon 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_create_row_drag_icon)
  (return-type GdkPixmap*)
  (parameter (type-and-name GtkTreePath* path))
)

(method set_enable_search 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_enable_search)
  (return-type none)
  (parameter (type-and-name gboolean enable_search))
)

(method get_enable_search 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_enable_search)
  (return-type gboolean)
)

(method get_search_column 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_search_column)
  (return-type gint)
)

(method set_search_column 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_search_column)
  (return-type none)
  (parameter (type-and-name gint column))
)

(method get_search_equal_func 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_search_equal_func)
  (return-type GtkTreeViewSearchEqualFunc)
)

(method set_search_equal_func 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_search_equal_func)
  (return-type none)
  (parameter (type-and-name GtkTreeViewSearchEqualFunc search_equal_func))
  (parameter (type-and-name gpointer search_user_data))
  (parameter (type-and-name GtkDestroyNotify search_destroy))
)

(method set_destroy_count_func 
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_destroy_count_func)
  (return-type none)
  (parameter (type-and-name GtkTreeDestroyCountFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function gtk_tree_view_column_get_type 
  (c-name gtk_tree_view_column_get_type)
  (return-type GType)
)

(function gtk_tree_view_column_new 
  (c-name gtk_tree_view_column_new)
  (is-constructor-of GtkTreeViewColumn)
  (return-type GtkTreeViewColumn*)
)

(function gtk_tree_view_column_new_with_attributes 
  (c-name gtk_tree_view_column_new_with_attributes)
  (is-constructor-of GtkTreeViewColumn)
  (return-type GtkTreeViewColumn*)
  (parameter (type-and-name const-gchar* title))
  (parameter (type-and-name GtkCellRenderer* cell))
;  (varargs t)
)

(method n_pack_start 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_pack_start)
  (return-type none)
  (parameter (type-and-name GtkCellRenderer* cell))
  (parameter (type-and-name gboolean expand))
)

(method n_pack_end 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_pack_end)
  (return-type none)
  (parameter (type-and-name GtkCellRenderer* cell))
  (parameter (type-and-name gboolean expand))
)

(method n_clear 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_clear)
  (return-type none)
)

(method n_get_cell_renderers 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_cell_renderers)
  (return-type GList*)
)

(method n_add_attribute 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_add_attribute)
  (return-type none)
  (parameter (type-and-name GtkCellRenderer* cell_renderer))
  (parameter (type-and-name const-gchar* attribute))
  (parameter (type-and-name gint column))
)

(method n_set_attributes 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_attributes)
  (return-type none)
  (parameter (type-and-name GtkCellRenderer* cell_renderer))
 ; (varargs t)
)

(method n_set_cell_data_func 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_cell_data_func)
  (return-type none)
  (parameter (type-and-name GtkCellRenderer* cell_renderer))
  (parameter (type-and-name GtkTreeCellDataFunc func))
  (parameter (type-and-name gpointer func_data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method n_clear_attributes 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_clear_attributes)
  (return-type none)
  (parameter (type-and-name GtkCellRenderer* cell_renderer))
)

(method n_set_spacing 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_spacing)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(method n_get_spacing 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_spacing)
  (return-type gint)
)

(method n_set_visible 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_visible)
  (return-type none)
  (parameter (type-and-name gboolean visible))
)

(method n_get_visible 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_visible)
  (return-type gboolean)
)

(method n_set_resizable 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_resizable)
  (return-type none)
  (parameter (type-and-name gboolean resizable))
)

(method n_get_resizable 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_resizable)
  (return-type gboolean)
)

(method n_set_sizing 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_sizing)
  (return-type none)
  (parameter (type-and-name GtkTreeViewColumnSizing type))
)

(method n_get_sizing 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_sizing)
  (return-type GtkTreeViewColumnSizing)
)

(method n_get_width 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_width)
  (return-type gint)
)

(method n_get_fixed_width 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_fixed_width)
  (return-type gint)
)

(method n_set_fixed_width 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_fixed_width)
  (return-type none)
  (parameter (type-and-name gint fixed_width))
)

(method n_set_min_width 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_min_width)
  (return-type none)
  (parameter (type-and-name gint min_width))
)

(method n_get_min_width 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_min_width)
  (return-type gint)
)

(method n_set_max_width 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_max_width)
  (return-type none)
  (parameter (type-and-name gint max_width))
)

(method n_get_max_width 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_max_width)
  (return-type gint)
)

(method n_clicked 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_clicked)
  (return-type none)
)

(method n_set_title 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_title)
  (return-type none)
  (parameter (type-and-name const-gchar* title))
)

(method n_get_title 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_title)
  (return-type gchar*)
)

(method n_set_clickable 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_clickable)
  (return-type none)
  (parameter (type-and-name gboolean clickable))
)

(method n_get_clickable 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_clickable)
  (return-type gboolean)
)

(method n_set_widget 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method n_get_widget 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_widget)
  (return-type GtkWidget*)
)

(method n_set_alignment 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_alignment)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
)

(method n_get_alignment 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_alignment)
  (return-type gfloat)
)

(method n_set_reorderable 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_reorderable)
  (return-type none)
  (parameter (type-and-name gboolean reorderable))
)

(method n_get_reorderable 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_reorderable)
  (return-type gboolean)
)

(method n_set_sort_column_id 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_sort_column_id)
  (return-type none)
  (parameter (type-and-name gint sort_column_id))
)

(method n_get_sort_column_id 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_sort_column_id)
  (return-type gint)
)

(method n_set_sort_indicator 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_sort_indicator)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method n_get_sort_indicator 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_sort_indicator)
  (return-type gboolean)
)

(method n_set_sort_order 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_sort_order)
  (return-type none)
  (parameter (type-and-name GtkSortType order))
)

(method n_get_sort_order 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_sort_order)
  (return-type GtkSortType)
)

(method n_cell_set_cell_data 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_cell_set_cell_data)
  (return-type none)
  (parameter (type-and-name GtkTreeModel* tree_model))
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name gboolean is_expander))
  (parameter (type-and-name gboolean is_expanded))
)

(method n_cell_get_size 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_cell_get_size)
  (return-type none)
  (parameter (type-and-name GdkRectangle* cell_area))
  (parameter (type-and-name gint* x_offset))
  (parameter (type-and-name gint* y_offset))
  (parameter (type-and-name gint* width))
  (parameter (type-and-name gint* height))
)

(method n_cell_is_visible 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_cell_is_visible)
  (return-type gboolean)
)

(method n_focus_cell 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_focus_cell)
  (return-type none)
  (parameter (type-and-name GtkCellRenderer* cell))
)

(method n_cell_get_position 
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_cell_get_position)
  (return-type gboolean)
  (parameter (type-and-name GtkCellRenderer* cell_renderer))
  (parameter (type-and-name gint* start_pos))
  (parameter (type-and-name gint* width))
)

(function gtk_tree_store_get_type 
  (c-name gtk_tree_store_get_type)
  (return-type GType)
)

(function gtk_tree_store_new 
  (c-name gtk_tree_store_new)
  (is-constructor-of GtkTreeStore)
  (return-type GtkTreeStore*)
  (parameter (type-and-name gint n_columns))
;  (varargs t)
)

(function gtk_tree_store_newv 
  (c-name gtk_tree_store_newv)
  (return-type GtkTreeStore*)
  (parameter (type-and-name gint n_columns))
  (parameter (type-and-name GType* types))
)

(method set_column_types 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_set_column_types)
  (return-type none)
  (parameter (type-and-name gint n_columns))
  (parameter (type-and-name GType* types))
)

(method set_value 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_set_value)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GValue* value))
)

(method set 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_set)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
 ; (varargs t)
)

(method set_valist 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_set_valist)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name va_list var_args))
)

(method remove 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_remove)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method insert 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_insert)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
  (parameter (type-and-name gint position))
)

(method insert_before 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_insert_before)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
  (parameter (type-and-name GtkTreeIter* sibling))
)

(method insert_after 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_insert_after)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
  (parameter (type-and-name GtkTreeIter* sibling))
)

(method prepend 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_prepend)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
)

(method append 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_append)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
)

(method is_ancestor 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_is_ancestor)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* descendant))
)

(method iter_depth 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_iter_depth)
  (return-type gint)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method clear 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_clear)
  (return-type none)
)

(method iter_is_valid 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_iter_is_valid)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method reorder 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_reorder)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* parent))
  (parameter (type-and-name gint* new_order))
)

(method swap 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_swap)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* a))
  (parameter (type-and-name GtkTreeIter* b))
)

(method move_before 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_move_before)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* position))
)

(method move_after 
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_move_after)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* position))
)

(function gtk_tree_sortable_get_type 
  (c-name gtk_tree_sortable_get_type)
  (return-type GType)
)

(function gtk_tree_selection_get_type 
  (c-name gtk_tree_selection_get_type)
  (return-type GType)
)

(method set_mode 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_set_mode)
  (return-type none)
  (parameter (type-and-name GtkSelectionMode type))
)

(method get_mode 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_get_mode)
  (return-type GtkSelectionMode)
)

(method set_select_function 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_set_select_function)
  (return-type none)
  (parameter (type-and-name GtkTreeSelectionFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method get_user_data 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_get_user_data)
  (return-type gpointer)
)

(method get_tree_view 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_get_tree_view)
  (return-type GtkTreeView*)
)

(method get_selected 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_get_selected)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeModel** model))
  (parameter (type-and-name GtkTreeIter* iter))
)

(method get_selected_rows 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_get_selected_rows)
  (return-type GList*)
  (parameter (type-and-name GtkTreeModel** model))
)

(method count_selected_rows 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_count_selected_rows)
  (return-type gint)
)

(method selected_foreach 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_selected_foreach)
  (return-type none)
  (parameter (type-and-name GtkTreeSelectionForeachFunc func))
  (parameter (type-and-name gpointer data))
)

(method select_path 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_select_path)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
)

(method unselect_path 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_unselect_path)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
)

(method select_iter 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_select_iter)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method unselect_iter 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_unselect_iter)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method path_is_selected 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_path_is_selected)
  (return-type gboolean)
  (parameter (type-and-name GtkTreePath* path))
)

(method iter_is_selected 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_iter_is_selected)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method select_all 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_select_all)
  (return-type none)
)

(method unselect_all 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_unselect_all)
  (return-type none)
)

(method select_range 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_select_range)
  (return-type none)
  (parameter (type-and-name GtkTreePath* start_path))
  (parameter (type-and-name GtkTreePath* end_path))
)

(method unselect_range 
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_unselect_range)
  (return-type none)
  (parameter (type-and-name GtkTreePath* start_path))
  (parameter (type-and-name GtkTreePath* end_path))
)

(function gtk_tree_model_sort_get_type 
  (c-name gtk_tree_model_sort_get_type)
  (return-type GType)
)

(method t_get_model 
  (of-object TreeModelSort (Gtk))
  (c-name gtk_tree_model_sort_get_model)
  (return-type GtkTreeModel*)
)

(method t_convert_child_path_to_path 
  (of-object TreeModelSort (Gtk))
  (c-name gtk_tree_model_sort_convert_child_path_to_path)
  (return-type GtkTreePath*)
  (parameter (type-and-name GtkTreePath* child_path))
)

(method t_convert_child_iter_to_iter 
  (of-object TreeModelSort (Gtk))
  (c-name gtk_tree_model_sort_convert_child_iter_to_iter)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* sort_iter))
  (parameter (type-and-name GtkTreeIter* child_iter))
)

(method t_convert_path_to_child_path 
  (of-object TreeModelSort (Gtk))
  (c-name gtk_tree_model_sort_convert_path_to_child_path)
  (return-type GtkTreePath*)
  (parameter (type-and-name GtkTreePath* sorted_path))
)

(method t_convert_iter_to_child_iter 
  (of-object TreeModelSort (Gtk))
  (c-name gtk_tree_model_sort_convert_iter_to_child_iter)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* child_iter))
  (parameter (type-and-name GtkTreeIter* sorted_iter))
)

(method t_reset_default_sort_func 
  (of-object TreeModelSort (Gtk))
  (c-name gtk_tree_model_sort_reset_default_sort_func)
  (return-type none)
)

(method t_clear_cache 
  (of-object TreeModelSort (Gtk))
  (c-name gtk_tree_model_sort_clear_cache)
  (return-type none)
)

(method t_iter_is_valid 
  (of-object TreeModelSort (Gtk))
  (c-name gtk_tree_model_sort_iter_is_valid)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
)

(function gtk_tree_path_new 
  (c-name gtk_tree_path_new)
  (return-type GtkTreePath*)
)

(function gtk_tree_path_new_from_string 
  (c-name gtk_tree_path_new_from_string)
  (return-type GtkTreePath*)
  (parameter (type-and-name const-gchar* path))
)

(function gtk_tree_path_new_from_indices 
  (c-name gtk_tree_path_new_from_indices)
  (return-type GtkTreePath*)
  (parameter (type-and-name gint first_index))
;  (varargs t)
)

(function gtk_tree_path_new_first 
  (c-name gtk_tree_path_new_first)
  (return-type GtkTreePath*)
)

(function gtk_tree_path_copy 
  (c-name gtk_tree_path_copy)
  (return-type GtkTreePath*)
  (parameter (type-and-name const-GtkTreePath* path))
)

(function gtk_tree_path_get_type 
  (c-name gtk_tree_path_get_type)
  (return-type GType)
)

(function gtk_tree_path_compare 
  (c-name gtk_tree_path_compare)
  (return-type gint)
  (parameter (type-and-name const-GtkTreePath* a))
  (parameter (type-and-name const-GtkTreePath* b))
)

(function gtk_tree_row_reference_get_type 
  (c-name gtk_tree_row_reference_get_type)
  (return-type GType)
)

(function gtk_tree_row_reference_new 
  (c-name gtk_tree_row_reference_new)
  (return-type GtkTreeRowReference*)
  (parameter (type-and-name GtkTreeModel* model))
  (parameter (type-and-name GtkTreePath* path))
)

(function gtk_tree_row_reference_new_proxy 
  (c-name gtk_tree_row_reference_new_proxy)
  (return-type GtkTreeRowReference*)
  (parameter (type-and-name GObject* proxy))
  (parameter (type-and-name GtkTreeModel* model))
  (parameter (type-and-name GtkTreePath* path))
)

(function gtk_tree_row_reference_inserted 
  (c-name gtk_tree_row_reference_inserted)
  (return-type none)
  (parameter (type-and-name GObject* proxy))
  (parameter (type-and-name GtkTreePath* path))
)

(function gtk_tree_row_reference_deleted 
  (c-name gtk_tree_row_reference_deleted)
  (return-type none)
  (parameter (type-and-name GObject* proxy))
  (parameter (type-and-name GtkTreePath* path))
)

(function gtk_tree_row_reference_reordered 
  (c-name gtk_tree_row_reference_reordered)
  (return-type none)
  (parameter (type-and-name GObject* proxy))
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name gint* new_order))
)

(function gtk_tree_iter_get_type 
  (c-name gtk_tree_iter_get_type)
  (return-type GType)
)

(function gtk_tree_model_get_type 
  (c-name gtk_tree_model_get_type)
  (return-type GType)
)

(function gtk_tree_drag_source_get_type 
  (c-name gtk_tree_drag_source_get_type)
  (return-type GType)
)

(function gtk_tree_drag_dest_get_type 
  (c-name gtk_tree_drag_dest_get_type)
  (return-type GType)
)

(function gtk_tree_set_row_drag_data 
  (c-name gtk_tree_set_row_drag_data)
  (return-type gboolean)
  (parameter (type-and-name GtkSelectionData* selection_data))
  (parameter (type-and-name GtkTreeModel* tree_model))
  (parameter (type-and-name GtkTreePath* path))
)

(function gtk_tree_get_row_drag_data 
  (c-name gtk_tree_get_row_drag_data)
  (return-type gboolean)
  (parameter (type-and-name GtkSelectionData* selection_data))
  (parameter (type-and-name GtkTreeModel** tree_model))
  (parameter (type-and-name GtkTreePath** path))
)

(function gtk_tooltips_get_type 
  (c-name gtk_tooltips_get_type)
  (return-type GType)
)

(function gtk_tooltips_new 
  (c-name gtk_tooltips_new)
  (is-constructor-of GtkTooltips)
  (return-type GtkTooltips*)
)

(method enable 
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_enable)
  (return-type none)
)

(method disable 
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_disable)
  (return-type none)
)

(method set_delay 
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_set_delay)
  (return-type none)
  (parameter (type-and-name guint delay))
)

(method set_tip 
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_set_tip)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* tip_text))
  (parameter (type-and-name const-gchar* tip_private))
)

(function gtk_tooltips_data_get 
  (c-name gtk_tooltips_data_get)
  (return-type GtkTooltipsData*)
  (parameter (type-and-name GtkWidget* widget))
)

(method force_window 
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_force_window)
  (return-type none)
)

(function gtk_toolbar_get_type 
  (c-name gtk_toolbar_get_type)
  (return-type GType)
)

(function gtk_toolbar_new 
  (c-name gtk_toolbar_new)
  (is-constructor-of GtkToolbar)
  (return-type GtkWidget*)
)

(method append_item 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method prepend_item 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method insert_item 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
  (parameter (type-and-name gint position))
)

(method insert_stock 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_stock)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
  (parameter (type-and-name gint position))
)

(method append_space 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_space)
  (return-type none)
)

(method prepend_space 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_space)
  (return-type none)
)

(method insert_space 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_space)
  (return-type none)
  (parameter (type-and-name gint position))
)

(method remove_space 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_remove_space)
  (return-type none)
  (parameter (type-and-name gint position))
)

(method append_element 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_element)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkToolbarChildType type))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method prepend_element 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_element)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkToolbarChildType type))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method insert_element 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_element)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkToolbarChildType type))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
  (parameter (type-and-name gint position))
)

(method append_widget 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
)

(method prepend_widget 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
)

(method insert_widget 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name gint position))
)

(method set_orientation 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_orientation)
  (return-type none)
  (parameter (type-and-name GtkOrientation orientation))
)

(method set_style 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_style)
  (return-type none)
  (parameter (type-and-name GtkToolbarStyle style))
)

(method set_icon_size 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_icon_size)
  (return-type none)
  (parameter (type-and-name GtkIconSize icon_size))
)

(method set_tooltips 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_tooltips)
  (return-type none)
  (parameter (type-and-name gboolean enable))
)

(method unset_style 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_unset_style)
  (return-type none)
)

(method unset_icon_size 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_unset_icon_size)
  (return-type none)
)

(method get_orientation 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_get_orientation)
  (return-type GtkOrientation)
)

(method get_style 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_get_style)
  (return-type GtkToolbarStyle)
)

(method get_icon_size 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_get_icon_size)
  (return-type GtkIconSize)
)

(method get_tooltips 
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_get_tooltips)
  (return-type gboolean)
)

(function gtk_toggle_button_get_type 
  (c-name gtk_toggle_button_get_type)
  (return-type GType)
)

(function gtk_toggle_button_new 
  (c-name gtk_toggle_button_new)
  (is-constructor-of GtkToggleButton)
  (return-type GtkWidget*)
)

(function gtk_toggle_button_new_with_label 
  (c-name gtk_toggle_button_new_with_label)
  (is-constructor-of GtkToggleButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_toggle_button_new_with_mnemonic 
  (c-name gtk_toggle_button_new_with_mnemonic)
  (is-constructor-of GtkToggleButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method set_mode 
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_set_mode)
  (return-type none)
  (parameter (type-and-name gboolean draw_indicator))
)

(method get_mode 
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_get_mode)
  (return-type gboolean)
)

(method set_active 
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_set_active)
  (return-type none)
  (parameter (type-and-name gboolean is_active))
)

(method get_active 
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_get_active)
  (return-type gboolean)
)

(method toggled 
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_toggled)
  (return-type none)
)

(method set_inconsistent 
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_set_inconsistent)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_inconsistent 
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_get_inconsistent)
  (return-type gboolean)
)

(function void 
  (c-name void)
  (return-type )
  (parameter (type-and-name *start_query))
)

(function void 
  (c-name void)
  (return-type )
  (parameter (type-and-name *stop_query))
)

(function void 
  (c-name void)
  (return-type )
  (parameter (type-and-name *widget_entered))
)

(function gint 
  (c-name gint)
  (return-type )
  (parameter (type-and-name *widget_selected))
)

(function void 
  (c-name void)
  (return-type )
  (parameter (type-and-name *_gtk_reserved1))
)

(function void 
  (c-name void)
  (return-type )
  (parameter (type-and-name *_gtk_reserved2))
)

(function void 
  (c-name void)
  (return-type )
  (parameter (type-and-name *_gtk_reserved3))
)

(function void 
  (c-name void)
  (return-type )
  (parameter (type-and-name *_gtk_reserved4))
)

(function gtk_tips_query_get_type 
  (c-name gtk_tips_query_get_type)
  (return-type GtkType)
)

(function gtk_tips_query_new 
  (c-name gtk_tips_query_new)
  (is-constructor-of GtkTipsQuery)
  (return-type GtkWidget*)
)

(function gtk_text_view_get_type 
  (c-name gtk_text_view_get_type)
  (return-type GType)
)

(function gtk_text_view_new 
  (c-name gtk_text_view_new)
  (is-constructor-of GtkTextView)
  (return-type GtkWidget*)
)

(function gtk_text_view_new_with_buffer 
  (c-name gtk_text_view_new_with_buffer)
  (is-constructor-of GtkTextView)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkTextBuffer* buffer))
)

(method set_buffer 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_buffer)
  (return-type none)
  (parameter (type-and-name GtkTextBuffer* buffer))
)

(method get_buffer 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_buffer)
  (return-type GtkTextBuffer*)
)

(method scroll_to_iter 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_scroll_to_iter)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gdouble within_margin))
  (parameter (type-and-name gboolean use_align))
  (parameter (type-and-name gdouble xalign))
  (parameter (type-and-name gdouble yalign))
)

(method scroll_to_mark 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_scroll_to_mark)
  (return-type none)
  (parameter (type-and-name GtkTextMark* mark))
  (parameter (type-and-name gdouble within_margin))
  (parameter (type-and-name gboolean use_align))
  (parameter (type-and-name gdouble xalign))
  (parameter (type-and-name gdouble yalign))
)

(method scroll_mark_onscreen 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_scroll_mark_onscreen)
  (return-type none)
  (parameter (type-and-name GtkTextMark* mark))
)

(method move_mark_onscreen 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_move_mark_onscreen)
  (return-type gboolean)
  (parameter (type-and-name GtkTextMark* mark))
)

(method place_cursor_onscreen 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_place_cursor_onscreen)
  (return-type gboolean)
)

(method get_visible_rect 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_visible_rect)
  (return-type none)
  (parameter (type-and-name GdkRectangle* visible_rect))
)

(method set_cursor_visible 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_cursor_visible)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_cursor_visible 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_cursor_visible)
  (return-type gboolean)
)

(method get_iter_location 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_iter_location)
  (return-type none)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name GdkRectangle* location))
)

(method get_iter_at_location 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_iter_at_location)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method get_line_yrange 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_line_yrange)
  (return-type none)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name gint* y))
  (parameter (type-and-name gint* height))
)

(method get_line_at_y 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_line_at_y)
  (return-type none)
  (parameter (type-and-name GtkTextIter* target_iter))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint* line_top))
)

(method buffer_to_window_coords 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_buffer_to_window_coords)
  (return-type none)
  (parameter (type-and-name GtkTextWindowType win))
  (parameter (type-and-name gint buffer_x))
  (parameter (type-and-name gint buffer_y))
  (parameter (type-and-name gint* window_x))
  (parameter (type-and-name gint* window_y))
)

(method window_to_buffer_coords 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_window_to_buffer_coords)
  (return-type none)
  (parameter (type-and-name GtkTextWindowType win))
  (parameter (type-and-name gint window_x))
  (parameter (type-and-name gint window_y))
  (parameter (type-and-name gint* buffer_x))
  (parameter (type-and-name gint* buffer_y))
)

(method get_window 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_window)
  (return-type GdkWindow*)
  (parameter (type-and-name GtkTextWindowType win))
)

(method get_window_type 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_window_type)
  (return-type GtkTextWindowType)
  (parameter (type-and-name GdkWindow* window))
)

(method set_border_window_size 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_border_window_size)
  (return-type none)
  (parameter (type-and-name GtkTextWindowType type))
  (parameter (type-and-name gint size))
)

(method get_border_window_size 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_border_window_size)
  (return-type gint)
  (parameter (type-and-name GtkTextWindowType type))
)

(method forward_display_line 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_forward_display_line)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
)

(method backward_display_line 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_backward_display_line)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
)

(method forward_display_line_end 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_forward_display_line_end)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
)

(method backward_display_line_start 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_backward_display_line_start)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
)

(method starts_display_line 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_starts_display_line)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(method move_visually 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_move_visually)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint count))
)

(method add_child_at_anchor 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_add_child_at_anchor)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkTextChildAnchor* anchor))
)

(method add_child_in_window 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_add_child_in_window)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkTextWindowType which_window))
  (parameter (type-and-name gint xpos))
  (parameter (type-and-name gint ypos))
)

(method move_child 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_move_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint xpos))
  (parameter (type-and-name gint ypos))
)

(method set_wrap_mode 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_wrap_mode)
  (return-type none)
  (parameter (type-and-name GtkWrapMode wrap_mode))
)

(method get_wrap_mode 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_wrap_mode)
  (return-type GtkWrapMode)
)

(method set_editable 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_editable)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_editable 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_editable)
  (return-type gboolean)
)

(method set_pixels_above_lines 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_pixels_above_lines)
  (return-type none)
  (parameter (type-and-name gint pixels_above_lines))
)

(method get_pixels_above_lines 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_pixels_above_lines)
  (return-type gint)
)

(method set_pixels_below_lines 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_pixels_below_lines)
  (return-type none)
  (parameter (type-and-name gint pixels_below_lines))
)

(method get_pixels_below_lines 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_pixels_below_lines)
  (return-type gint)
)

(method set_pixels_inside_wrap 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_pixels_inside_wrap)
  (return-type none)
  (parameter (type-and-name gint pixels_inside_wrap))
)

(method get_pixels_inside_wrap 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_pixels_inside_wrap)
  (return-type gint)
)

(method set_justification 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_justification)
  (return-type none)
  (parameter (type-and-name GtkJustification justification))
)

(method get_justification 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_justification)
  (return-type GtkJustification)
)

(method set_left_margin 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_left_margin)
  (return-type none)
  (parameter (type-and-name gint left_margin))
)

(method get_left_margin 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_left_margin)
  (return-type gint)
)

(method set_right_margin 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_right_margin)
  (return-type none)
  (parameter (type-and-name gint right_margin))
)

(method get_right_margin 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_right_margin)
  (return-type gint)
)

(method set_indent 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_indent)
  (return-type none)
  (parameter (type-and-name gint indent))
)

(method get_indent 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_indent)
  (return-type gint)
)

(method set_tabs 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_tabs)
  (return-type none)
  (parameter (type-and-name PangoTabArray* tabs))
)

(method get_tabs 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_tabs)
  (return-type PangoTabArray*)
)

(method get_default_attributes 
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_default_attributes)
  (return-type GtkTextAttributes*)
)

(function gtk_text_tag_table_get_type 
  (c-name gtk_text_tag_table_get_type)
  (return-type GType)
)

(function gtk_text_tag_table_new 
  (c-name gtk_text_tag_table_new)
  (is-constructor-of GtkTextTagTable)
  (return-type GtkTextTagTable*)
)

(method e_add 
  (of-object TextTagTable (Gtk))
  (c-name gtk_text_tag_table_add)
  (return-type none)
  (parameter (type-and-name GtkTextTag* tag))
)

(method e_remove 
  (of-object TextTagTable (Gtk))
  (c-name gtk_text_tag_table_remove)
  (return-type none)
  (parameter (type-and-name GtkTextTag* tag))
)

(method e_lookup 
  (of-object TextTagTable (Gtk))
  (c-name gtk_text_tag_table_lookup)
  (return-type GtkTextTag*)
  (parameter (type-and-name const-gchar* name))
)

(method e_foreach 
  (of-object TextTagTable (Gtk))
  (c-name gtk_text_tag_table_foreach)
  (return-type none)
  (parameter (type-and-name GtkTextTagTableForeach func))
  (parameter (type-and-name gpointer data))
)

(method e_get_size 
  (of-object TextTagTable (Gtk))
  (c-name gtk_text_tag_table_get_size)
  (return-type gint)
)

(function gtk_text_tag_get_type 
  (c-name gtk_text_tag_get_type)
  (return-type GType)
)

(function gtk_text_tag_new 
  (c-name gtk_text_tag_new)
  (is-constructor-of GtkTextTag)
  (return-type GtkTextTag*)
  (parameter (type-and-name const-gchar* name))
)

(method get_priority 
  (of-object TextTag (Gtk))
  (c-name gtk_text_tag_get_priority)
  (return-type gint)
)

(method set_priority 
  (of-object TextTag (Gtk))
  (c-name gtk_text_tag_set_priority)
  (return-type none)
  (parameter (type-and-name gint priority))
)

(method event 
  (of-object TextTag (Gtk))
  (c-name gtk_text_tag_event)
  (return-type gboolean)
  (parameter (type-and-name GObject* event_object))
  (parameter (type-and-name GdkEvent* event))
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_attributes_new 
  (c-name gtk_text_attributes_new)
  (is-constructor-of GtkTextAttributes)
  (return-type GtkTextAttributes*)
)

(function gtk_text_attributes_get_type 
  (c-name gtk_text_attributes_get_type)
  (return-type GType)
)

(function gtk_text_mark_get_type 
  (c-name gtk_text_mark_get_type)
  (return-type GType)
)

(method set_visible 
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_set_visible)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_visible 
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_get_visible)
  (return-type gboolean)
)

(method get_name 
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_get_name)
  (return-type gchar*)
)

(method get_deleted 
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_get_deleted)
  (return-type gboolean)
)

(method get_buffer 
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_get_buffer)
  (return-type GtkTextBuffer*)
)

(method get_left_gravity 
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_get_left_gravity)
  (return-type gboolean)
)

(function gtk_text_layout_get_type 
  (c-name gtk_text_layout_get_type)
  (return-type GType)
)

(function gtk_text_layout_new 
  (c-name gtk_text_layout_new)
  (is-constructor-of GtkTextLayout)
  (return-type GtkTextLayout*)
)

(method set_buffer 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_set_buffer)
  (return-type none)
  (parameter (type-and-name GtkTextBuffer* buffer))
)

(method get_buffer 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_get_buffer)
  (return-type GtkTextBuffer*)
)

(method set_default_style 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_set_default_style)
  (return-type none)
  (parameter (type-and-name GtkTextAttributes* values))
)

(method set_contexts 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_set_contexts)
  (return-type none)
  (parameter (type-and-name PangoContext* ltr_context))
  (parameter (type-and-name PangoContext* rtl_context))
)

(method set_cursor_direction 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_set_cursor_direction)
  (return-type none)
  (parameter (type-and-name GtkTextDirection direction))
)

(method default_style_changed 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_default_style_changed)
  (return-type none)
)

(method set_screen_width 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_set_screen_width)
  (return-type none)
  (parameter (type-and-name gint width))
)

(method set_preedit_string 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_set_preedit_string)
  (return-type none)
  (parameter (type-and-name const-gchar* preedit_string))
  (parameter (type-and-name PangoAttrList* preedit_attrs))
  (parameter (type-and-name gint cursor_pos))
)

(method set_cursor_visible 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_set_cursor_visible)
  (return-type none)
  (parameter (type-and-name gboolean cursor_visible))
)

(method get_cursor_visible 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_get_cursor_visible)
  (return-type gboolean)
)

(method get_size 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_get_size)
  (return-type none)
  (parameter (type-and-name gint* width))
  (parameter (type-and-name gint* height))
)

(method get_lines 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_get_lines)
  (return-type GSList*)
  (parameter (type-and-name gint top_y))
  (parameter (type-and-name gint bottom_y))
  (parameter (type-and-name gint* first_line_y))
)

(method wrap_loop_start 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_wrap_loop_start)
  (return-type none)
)

(method wrap_loop_end 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_wrap_loop_end)
  (return-type none)
)

(method get_line_display 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_get_line_display)
  (return-type GtkTextLineDisplay*)
  (parameter (type-and-name GtkTextLine* line))
  (parameter (type-and-name gboolean size_only))
)

(method free_line_display 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_free_line_display)
  (return-type none)
  (parameter (type-and-name GtkTextLineDisplay* display))
)

(method get_line_at_y 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_get_line_at_y)
  (return-type none)
  (parameter (type-and-name GtkTextIter* target_iter))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint* line_top))
)

(method get_iter_at_pixel 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_get_iter_at_pixel)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method invalidate 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_invalidate)
  (return-type none)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method free_line_data 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_free_line_data)
  (return-type none)
  (parameter (type-and-name GtkTextLine* line))
  (parameter (type-and-name GtkTextLineData* line_data))
)

(method is_valid 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_is_valid)
  (return-type gboolean)
)

(method validate_yrange 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_validate_yrange)
  (return-type none)
  (parameter (type-and-name GtkTextIter* anchor_line))
  (parameter (type-and-name gint y0_))
  (parameter (type-and-name gint y1_))
)

(method validate 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_validate)
  (return-type none)
  (parameter (type-and-name gint max_pixels))
)

(method wrap 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_wrap)
  (return-type GtkTextLineData*)
  (parameter (type-and-name GtkTextLine* line))
  (parameter (type-and-name GtkTextLineData* line_data))
)

(method changed 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_changed)
  (return-type none)
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint old_height))
  (parameter (type-and-name gint new_height))
)

(method get_iter_location 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_get_iter_location)
  (return-type none)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name GdkRectangle* rect))
)

(method get_line_yrange 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_get_line_yrange)
  (return-type none)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name gint* y))
  (parameter (type-and-name gint* height))
)

(method get_cursor_locations 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_get_cursor_locations)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name GdkRectangle* strong_pos))
  (parameter (type-and-name GdkRectangle* weak_pos))
)

(method clamp_iter_to_vrange 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_clamp_iter_to_vrange)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint top))
  (parameter (type-and-name gint bottom))
)

(method move_iter_to_line_end 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_move_iter_to_line_end)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint direction))
)

(method move_iter_to_previous_line 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_move_iter_to_previous_line)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
)

(method move_iter_to_next_line 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_move_iter_to_next_line)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
)

(method move_iter_to_x 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_move_iter_to_x)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint x))
)

(method move_iter_visually 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_move_iter_visually)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint count))
)

(method iter_starts_line 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_iter_starts_line)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(method get_iter_at_line 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_get_iter_at_line)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name GtkTextLine* line))
  (parameter (type-and-name gint byte_offset))
)

(method r_register_child 
  (of-object TextChildAnchor (Gtk))
  (c-name gtk_text_child_anchor_register_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkTextLayout* layout))
)

(method r_unregister_child 
  (of-object TextChildAnchor (Gtk))
  (c-name gtk_text_child_anchor_unregister_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method r_queue_resize 
  (of-object TextChildAnchor (Gtk))
  (c-name gtk_text_child_anchor_queue_resize)
  (return-type none)
  (parameter (type-and-name GtkTextLayout* layout))
)

(function gtk_text_anchored_child_set_layout 
  (c-name gtk_text_anchored_child_set_layout)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkTextLayout* layout))
)

(method spew 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_spew)
  (return-type none)
)

(function gtk_text_iter_get_buffer 
  (c-name gtk_text_iter_get_buffer)
  (return-type GtkTextBuffer*)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_copy 
  (c-name gtk_text_iter_copy)
  (return-type GtkTextIter*)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_type 
  (c-name gtk_text_iter_get_type)
  (return-type GType)
)

(function gtk_text_iter_get_offset 
  (c-name gtk_text_iter_get_offset)
  (return-type gint)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_line 
  (c-name gtk_text_iter_get_line)
  (return-type gint)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_line_offset 
  (c-name gtk_text_iter_get_line_offset)
  (return-type gint)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_line_index 
  (c-name gtk_text_iter_get_line_index)
  (return-type gint)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_visible_line_offset 
  (c-name gtk_text_iter_get_visible_line_offset)
  (return-type gint)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_visible_line_index 
  (c-name gtk_text_iter_get_visible_line_index)
  (return-type gint)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_char 
  (c-name gtk_text_iter_get_char)
  (return-type gunichar)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_slice 
  (c-name gtk_text_iter_get_slice)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(function gtk_text_iter_get_text 
  (c-name gtk_text_iter_get_text)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(function gtk_text_iter_get_visible_slice 
  (c-name gtk_text_iter_get_visible_slice)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(function gtk_text_iter_get_visible_text 
  (c-name gtk_text_iter_get_visible_text)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(function gtk_text_iter_get_pixbuf 
  (c-name gtk_text_iter_get_pixbuf)
  (return-type GdkPixbuf*)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_marks 
  (c-name gtk_text_iter_get_marks)
  (return-type GSList*)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_child_anchor 
  (c-name gtk_text_iter_get_child_anchor)
  (return-type GtkTextChildAnchor*)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_toggled_tags 
  (c-name gtk_text_iter_get_toggled_tags)
  (return-type GSList*)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name gboolean toggled_on))
)

(function gtk_text_iter_begins_tag 
  (c-name gtk_text_iter_begins_tag)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name GtkTextTag* tag))
)

(function gtk_text_iter_ends_tag 
  (c-name gtk_text_iter_ends_tag)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name GtkTextTag* tag))
)

(function gtk_text_iter_toggles_tag 
  (c-name gtk_text_iter_toggles_tag)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name GtkTextTag* tag))
)

(function gtk_text_iter_has_tag 
  (c-name gtk_text_iter_has_tag)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name GtkTextTag* tag))
)

(function gtk_text_iter_get_tags 
  (c-name gtk_text_iter_get_tags)
  (return-type GSList*)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_editable 
  (c-name gtk_text_iter_editable)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name gboolean default_setting))
)

(function gtk_text_iter_can_insert 
  (c-name gtk_text_iter_can_insert)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name gboolean default_editability))
)

(function gtk_text_iter_starts_word 
  (c-name gtk_text_iter_starts_word)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_ends_word 
  (c-name gtk_text_iter_ends_word)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_inside_word 
  (c-name gtk_text_iter_inside_word)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_starts_sentence 
  (c-name gtk_text_iter_starts_sentence)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_ends_sentence 
  (c-name gtk_text_iter_ends_sentence)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_inside_sentence 
  (c-name gtk_text_iter_inside_sentence)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_starts_line 
  (c-name gtk_text_iter_starts_line)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_ends_line 
  (c-name gtk_text_iter_ends_line)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_is_cursor_position 
  (c-name gtk_text_iter_is_cursor_position)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_chars_in_line 
  (c-name gtk_text_iter_get_chars_in_line)
  (return-type gint)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_bytes_in_line 
  (c-name gtk_text_iter_get_bytes_in_line)
  (return-type gint)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_get_attributes 
  (c-name gtk_text_iter_get_attributes)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name GtkTextAttributes* values))
)

(function gtk_text_iter_get_language 
  (c-name gtk_text_iter_get_language)
  (return-type PangoLanguage*)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_is_end 
  (c-name gtk_text_iter_is_end)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_is_start 
  (c-name gtk_text_iter_is_start)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_iter_forward_search 
  (c-name gtk_text_iter_forward_search)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name const-gchar* str))
  (parameter (type-and-name GtkTextSearchFlags flags))
  (parameter (type-and-name GtkTextIter* match_start))
  (parameter (type-and-name GtkTextIter* match_end))
  (parameter (type-and-name const-GtkTextIter* limit))
)

(function gtk_text_iter_backward_search 
  (c-name gtk_text_iter_backward_search)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name const-gchar* str))
  (parameter (type-and-name GtkTextSearchFlags flags))
  (parameter (type-and-name GtkTextIter* match_start))
  (parameter (type-and-name GtkTextIter* match_end))
  (parameter (type-and-name const-GtkTextIter* limit))
)

(function gtk_text_iter_equal 
  (c-name gtk_text_iter_equal)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* lhs))
  (parameter (type-and-name const-GtkTextIter* rhs))
)

(function gtk_text_iter_compare 
  (c-name gtk_text_iter_compare)
  (return-type gint)
  (parameter (type-and-name const-GtkTextIter* lhs))
  (parameter (type-and-name const-GtkTextIter* rhs))
)

(function gtk_text_iter_in_range 
  (c-name gtk_text_iter_in_range)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method draw 
  (of-object TextLayout (Gtk))
  (c-name gtk_text_layout_draw)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkDrawable* drawable))
  (parameter (type-and-name GdkGC* cursor_gc))
  (parameter (type-and-name gint x_offset))
  (parameter (type-and-name gint y_offset))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GList** widgets))
)

(function gtk_text_child_anchor_get_type 
  (c-name gtk_text_child_anchor_get_type)
  (return-type GType)
)

(function gtk_text_child_anchor_new 
  (c-name gtk_text_child_anchor_new)
  (is-constructor-of GtkTextChildAnchor)
  (return-type GtkTextChildAnchor*)
)

(method r_get_widgets 
  (of-object TextChildAnchor (Gtk))
  (c-name gtk_text_child_anchor_get_widgets)
  (return-type GList*)
)

(method r_get_deleted 
  (of-object TextChildAnchor (Gtk))
  (c-name gtk_text_child_anchor_get_deleted)
  (return-type gboolean)
)

(function gtk_text_buffer_get_type 
  (c-name gtk_text_buffer_get_type)
  (return-type GType)
)

(function gtk_text_buffer_new 
  (c-name gtk_text_buffer_new)
  (is-constructor-of GtkTextBuffer)
  (return-type GtkTextBuffer*)
  (parameter (type-and-name GtkTextTagTable* table))
)

(method get_line_count 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_line_count)
  (return-type gint)
)

(method get_char_count 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_char_count)
  (return-type gint)
)

(method get_tag_table 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_tag_table)
  (return-type GtkTextTagTable*)
)

(method set_text 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_set_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
)

(method insert 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
)

(method insert_at_cursor 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_at_cursor)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
)

(method insert_interactive 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_interactive)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
  (parameter (type-and-name gboolean default_editable))
)

(method insert_interactive_at_cursor 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_interactive_at_cursor)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
  (parameter (type-and-name gboolean default_editable))
)

(method insert_range 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_range)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method insert_range_interactive 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_range_interactive)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
  (parameter (type-and-name gboolean default_editable))
)

(method insert_with_tags 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_with_tags)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
  (parameter (type-and-name GtkTextTag* first_tag))
 ; (varargs t)
)

(method insert_with_tags_by_name 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_with_tags_by_name)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
  (parameter (type-and-name const-gchar* first_tag_name))
 ; (varargs t)
)

(method delete 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_delete)
  (return-type none)
  (parameter (type-and-name GtkTextIter* start))
  (parameter (type-and-name GtkTextIter* end))
)

(method delete_interactive 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_delete_interactive)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* start_iter))
  (parameter (type-and-name GtkTextIter* end_iter))
  (parameter (type-and-name gboolean default_editable))
)

(method get_text 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_text)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
  (parameter (type-and-name gboolean include_hidden_chars))
)

(method get_slice 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_slice)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
  (parameter (type-and-name gboolean include_hidden_chars))
)

(method insert_pixbuf 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_pixbuf)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name GdkPixbuf* pixbuf))
)

(method insert_child_anchor 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_child_anchor)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name GtkTextChildAnchor* anchor))
)

(method create_child_anchor 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_create_child_anchor)
  (return-type GtkTextChildAnchor*)
  (parameter (type-and-name GtkTextIter* iter))
)

(method create_mark 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_create_mark)
  (return-type GtkTextMark*)
  (parameter (type-and-name const-gchar* mark_name))
  (parameter (type-and-name const-GtkTextIter* where))
  (parameter (type-and-name gboolean left_gravity))
)

(method move_mark 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_move_mark)
  (return-type none)
  (parameter (type-and-name GtkTextMark* mark))
  (parameter (type-and-name const-GtkTextIter* where))
)

(method delete_mark 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_delete_mark)
  (return-type none)
  (parameter (type-and-name GtkTextMark* mark))
)

(method get_mark 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_mark)
  (return-type GtkTextMark*)
  (parameter (type-and-name const-gchar* name))
)

(method move_mark_by_name 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_move_mark_by_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name const-GtkTextIter* where))
)

(method delete_mark_by_name 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_delete_mark_by_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
)

(method get_insert 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_insert)
  (return-type GtkTextMark*)
)

(method get_selection_bound 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_selection_bound)
  (return-type GtkTextMark*)
)

(method place_cursor 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_place_cursor)
  (return-type none)
  (parameter (type-and-name const-GtkTextIter* where))
)

(method apply_tag 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_apply_tag)
  (return-type none)
  (parameter (type-and-name GtkTextTag* tag))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method remove_tag 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_remove_tag)
  (return-type none)
  (parameter (type-and-name GtkTextTag* tag))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method apply_tag_by_name 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_apply_tag_by_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method remove_tag_by_name 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_remove_tag_by_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method remove_all_tags 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_remove_all_tags)
  (return-type none)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method create_tag 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_create_tag)
  (return-type GtkTextTag*)
  (parameter (type-and-name const-gchar* tag_name))
  (parameter (type-and-name const-gchar* first_property_name))
 ; (varargs t)
)

(method get_iter_at_line_offset 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_line_offset)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint line_number))
  (parameter (type-and-name gint char_offset))
)

(method get_iter_at_line_index 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_line_index)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint line_number))
  (parameter (type-and-name gint byte_index))
)

(method get_iter_at_offset 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_offset)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint char_offset))
)

(method get_iter_at_line 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_line)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint line_number))
)

(method get_start_iter 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_start_iter)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
)

(method get_end_iter 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_end_iter)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
)

(method get_bounds 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_bounds)
  (return-type none)
  (parameter (type-and-name GtkTextIter* start))
  (parameter (type-and-name GtkTextIter* end))
)

(method get_iter_at_mark 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_mark)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name GtkTextMark* mark))
)

(method get_iter_at_child_anchor 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_child_anchor)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name GtkTextChildAnchor* anchor))
)

(method get_modified 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_modified)
  (return-type gboolean)
)

(method set_modified 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_set_modified)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method add_selection_clipboard 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_add_selection_clipboard)
  (return-type none)
  (parameter (type-and-name GtkClipboard* clipboard))
)

(method remove_selection_clipboard 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_remove_selection_clipboard)
  (return-type none)
  (parameter (type-and-name GtkClipboard* clipboard))
)

(method cut_clipboard 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_cut_clipboard)
  (return-type none)
  (parameter (type-and-name GtkClipboard* clipboard))
  (parameter (type-and-name gboolean default_editable))
)

(method copy_clipboard 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_copy_clipboard)
  (return-type none)
  (parameter (type-and-name GtkClipboard* clipboard))
)

(method paste_clipboard 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_paste_clipboard)
  (return-type none)
  (parameter (type-and-name GtkClipboard* clipboard))
  (parameter (type-and-name GtkTextIter* override_location))
  (parameter (type-and-name gboolean default_editable))
)

(method get_selection_bounds 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_selection_bounds)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* start))
  (parameter (type-and-name GtkTextIter* end))
)

(method delete_selection 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_delete_selection)
  (return-type gboolean)
  (parameter (type-and-name gboolean interactive))
  (parameter (type-and-name gboolean default_editable))
)

(method begin_user_action 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_begin_user_action)
  (return-type none)
)

(method end_user_action 
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_end_user_action)
  (return-type none)
)

(function gtk_tearoff_menu_item_get_type 
  (c-name gtk_tearoff_menu_item_get_type)
  (return-type GType)
)

(function gtk_tearoff_menu_item_new 
  (c-name gtk_tearoff_menu_item_new)
  (is-constructor-of GtkTearoffMenuItem)
  (return-type GtkWidget*)
)

(function gtk_table_get_type 
  (c-name gtk_table_get_type)
  (return-type GType)
)

(function gtk_table_new 
  (c-name gtk_table_new)
  (is-constructor-of GtkTable)
  (return-type GtkWidget*)
  (parameter (type-and-name guint rows))
  (parameter (type-and-name guint columns))
  (parameter (type-and-name gboolean homogeneous))
)

(method resize 
  (of-object Table (Gtk))
  (c-name gtk_table_resize)
  (return-type none)
  (parameter (type-and-name guint rows))
  (parameter (type-and-name guint columns))
)

(method attach 
  (of-object Table (Gtk))
  (c-name gtk_table_attach)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name guint left_attach))
  (parameter (type-and-name guint right_attach))
  (parameter (type-and-name guint top_attach))
  (parameter (type-and-name guint bottom_attach))
  (parameter (type-and-name GtkAttachOptions xoptions))
  (parameter (type-and-name GtkAttachOptions yoptions))
  (parameter (type-and-name guint xpadding))
  (parameter (type-and-name guint ypadding))
)

(method attach_defaults 
  (of-object Table (Gtk))
  (c-name gtk_table_attach_defaults)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name guint left_attach))
  (parameter (type-and-name guint right_attach))
  (parameter (type-and-name guint top_attach))
  (parameter (type-and-name guint bottom_attach))
)

(method set_row_spacing 
  (of-object Table (Gtk))
  (c-name gtk_table_set_row_spacing)
  (return-type none)
  (parameter (type-and-name guint row))
  (parameter (type-and-name guint spacing))
)

(method get_row_spacing 
  (of-object Table (Gtk))
  (c-name gtk_table_get_row_spacing)
  (return-type guint)
  (parameter (type-and-name guint row))
)

(method set_col_spacing 
  (of-object Table (Gtk))
  (c-name gtk_table_set_col_spacing)
  (return-type none)
  (parameter (type-and-name guint column))
  (parameter (type-and-name guint spacing))
)

(method get_col_spacing 
  (of-object Table (Gtk))
  (c-name gtk_table_get_col_spacing)
  (return-type guint)
  (parameter (type-and-name guint column))
)

(method set_row_spacings 
  (of-object Table (Gtk))
  (c-name gtk_table_set_row_spacings)
  (return-type none)
  (parameter (type-and-name guint spacing))
)

(method get_default_row_spacing 
  (of-object Table (Gtk))
  (c-name gtk_table_get_default_row_spacing)
  (return-type guint)
)

(method set_col_spacings 
  (of-object Table (Gtk))
  (c-name gtk_table_set_col_spacings)
  (return-type none)
  (parameter (type-and-name guint spacing))
)

(method get_default_col_spacing 
  (of-object Table (Gtk))
  (c-name gtk_table_get_default_col_spacing)
  (return-type guint)
)

(method set_homogeneous 
  (of-object Table (Gtk))
  (c-name gtk_table_set_homogeneous)
  (return-type none)
  (parameter (type-and-name gboolean homogeneous))
)

(method get_homogeneous 
  (of-object Table (Gtk))
  (c-name gtk_table_get_homogeneous)
  (return-type gboolean)
)

(function gtk_style_get_type 
  (c-name gtk_style_get_type)
  (return-type GType)
)

(function gtk_style_new 
  (c-name gtk_style_new)
  (is-constructor-of GtkStyle)
  (return-type GtkStyle*)
)

(method copy 
  (of-object Style (Gtk))
  (c-name gtk_style_copy)
  (return-type GtkStyle*)
)

(method attach 
  (of-object Style (Gtk))
  (c-name gtk_style_attach)
  (return-type GtkStyle*)
  (parameter (type-and-name GdkWindow* window))
)

(method detach 
  (of-object Style (Gtk))
  (c-name gtk_style_detach)
  (return-type none)
)

(method ref 
  (of-object Style (Gtk))
  (c-name gtk_style_ref)
  (return-type GtkStyle*)
)

(method unref 
  (of-object Style (Gtk))
  (c-name gtk_style_unref)
  (return-type none)
)

(method get_font 
  (of-object Style (Gtk))
  (c-name gtk_style_get_font)
  (return-type GdkFont*)
)

(method set_font 
  (of-object Style (Gtk))
  (c-name gtk_style_set_font)
  (return-type none)
  (parameter (type-and-name GdkFont* font))
)

(method set_background 
  (of-object Style (Gtk))
  (c-name gtk_style_set_background)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
)

(method apply_default_background 
  (of-object Style (Gtk))
  (c-name gtk_style_apply_default_background)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name gboolean set_bg))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method lookup_icon_set 
  (of-object Style (Gtk))
  (c-name gtk_style_lookup_icon_set)
  (return-type GtkIconSet*)
  (parameter (type-and-name const-gchar* stock_id))
)

(method render_icon 
  (of-object Style (Gtk))
  (c-name gtk_style_render_icon)
  (return-type GdkPixbuf*)
  (parameter (type-and-name const-GtkIconSource* source))
  (parameter (type-and-name GtkTextDirection direction))
  (parameter (type-and-name GtkStateType state))
  (parameter (type-and-name GtkIconSize size))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
)

(function gtk_draw_hline 
  (c-name gtk_draw_hline)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gint x1))
  (parameter (type-and-name gint x2))
  (parameter (type-and-name gint y))
)

(function gtk_draw_vline 
  (c-name gtk_draw_vline)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gint y1_))
  (parameter (type-and-name gint y2_))
  (parameter (type-and-name gint x))
)

(function gtk_draw_shadow 
  (c-name gtk_draw_shadow)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_polygon 
  (c-name gtk_draw_polygon)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkPoint* points))
  (parameter (type-and-name gint npoints))
  (parameter (type-and-name gboolean fill))
)

(function gtk_draw_arrow 
  (c-name gtk_draw_arrow)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_diamond 
  (c-name gtk_draw_diamond)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_box 
  (c-name gtk_draw_box)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_flat_box 
  (c-name gtk_draw_flat_box)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_check 
  (c-name gtk_draw_check)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_option 
  (c-name gtk_draw_option)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_tab 
  (c-name gtk_draw_tab)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_shadow_gap 
  (c-name gtk_draw_shadow_gap)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(function gtk_draw_box_gap 
  (c-name gtk_draw_box_gap)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(function gtk_draw_extension 
  (c-name gtk_draw_extension)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
)

(function gtk_draw_focus 
  (c-name gtk_draw_focus)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_slider 
  (c-name gtk_draw_slider)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)

(function gtk_draw_handle 
  (c-name gtk_draw_handle)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)

(function gtk_draw_expander 
  (c-name gtk_draw_expander)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name GtkExpanderStyle expander_style))
)

(function gtk_draw_layout 
  (c-name gtk_draw_layout)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gboolean use_text))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name PangoLayout* layout))
)

(function gtk_draw_resize_grip 
  (c-name gtk_draw_resize_grip)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkWindowEdge edge))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_hline 
  (c-name gtk_paint_hline)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x1))
  (parameter (type-and-name gint x2))
  (parameter (type-and-name gint y))
)

(function gtk_paint_vline 
  (c-name gtk_paint_vline)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint y1_))
  (parameter (type-and-name gint y2_))
  (parameter (type-and-name gint x))
)

(function gtk_paint_shadow 
  (c-name gtk_paint_shadow)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_polygon 
  (c-name gtk_paint_polygon)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name GdkPoint* points))
  (parameter (type-and-name gint npoints))
  (parameter (type-and-name gboolean fill))
)

(function gtk_paint_arrow 
  (c-name gtk_paint_arrow)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_diamond 
  (c-name gtk_paint_diamond)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_box 
  (c-name gtk_paint_box)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_flat_box 
  (c-name gtk_paint_flat_box)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_check 
  (c-name gtk_paint_check)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_option 
  (c-name gtk_paint_option)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_tab 
  (c-name gtk_paint_tab)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_shadow_gap 
  (c-name gtk_paint_shadow_gap)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(function gtk_paint_box_gap 
  (c-name gtk_paint_box_gap)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(function gtk_paint_extension 
  (c-name gtk_paint_extension)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
)

(function gtk_paint_focus 
  (c-name gtk_paint_focus)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_slider 
  (c-name gtk_paint_slider)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)

(function gtk_paint_handle 
  (c-name gtk_paint_handle)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)

(function gtk_paint_expander 
  (c-name gtk_paint_expander)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name GtkExpanderStyle expander_style))
)

(function gtk_paint_layout 
  (c-name gtk_paint_layout)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gboolean use_text))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name PangoLayout* layout))
)

(function gtk_paint_resize_grip 
  (c-name gtk_paint_resize_grip)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name GdkWindowEdge edge))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_border_get_type 
  (c-name gtk_border_get_type)
  (return-type GType)
)

(function gtk_border_copy 
  (c-name gtk_border_copy)
  (return-type GtkBorder*)
  (parameter (type-and-name const-GtkBorder* border_))
)

(function gtk_draw_string 
  (c-name gtk_draw_string)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name const-gchar* string))
)

(function gtk_paint_string 
  (c-name gtk_paint_string)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name const-gchar* string))
)

(function gtk_stock_add 
  (c-name gtk_stock_add)
  (return-type none)
  (parameter (type-and-name const-GtkStockItem* items))
  (parameter (type-and-name guint n_items))
)

(function gtk_stock_add_static 
  (c-name gtk_stock_add_static)
  (return-type none)
  (parameter (type-and-name const-GtkStockItem* items))
  (parameter (type-and-name guint n_items))
)

(function gtk_stock_lookup 
  (c-name gtk_stock_lookup)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name GtkStockItem* item))
)

(function gtk_stock_list_ids 
  (c-name gtk_stock_list_ids)
  (return-type GSList*)
)

(function gtk_stock_item_copy 
  (c-name gtk_stock_item_copy)
  (return-type GtkStockItem*)
  (parameter (type-and-name const-GtkStockItem* item))
)

(function gtk_statusbar_get_type 
  (c-name gtk_statusbar_get_type)
  (return-type GType)
)

(function gtk_statusbar_new 
  (c-name gtk_statusbar_new)
  (is-constructor-of GtkStatusbar)
  (return-type GtkWidget*)
)

(method get_context_id 
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_get_context_id)
  (return-type guint)
  (parameter (type-and-name const-gchar* context_description))
)

(method push 
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_push)
  (return-type guint)
  (parameter (type-and-name guint context_id))
  (parameter (type-and-name const-gchar* text))
)

(method pop 
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_pop)
  (return-type none)
  (parameter (type-and-name guint context_id))
)

(method remove 
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_remove)
  (return-type none)
  (parameter (type-and-name guint context_id))
  (parameter (type-and-name guint message_id))
)

(method set_has_resize_grip 
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_set_has_resize_grip)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_has_resize_grip 
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_get_has_resize_grip)
  (return-type gboolean)
)

(function gtk_spin_button_get_type 
  (c-name gtk_spin_button_get_type)
  (return-type GType)
)

(method configure 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_configure)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
  (parameter (type-and-name gdouble climb_rate))
  (parameter (type-and-name guint digits))
)

(function gtk_spin_button_new 
  (c-name gtk_spin_button_new)
  (is-constructor-of GtkSpinButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment))
  (parameter (type-and-name gdouble climb_rate))
  (parameter (type-and-name guint digits))
)

(function gtk_spin_button_new_with_range 
  (c-name gtk_spin_button_new_with_range)
  (is-constructor-of GtkSpinButton)
  (return-type GtkWidget*)
  (parameter (type-and-name gdouble min))
  (parameter (type-and-name gdouble max))
  (parameter (type-and-name gdouble step))
)

(method set_adjustment 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_adjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_adjustment 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_adjustment)
  (return-type GtkAdjustment*)
)

(method set_digits 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_digits)
  (return-type none)
  (parameter (type-and-name guint digits))
)

(method get_digits 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_digits)
  (return-type guint)
)

(method set_increments 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_increments)
  (return-type none)
  (parameter (type-and-name gdouble step))
  (parameter (type-and-name gdouble page))
)

(method get_increments 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_increments)
  (return-type none)
  (parameter (type-and-name gdouble* step))
  (parameter (type-and-name gdouble* page))
)

(method set_range 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_range)
  (return-type none)
  (parameter (type-and-name gdouble min))
  (parameter (type-and-name gdouble max))
)

(method get_range 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_range)
  (return-type none)
  (parameter (type-and-name gdouble* min))
  (parameter (type-and-name gdouble* max))
)

(method get_value 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_value)
  (return-type gdouble)
)

(method get_value_as_int 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_value_as_int)
  (return-type gint)
)

(method set_value 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_value)
  (return-type none)
  (parameter (type-and-name gdouble value))
)

(method set_update_policy 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_update_policy)
  (return-type none)
  (parameter (type-and-name GtkSpinButtonUpdatePolicy policy))
)

(method get_update_policy 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_update_policy)
  (return-type GtkSpinButtonUpdatePolicy)
)

(method set_numeric 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_numeric)
  (return-type none)
  (parameter (type-and-name gboolean numeric))
)

(method get_numeric 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_numeric)
  (return-type gboolean)
)

(method spin 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_spin)
  (return-type none)
  (parameter (type-and-name GtkSpinType direction))
  (parameter (type-and-name gdouble increment))
)

(method set_wrap 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_wrap)
  (return-type none)
  (parameter (type-and-name gboolean wrap))
)

(method get_wrap 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_wrap)
  (return-type gboolean)
)

(method set_snap_to_ticks 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_snap_to_ticks)
  (return-type none)
  (parameter (type-and-name gboolean snap_to_ticks))
)

(method get_snap_to_ticks 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_snap_to_ticks)
  (return-type gboolean)
)

(method update 
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_update)
  (return-type none)
)

(function gtk_socket_get_type 
  (c-name gtk_socket_get_type)
  (return-type GType)
)

(function gtk_socket_new 
  (c-name gtk_socket_new)
  (is-constructor-of GtkSocket)
  (return-type GtkWidget*)
)

(method add_id 
  (of-object Socket (Gtk))
  (c-name gtk_socket_add_id)
  (return-type none)
  (parameter (type-and-name GdkNativeWindow window_id))
)

(method get_id 
  (of-object Socket (Gtk))
  (c-name gtk_socket_get_id)
  (return-type GdkNativeWindow)
)

(method steal 
  (of-object Socket (Gtk))
  (c-name gtk_socket_steal)
  (return-type none)
  (parameter (type-and-name GdkNativeWindow wid))
)

(function gtk_size_group_get_type 
  (c-name gtk_size_group_get_type)
  (return-type GType)
)

(function gtk_size_group_new 
  (c-name gtk_size_group_new)
  (is-constructor-of GtkSizeGroup)
  (return-type GtkSizeGroup*)
  (parameter (type-and-name GtkSizeGroupMode mode))
)

(method set_mode 
  (of-object SizeGroup (Gtk))
  (c-name gtk_size_group_set_mode)
  (return-type none)
  (parameter (type-and-name GtkSizeGroupMode mode))
)

(method get_mode 
  (of-object SizeGroup (Gtk))
  (c-name gtk_size_group_get_mode)
  (return-type GtkSizeGroupMode)
)

(method add_widget 
  (of-object SizeGroup (Gtk))
  (c-name gtk_size_group_add_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method remove_widget 
  (of-object SizeGroup (Gtk))
  (c-name gtk_size_group_remove_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_signal_name 
  (c-name gtk_signal_name)
  (return-type xx#define)
  (parameter (type-and-name signal_id))
)

(function gtk_signal_new 
  (c-name gtk_signal_new)
  (return-type guint)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalRunType signal_flags))
  (parameter (type-and-name GtkType object_type))
  (parameter (type-and-name guint function_offset))
  (parameter (type-and-name GtkSignalMarshaller marshaller))
  (parameter (type-and-name GtkType return_val))
  (parameter (type-and-name guint n_args))
;  (varargs t)
)

(function gtk_signal_emit_stop_by_name 
  (c-name gtk_signal_emit_stop_by_name)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* name))
)

(function gtk_signal_connect_object_while_alive 
  (c-name gtk_signal_connect_object_while_alive)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name GtkObject* alive_object))
)

(function gtk_signal_connect_while_alive 
  (c-name gtk_signal_connect_while_alive)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name gpointer func_data))
  (parameter (type-and-name GtkObject* alive_object))
)

(function gtk_signal_connect_full 
  (c-name gtk_signal_connect_full)
  (return-type gulong)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name GtkCallbackMarshal unsupported))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy_func))
  (parameter (type-and-name gint object_signal))
  (parameter (type-and-name gint after))
)

(function gtk_signal_emitv 
  (c-name gtk_signal_emitv)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name guint signal_id))
  (parameter (type-and-name GtkArg* args))
)

(function gtk_signal_emit 
  (c-name gtk_signal_emit)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name guint signal_id))
;  (varargs t)
)

(function gtk_signal_emit_by_name 
  (c-name gtk_signal_emit_by_name)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* name))
;  (varargs t)
)

(function gtk_signal_emitv_by_name 
  (c-name gtk_signal_emitv_by_name)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkArg* args))
)

(function gtk_signal_compat_matched 
  (c-name gtk_signal_compat_matched)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GSignalMatchType match))
  (parameter (type-and-name guint action))
)

(function gtk_settings_get_type 
  (c-name gtk_settings_get_type)
  (return-type GType)
)

(function gtk_settings_get_default 
  (c-name gtk_settings_get_default)
  (return-type GtkSettings*)
)

(function gtk_settings_get_for_screen 
  (c-name gtk_settings_get_for_screen)
  (return-type GtkSettings*)
  (parameter (type-and-name GdkScreen* screen))
)

(function gtk_settings_install_property 
  (c-name gtk_settings_install_property)
  (return-type none)
  (parameter (type-and-name GParamSpec* pspec))
)

(function gtk_settings_install_property_parser 
  (c-name gtk_settings_install_property_parser)
  (return-type none)
  (parameter (type-and-name GParamSpec* pspec))
  (parameter (type-and-name GtkRcPropertyParser parser))
)

(function gtk_rc_property_parse_color 
  (c-name gtk_rc_property_parse_color)
  (return-type gboolean)
  (parameter (type-and-name const-GParamSpec* pspec))
  (parameter (type-and-name const-GString* gstring))
  (parameter (type-and-name GValue* property_value))
)

(function gtk_rc_property_parse_enum 
  (c-name gtk_rc_property_parse_enum)
  (return-type gboolean)
  (parameter (type-and-name const-GParamSpec* pspec))
  (parameter (type-and-name const-GString* gstring))
  (parameter (type-and-name GValue* property_value))
)

(function gtk_rc_property_parse_flags 
  (c-name gtk_rc_property_parse_flags)
  (return-type gboolean)
  (parameter (type-and-name const-GParamSpec* pspec))
  (parameter (type-and-name const-GString* gstring))
  (parameter (type-and-name GValue* property_value))
)

(function gtk_rc_property_parse_requisition 
  (c-name gtk_rc_property_parse_requisition)
  (return-type gboolean)
  (parameter (type-and-name const-GParamSpec* pspec))
  (parameter (type-and-name const-GString* gstring))
  (parameter (type-and-name GValue* property_value))
)

(function gtk_rc_property_parse_border 
  (c-name gtk_rc_property_parse_border)
  (return-type gboolean)
  (parameter (type-and-name const-GParamSpec* pspec))
  (parameter (type-and-name const-GString* gstring))
  (parameter (type-and-name GValue* property_value))
)

(method set_property_value 
  (of-object Settings (Gtk))
  (c-name gtk_settings_set_property_value)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name const-GtkSettingsValue* svalue))
)

(method set_string_property 
  (of-object Settings (Gtk))
  (c-name gtk_settings_set_string_property)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name const-gchar* v_string))
  (parameter (type-and-name const-gchar* origin))
)

(method set_long_property 
  (of-object Settings (Gtk))
  (c-name gtk_settings_set_long_property)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name glong v_long))
  (parameter (type-and-name const-gchar* origin))
)

(method set_double_property 
  (of-object Settings (Gtk))
  (c-name gtk_settings_set_double_property)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name gdouble v_double))
  (parameter (type-and-name const-gchar* origin))
)

(function gtk_separator_menu_item_get_type 
  (c-name gtk_separator_menu_item_get_type)
  (return-type GType)
)

(function gtk_separator_menu_item_new 
  (c-name gtk_separator_menu_item_new)
  (is-constructor-of GtkSeparatorMenuItem)
  (return-type GtkWidget*)
)

(function gtk_separator_get_type 
  (c-name gtk_separator_get_type)
  (return-type GType)
)

(function gtk_target_list_new 
  (c-name gtk_target_list_new)
  (is-constructor-of GtkTargetList)
  (return-type GtkTargetList*)
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name guint ntargets))
)

(function gtk_selection_owner_set 
  (c-name gtk_selection_owner_set)
  (return-type gboolean)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name guint32 time_))
)

(function gtk_selection_owner_set_for_display 
  (c-name gtk_selection_owner_set_for_display)
  (return-type gboolean)
  (parameter (type-and-name GdkDisplay* display))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name guint32 time_))
)

(function gtk_selection_add_target 
  (c-name gtk_selection_add_target)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint info))
)

(function gtk_selection_add_targets 
  (c-name gtk_selection_add_targets)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name guint ntargets))
)

(function gtk_selection_clear_targets 
  (c-name gtk_selection_clear_targets)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkAtom selection))
)

(function gtk_selection_convert 
  (c-name gtk_selection_convert)
  (return-type gboolean)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint32 time_))
)

(function gtk_selection_remove_all 
  (c-name gtk_selection_remove_all)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_selection_clear 
  (c-name gtk_selection_clear)
  (return-type gboolean)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkEventSelection* event))
)

(function gtk_selection_data_get_type 
  (c-name gtk_selection_data_get_type)
  (return-type GType)
)

(function gtk_scrolled_window_get_type 
  (c-name gtk_scrolled_window_get_type)
  (return-type GType)
)

(function gtk_scrolled_window_new 
  (c-name gtk_scrolled_window_new)
  (is-constructor-of GtkScrolledWindow)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* hadjustment))
  (parameter (type-and-name GtkAdjustment* vadjustment))
)

(method set_hadjustment 
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* hadjustment))
)

(method set_vadjustment 
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* hadjustment))
)

(method get_hadjustment 
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment 
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_policy 
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_policy)
  (return-type none)
  (parameter (type-and-name GtkPolicyType hscrollbar_policy))
  (parameter (type-and-name GtkPolicyType vscrollbar_policy))
)

(method get_policy 
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_get_policy)
  (return-type none)
  (parameter (type-and-name GtkPolicyType* hscrollbar_policy))
  (parameter (type-and-name GtkPolicyType* vscrollbar_policy))
)

(method set_placement 
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_placement)
  (return-type none)
  (parameter (type-and-name GtkCornerType window_placement))
)

(method get_placement 
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_get_placement)
  (return-type GtkCornerType)
)

(method set_shadow_type 
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)

(method get_shadow_type 
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_get_shadow_type)
  (return-type GtkShadowType)
)

(method add_with_viewport 
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_add_with_viewport)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(function gtk_scrollbar_get_type 
  (c-name gtk_scrollbar_get_type)
  (return-type GType)
)

(function gtk_scale_get_type 
  (c-name gtk_scale_get_type)
  (return-type GType)
)

(method set_digits 
  (of-object Scale (Gtk))
  (c-name gtk_scale_set_digits)
  (return-type none)
  (parameter (type-and-name gint digits))
)

(method get_digits 
  (of-object Scale (Gtk))
  (c-name gtk_scale_get_digits)
  (return-type gint)
)

(method set_draw_value 
  (of-object Scale (Gtk))
  (c-name gtk_scale_set_draw_value)
  (return-type none)
  (parameter (type-and-name gboolean draw_value))
)

(method get_draw_value 
  (of-object Scale (Gtk))
  (c-name gtk_scale_get_draw_value)
  (return-type gboolean)
)

(method set_value_pos 
  (of-object Scale (Gtk))
  (c-name gtk_scale_set_value_pos)
  (return-type none)
  (parameter (type-and-name GtkPositionType pos))
)

(method get_value_pos 
  (of-object Scale (Gtk))
  (c-name gtk_scale_get_value_pos)
  (return-type GtkPositionType)
)

(function gtk_ruler_get_type 
  (c-name gtk_ruler_get_type)
  (return-type GType)
)

(method set_metric 
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_set_metric)
  (return-type none)
  (parameter (type-and-name GtkMetricType metric))
)

(method set_range 
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_set_range)
  (return-type none)
  (parameter (type-and-name gdouble lower))
  (parameter (type-and-name gdouble upper))
  (parameter (type-and-name gdouble position))
  (parameter (type-and-name gdouble max_size))
)

(method draw_ticks 
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_draw_ticks)
  (return-type none)
)

(method draw_pos 
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_draw_pos)
  (return-type none)
)

(method get_metric 
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_get_metric)
  (return-type GtkMetricType)
)

(method get_range 
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_get_range)
  (return-type none)
  (parameter (type-and-name gdouble* lower))
  (parameter (type-and-name gdouble* upper))
  (parameter (type-and-name gdouble* position))
  (parameter (type-and-name gdouble* max_size))
)

(function gtk_rc_add_default_file 
  (c-name gtk_rc_add_default_file)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(function gtk_rc_set_default_files 
  (c-name gtk_rc_set_default_files)
  (return-type none)
  (parameter (type-and-name gchar** filenames))
)

(function gtk_rc_get_default_files 
  (c-name gtk_rc_get_default_files)
  (return-type gchar**)
)

(function gtk_rc_get_style 
  (c-name gtk_rc_get_style)
  (return-type GtkStyle*)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_rc_get_style_by_paths 
  (c-name gtk_rc_get_style_by_paths)
  (return-type GtkStyle*)
  (parameter (type-and-name GtkSettings* settings))
  (parameter (type-and-name const-char* widget_path))
  (parameter (type-and-name const-char* class_path))
  (parameter (type-and-name GType type))
)

(function gtk_rc_reparse_all_for_settings 
  (c-name gtk_rc_reparse_all_for_settings)
  (return-type gboolean)
  (parameter (type-and-name GtkSettings* settings))
  (parameter (type-and-name gboolean force_load))
)

(function gtk_rc_find_pixmap_in_path 
  (c-name gtk_rc_find_pixmap_in_path)
  (return-type gchar*)
  (parameter (type-and-name GtkSettings* settings))
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name const-gchar* pixmap_file))
)

(function gtk_rc_parse 
  (c-name gtk_rc_parse)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(function gtk_rc_parse_string 
  (c-name gtk_rc_parse_string)
  (return-type none)
  (parameter (type-and-name const-gchar* rc_string))
)

(function gtk_rc_reparse_all 
  (c-name gtk_rc_reparse_all)
  (return-type gboolean)
)

(function gtk_rc_add_widget_name_style 
  (c-name gtk_rc_add_widget_name_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* rc_style))
  (parameter (type-and-name const-gchar* pattern))
)

(function gtk_rc_add_widget_class_style 
  (c-name gtk_rc_add_widget_class_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* rc_style))
  (parameter (type-and-name const-gchar* pattern))
)

(function gtk_rc_add_class_style 
  (c-name gtk_rc_add_class_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* rc_style))
  (parameter (type-and-name const-gchar* pattern))
)

(function gtk_rc_style_get_type 
  (c-name gtk_rc_style_get_type)
  (return-type GType)
)

(function gtk_rc_style_new 
  (c-name gtk_rc_style_new)
  (is-constructor-of GtkRcStyle)
  (return-type GtkRcStyle*)
)

(method copy 
  (of-object RcStyle (Gtk))
  (c-name gtk_rc_style_copy)
  (return-type GtkRcStyle*)
)

(method ref 
  (of-object RcStyle (Gtk))
  (c-name gtk_rc_style_ref)
  (return-type none)
)

(method unref 
  (of-object RcStyle (Gtk))
  (c-name gtk_rc_style_unref)
  (return-type none)
)

(function gtk_rc_find_module_in_path 
  (c-name gtk_rc_find_module_in_path)
  (return-type gchar*)
  (parameter (type-and-name const-gchar* module_file))
)

(function gtk_rc_get_theme_dir 
  (c-name gtk_rc_get_theme_dir)
  (return-type gchar*)
)

(function gtk_rc_get_module_dir 
  (c-name gtk_rc_get_module_dir)
  (return-type gchar*)
)

(function gtk_rc_get_im_module_path 
  (c-name gtk_rc_get_im_module_path)
  (return-type gchar*)
)

(function gtk_rc_get_im_module_file 
  (c-name gtk_rc_get_im_module_file)
  (return-type gchar*)
)

(function gtk_rc_scanner_new 
  (c-name gtk_rc_scanner_new)
  (return-type GScanner*)
)

(function gtk_rc_parse_color 
  (c-name gtk_rc_parse_color)
  (return-type guint)
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name GdkColor* color))
)

(function gtk_rc_parse_state 
  (c-name gtk_rc_parse_state)
  (return-type guint)
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name GtkStateType* state))
)

(function gtk_rc_parse_priority 
  (c-name gtk_rc_parse_priority)
  (return-type guint)
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name GtkPathPriorityType* priority))
)

(function gtk_range_get_type 
  (c-name gtk_range_get_type)
  (return-type GType)
)

(method set_update_policy 
  (of-object Range (Gtk))
  (c-name gtk_range_set_update_policy)
  (return-type none)
  (parameter (type-and-name GtkUpdateType policy))
)

(method get_update_policy 
  (of-object Range (Gtk))
  (c-name gtk_range_get_update_policy)
  (return-type GtkUpdateType)
)

(method set_adjustment 
  (of-object Range (Gtk))
  (c-name gtk_range_set_adjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_adjustment 
  (of-object Range (Gtk))
  (c-name gtk_range_get_adjustment)
  (return-type GtkAdjustment*)
)

(method set_inverted 
  (of-object Range (Gtk))
  (c-name gtk_range_set_inverted)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_inverted 
  (of-object Range (Gtk))
  (c-name gtk_range_get_inverted)
  (return-type gboolean)
)

(method set_increments 
  (of-object Range (Gtk))
  (c-name gtk_range_set_increments)
  (return-type none)
  (parameter (type-and-name gdouble step))
  (parameter (type-and-name gdouble page))
)

(method set_range 
  (of-object Range (Gtk))
  (c-name gtk_range_set_range)
  (return-type none)
  (parameter (type-and-name gdouble min))
  (parameter (type-and-name gdouble max))
)

(method set_value 
  (of-object Range (Gtk))
  (c-name gtk_range_set_value)
  (return-type none)
  (parameter (type-and-name gdouble value))
)

(method get_value 
  (of-object Range (Gtk))
  (c-name gtk_range_get_value)
  (return-type gdouble)
)

(function gtk_radio_menu_item_get_type 
  (c-name gtk_radio_menu_item_get_type)
  (return-type GType)
)

(function gtk_radio_menu_item_new 
  (c-name gtk_radio_menu_item_new)
  (is-constructor-of GtkRadioMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
)

(function gtk_radio_menu_item_new_with_label 
  (c-name gtk_radio_menu_item_new_with_label)
  (is-constructor-of GtkRadioMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
  (parameter (type-and-name const-gchar* label))
)

(function gtk_radio_menu_item_new_with_mnemonic 
  (c-name gtk_radio_menu_item_new_with_mnemonic)
  (is-constructor-of GtkRadioMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
  (parameter (type-and-name const-gchar* label))
)

(method m_get_group 
  (of-object RadioMenuItem (Gtk))
  (c-name gtk_radio_menu_item_get_group)
  (return-type GSList*)
)

(method m_set_group 
  (of-object RadioMenuItem (Gtk))
  (c-name gtk_radio_menu_item_set_group)
  (return-type none)
  (parameter (type-and-name GSList* group))
)

(function gtk_radio_button_get_type 
  (c-name gtk_radio_button_get_type)
  (return-type GType)
)

(function gtk_radio_button_new 
  (c-name gtk_radio_button_new)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
)

(function gtk_radio_button_new_from_widget 
  (c-name gtk_radio_button_new_from_widget)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkRadioButton* group))
)

(function gtk_radio_button_new_with_label 
  (c-name gtk_radio_button_new_with_label)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
  (parameter (type-and-name const-gchar* label))
)

(function gtk_radio_button_new_with_label_from_widget 
  (c-name gtk_radio_button_new_with_label_from_widget)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkRadioButton* group))
  (parameter (type-and-name const-gchar* label))
)

(function gtk_radio_button_new_with_mnemonic 
  (c-name gtk_radio_button_new_with_mnemonic)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
  (parameter (type-and-name const-gchar* label))
)

(function gtk_radio_button_new_with_mnemonic_from_widget 
  (c-name gtk_radio_button_new_with_mnemonic_from_widget)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkRadioButton* group))
  (parameter (type-and-name const-gchar* label))
)

(method get_group 
  (of-object RadioButton (Gtk))
  (c-name gtk_radio_button_get_group)
  (return-type GSList*)
)

(method set_group 
  (of-object RadioButton (Gtk))
  (c-name gtk_radio_button_set_group)
  (return-type none)
  (parameter (type-and-name GSList* group))
)

(function gtk_progress_get_type 
  (c-name gtk_progress_get_type)
  (return-type GType)
)

(method set_show_text 
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_show_text)
  (return-type none)
  (parameter (type-and-name gboolean show_text))
)

(method set_text_alignment 
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_text_alignment)
  (return-type none)
  (parameter (type-and-name gfloat x_align))
  (parameter (type-and-name gfloat y_align))
)

(method set_format_string 
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_format_string)
  (return-type none)
  (parameter (type-and-name const-gchar* format))
)

(method set_adjustment 
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_adjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method configure 
  (of-object Progress (Gtk))
  (c-name gtk_progress_configure)
  (return-type none)
  (parameter (type-and-name gdouble value))
  (parameter (type-and-name gdouble min))
  (parameter (type-and-name gdouble max))
)

(method set_percentage 
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_percentage)
  (return-type none)
  (parameter (type-and-name gdouble percentage))
)

(method set_value 
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_value)
  (return-type none)
  (parameter (type-and-name gdouble value))
)

(method get_value 
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_value)
  (return-type gdouble)
)

(method set_activity_mode 
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_activity_mode)
  (return-type none)
  (parameter (type-and-name gboolean activity_mode))
)

(method get_current_text 
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_current_text)
  (return-type gchar*)
)

(method get_text_from_value 
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_text_from_value)
  (return-type gchar*)
  (parameter (type-and-name gdouble value))
)

(method get_current_percentage 
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_current_percentage)
  (return-type gdouble)
)

(method get_percentage_from_value 
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_percentage_from_value)
  (return-type gdouble)
  (parameter (type-and-name gdouble value))
)

(function gtk_progress_bar_get_type 
  (c-name gtk_progress_bar_get_type)
  (return-type GType)
)

(function gtk_progress_bar_new 
  (c-name gtk_progress_bar_new)
  (is-constructor-of GtkProgressBar)
  (return-type GtkWidget*)
)

(method pulse 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_pulse)
  (return-type none)
)

(method set_text 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(method set_fraction 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_fraction)
  (return-type none)
  (parameter (type-and-name gdouble fraction))
)

(method set_pulse_step 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_pulse_step)
  (return-type none)
  (parameter (type-and-name gdouble fraction))
)

(method set_orientation 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_orientation)
  (return-type none)
  (parameter (type-and-name GtkProgressBarOrientation orientation))
)

(method get_text 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_get_text)
  (return-type gchar*)
)

(method get_fraction 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_get_fraction)
  (return-type gdouble)
)

(method get_pulse_step 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_get_pulse_step)
  (return-type gdouble)
)

(method get_orientation 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_get_orientation)
  (return-type GtkProgressBarOrientation)
)

(function gtk_progress_bar_new_with_adjustment 
  (c-name gtk_progress_bar_new_with_adjustment)
  (is-constructor-of GtkProgressBar)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_bar_style 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_bar_style)
  (return-type none)
  (parameter (type-and-name GtkProgressBarStyle style))
)

(method set_discrete_blocks 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_discrete_blocks)
  (return-type none)
  (parameter (type-and-name guint blocks))
)

(method set_activity_step 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_activity_step)
  (return-type none)
  (parameter (type-and-name guint step))
)

(method set_activity_blocks 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_activity_blocks)
  (return-type none)
  (parameter (type-and-name guint blocks))
)

(method update 
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_update)
  (return-type none)
  (parameter (type-and-name gdouble percentage))
)

(function gtk_preview_get_type 
  (c-name gtk_preview_get_type)
  (return-type GtkType)
)

(function gtk_preview_uninit 
  (c-name gtk_preview_uninit)
  (return-type none)
)

(function gtk_preview_new 
  (c-name gtk_preview_new)
  (is-constructor-of GtkPreview)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkPreviewType type))
)

(method size 
  (of-object Preview (Gtk))
  (c-name gtk_preview_size)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method put 
  (of-object Preview (Gtk))
  (c-name gtk_preview_put)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GdkGC* gc))
  (parameter (type-and-name gint srcx))
  (parameter (type-and-name gint srcy))
  (parameter (type-and-name gint destx))
  (parameter (type-and-name gint desty))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_row 
  (of-object Preview (Gtk))
  (c-name gtk_preview_draw_row)
  (return-type none)
  (parameter (type-and-name guchar* data))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint w))
)

(method set_expand 
  (of-object Preview (Gtk))
  (c-name gtk_preview_set_expand)
  (return-type none)
  (parameter (type-and-name gboolean expand))
)

(function gtk_preview_set_gamma 
  (c-name gtk_preview_set_gamma)
  (return-type none)
  (parameter (type-and-name double gamma_))
)

(function gtk_preview_set_color_cube 
  (c-name gtk_preview_set_color_cube)
  (return-type none)
  (parameter (type-and-name guint nred_shades))
  (parameter (type-and-name guint ngreen_shades))
  (parameter (type-and-name guint nblue_shades))
  (parameter (type-and-name guint ngray_shades))
)

(function gtk_preview_set_install_cmap 
  (c-name gtk_preview_set_install_cmap)
  (return-type none)
  (parameter (type-and-name gint install_cmap))
)

(function gtk_preview_set_reserved 
  (c-name gtk_preview_set_reserved)
  (return-type none)
  (parameter (type-and-name gint nreserved))
)

(method set_dither 
  (of-object Preview (Gtk))
  (c-name gtk_preview_set_dither)
  (return-type none)
  (parameter (type-and-name GdkRgbDither dither))
)

(function gtk_preview_get_visual 
  (c-name gtk_preview_get_visual)
  (return-type GdkVisual*)
)

(function gtk_preview_get_cmap 
  (c-name gtk_preview_get_cmap)
  (return-type GdkColormap*)
)

(function gtk_preview_get_info 
  (c-name gtk_preview_get_info)
  (return-type GtkPreviewInfo*)
)

(function gtk_preview_reset 
  (c-name gtk_preview_reset)
  (return-type none)
)

(function gtk_plug_get_type 
  (c-name gtk_plug_get_type)
  (return-type GType)
)

(method construct 
  (of-object Plug (Gtk))
  (c-name gtk_plug_construct)
  (return-type none)
  (parameter (type-and-name GdkNativeWindow socket_id))
)

(function gtk_plug_new 
  (c-name gtk_plug_new)
  (is-constructor-of GtkPlug)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkNativeWindow socket_id))
)

(method construct_for_display 
  (of-object Plug (Gtk))
  (c-name gtk_plug_construct_for_display)
  (return-type none)
  (parameter (type-and-name GdkDisplay* display))
  (parameter (type-and-name GdkNativeWindow socket_id))
)

(function gtk_plug_new_for_display 
  (c-name gtk_plug_new_for_display)
  (is-constructor-of GtkPlug)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkDisplay* display))
  (parameter (type-and-name GdkNativeWindow socket_id))
)

(method get_id 
  (of-object Plug (Gtk))
  (c-name gtk_plug_get_id)
  (return-type GdkNativeWindow)
)

(function gtk_pixmap_get_type 
  (c-name gtk_pixmap_get_type)
  (return-type GtkType)
)

(function gtk_pixmap_new 
  (c-name gtk_pixmap_new)
  (is-constructor-of GtkPixmap)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method set 
  (of-object Pixmap (Gtk))
  (c-name gtk_pixmap_set)
  (return-type none)
  (parameter (type-and-name GdkPixmap* val))
  (parameter (type-and-name GdkBitmap* mask))
)

(method get 
  (of-object Pixmap (Gtk))
  (c-name gtk_pixmap_get)
  (return-type none)
  (parameter (type-and-name GdkPixmap** val))
  (parameter (type-and-name GdkBitmap** mask))
)

(method set_build_insensitive 
  (of-object Pixmap (Gtk))
  (c-name gtk_pixmap_set_build_insensitive)
  (return-type none)
  (parameter (type-and-name gboolean build))
)

(function gtk_paned_get_type 
  (c-name gtk_paned_get_type)
  (return-type GType)
)

(method add1 
  (of-object Paned (Gtk))
  (c-name gtk_paned_add1)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method add2 
  (of-object Paned (Gtk))
  (c-name gtk_paned_add2)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method pack1 
  (of-object Paned (Gtk))
  (c-name gtk_paned_pack1)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean resize))
  (parameter (type-and-name gboolean shrink))
)

(method pack2 
  (of-object Paned (Gtk))
  (c-name gtk_paned_pack2)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean resize))
  (parameter (type-and-name gboolean shrink))
)

(method get_position 
  (of-object Paned (Gtk))
  (c-name gtk_paned_get_position)
  (return-type gint)
)

(method set_position 
  (of-object Paned (Gtk))
  (c-name gtk_paned_set_position)
  (return-type none)
  (parameter (type-and-name gint position))
)

(method compute_position 
  (of-object Paned (Gtk))
  (c-name gtk_paned_compute_position)
  (return-type none)
  (parameter (type-and-name gint allocation))
  (parameter (type-and-name gint child1_req))
  (parameter (type-and-name gint child2_req))
)

(function gtk_option_menu_get_type 
  (c-name gtk_option_menu_get_type)
  (return-type GType)
)

(function gtk_option_menu_new 
  (c-name gtk_option_menu_new)
  (is-constructor-of GtkOptionMenu)
  (return-type GtkWidget*)
)

(method get_menu 
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_get_menu)
  (return-type GtkWidget*)
)

(method set_menu 
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_set_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* menu))
)

(method remove_menu 
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_remove_menu)
  (return-type none)
)

(method get_history 
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_get_history)
  (return-type gint)
)

(method set_history 
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_set_history)
  (return-type none)
  (parameter (type-and-name guint index_))
)

(function gtk_old_editable_get_type 
  (c-name gtk_old_editable_get_type)
  (return-type GtkType)
)

(method claim_selection 
  (of-object OldEditable (Gtk))
  (c-name gtk_old_editable_claim_selection)
  (return-type none)
  (parameter (type-and-name gboolean claim))
  (parameter (type-and-name guint32 time_))
)

(method changed 
  (of-object OldEditable (Gtk))
  (c-name gtk_old_editable_changed)
  (return-type none)
)

(function gtk_object_get_type 
  (c-name gtk_object_get_type)
  (return-type GtkType)
)

(function gtk_object_new 
  (c-name gtk_object_new)
  (is-constructor-of GtkObject)
  (return-type GtkObject*)
  (parameter (type-and-name GtkType type))
  (parameter (type-and-name const-gchar* first_property_name))
;  (varargs t)
)

(method sink 
  (of-object Object (Gtk))
  (c-name gtk_object_sink)
  (return-type none)
)

(method destroy 
  (of-object Object (Gtk))
  (c-name gtk_object_destroy)
  (return-type none)
)

(method ref 
  (of-object Object (Gtk))
  (c-name gtk_object_ref)
  (return-type GtkObject*)
)

(method unref 
  (of-object Object (Gtk))
  (c-name gtk_object_unref)
  (return-type none)
)

(method weakref 
  (of-object Object (Gtk))
  (c-name gtk_object_weakref)
  (return-type none)
  (parameter (type-and-name GtkDestroyNotify notify))
  (parameter (type-and-name gpointer data))
)

(method weakunref 
  (of-object Object (Gtk))
  (c-name gtk_object_weakunref)
  (return-type none)
  (parameter (type-and-name GtkDestroyNotify notify))
  (parameter (type-and-name gpointer data))
)

(method set_data 
  (of-object Object (Gtk))
  (c-name gtk_object_set_data)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
  (parameter (type-and-name gpointer data))
)

(method set_data_full 
  (of-object Object (Gtk))
  (c-name gtk_object_set_data_full)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method remove_data 
  (of-object Object (Gtk))
  (c-name gtk_object_remove_data)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
)

(method get_data 
  (of-object Object (Gtk))
  (c-name gtk_object_get_data)
  (return-type gpointer)
  (parameter (type-and-name const-gchar* key))
)

(method remove_no_notify 
  (of-object Object (Gtk))
  (c-name gtk_object_remove_no_notify)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
)

(method set_user_data 
  (of-object Object (Gtk))
  (c-name gtk_object_set_user_data)
  (return-type none)
  (parameter (type-and-name gpointer data))
)

(method get_user_data 
  (of-object Object (Gtk))
  (c-name gtk_object_get_user_data)
  (return-type gpointer)
)

(method set_data_by_id 
  (of-object Object (Gtk))
  (c-name gtk_object_set_data_by_id)
  (return-type none)
  (parameter (type-and-name GQuark data_id))
  (parameter (type-and-name gpointer data))
)

(method set_data_by_id_full 
  (of-object Object (Gtk))
  (c-name gtk_object_set_data_by_id_full)
  (return-type none)
  (parameter (type-and-name GQuark data_id))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method get_data_by_id 
  (of-object Object (Gtk))
  (c-name gtk_object_get_data_by_id)
  (return-type gpointer)
  (parameter (type-and-name GQuark data_id))
)

(method remove_data_by_id 
  (of-object Object (Gtk))
  (c-name gtk_object_remove_data_by_id)
  (return-type none)
  (parameter (type-and-name GQuark data_id))
)

(method remove_no_notify_by_id 
  (of-object Object (Gtk))
  (c-name gtk_object_remove_no_notify_by_id)
  (return-type none)
  (parameter (type-and-name GQuark key_id))
)

(method get 
  (of-object Object (Gtk))
  (c-name gtk_object_get)
  (return-type none)
  (parameter (type-and-name const-gchar* first_property_name))
 ; (varargs t)
)

(method set 
  (of-object Object (Gtk))
  (c-name gtk_object_set)
  (return-type none)
  (parameter (type-and-name const-gchar* first_property_name))
 ; (varargs t)
)

(function gtk_object_add_arg_type 
  (c-name gtk_object_add_arg_type)
  (return-type none)
  (parameter (type-and-name const-gchar* arg_name))
  (parameter (type-and-name GtkType arg_type))
  (parameter (type-and-name guint arg_flags))
  (parameter (type-and-name guint arg_id))
)

(function gtk_notebook_get_type 
  (c-name gtk_notebook_get_type)
  (return-type GType)
)

(function gtk_notebook_new 
  (c-name gtk_notebook_new)
  (is-constructor-of GtkNotebook)
  (return-type GtkWidget*)
)

(method append_page 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_append_page)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
)

(method append_page_menu 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_append_page_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name GtkWidget* menu_label))
)

(method prepend_page 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_prepend_page)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
)

(method prepend_page_menu 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_prepend_page_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name GtkWidget* menu_label))
)

(method insert_page 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_insert_page)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name gint position))
)

(method insert_page_menu 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_insert_page_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name GtkWidget* menu_label))
  (parameter (type-and-name gint position))
)

(method remove_page 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_remove_page)
  (return-type none)
  (parameter (type-and-name gint page_num))
)

(method get_current_page 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_current_page)
  (return-type gint)
)

(method get_nth_page 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_nth_page)
  (return-type GtkWidget*)
  (parameter (type-and-name gint page_num))
)

(method get_n_pages 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_n_pages)
  (return-type gint)
)

(method page_num 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_page_num)
  (return-type gint)
  (parameter (type-and-name GtkWidget* child))
)

(method set_current_page 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_current_page)
  (return-type none)
  (parameter (type-and-name gint page_num))
)

(method next_page 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_next_page)
  (return-type none)
)

(method prev_page 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_prev_page)
  (return-type none)
)

(method set_show_border 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_show_border)
  (return-type none)
  (parameter (type-and-name gboolean show_border))
)

(method get_show_border 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_show_border)
  (return-type gboolean)
)

(method set_show_tabs 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_show_tabs)
  (return-type none)
  (parameter (type-and-name gboolean show_tabs))
)

(method get_show_tabs 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_show_tabs)
  (return-type gboolean)
)

(method set_tab_pos 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_pos)
  (return-type none)
  (parameter (type-and-name GtkPositionType pos))
)

(method get_tab_pos 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_tab_pos)
  (return-type GtkPositionType)
)

(method set_homogeneous_tabs 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_homogeneous_tabs)
  (return-type none)
  (parameter (type-and-name gboolean homogeneous))
)

(method set_tab_border 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_border)
  (return-type none)
  (parameter (type-and-name guint border_width))
)

(method set_tab_hborder 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_hborder)
  (return-type none)
  (parameter (type-and-name guint tab_hborder))
)

(method set_tab_vborder 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_vborder)
  (return-type none)
  (parameter (type-and-name guint tab_vborder))
)

(method set_scrollable 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_scrollable)
  (return-type none)
  (parameter (type-and-name gboolean scrollable))
)

(method get_scrollable 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_scrollable)
  (return-type gboolean)
)

(method popup_enable 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_popup_enable)
  (return-type none)
)

(method popup_disable 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_popup_disable)
  (return-type none)
)

(method get_tab_label 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_tab_label)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkWidget* child))
)

(method set_tab_label 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_label)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
)

(method set_tab_label_text 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_label_text)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* tab_text))
)

(method get_tab_label_text 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_tab_label_text)
  (return-type gchar*)
  (parameter (type-and-name GtkWidget* child))
)

(method get_menu_label 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_menu_label)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkWidget* child))
)

(method set_menu_label 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_menu_label)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* menu_label))
)

(method set_menu_label_text 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_menu_label_text)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* menu_text))
)

(method get_menu_label_text 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_menu_label_text)
  (return-type gchar*)
  (parameter (type-and-name GtkWidget* child))
)

(method query_tab_label_packing 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_query_tab_label_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean* expand))
  (parameter (type-and-name gboolean* fill))
  (parameter (type-and-name GtkPackType* pack_type))
)

(method set_tab_label_packing 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_label_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name GtkPackType pack_type))
)

(method reorder_child 
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_reorder_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)

(function gtk_misc_get_type 
  (c-name gtk_misc_get_type)
  (return-type GType)
)

(method set_alignment 
  (of-object Misc (Gtk))
  (c-name gtk_misc_set_alignment)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
)

(method get_alignment 
  (of-object Misc (Gtk))
  (c-name gtk_misc_get_alignment)
  (return-type none)
  (parameter (type-and-name gfloat* xalign))
  (parameter (type-and-name gfloat* yalign))
)

(method set_padding 
  (of-object Misc (Gtk))
  (c-name gtk_misc_set_padding)
  (return-type none)
  (parameter (type-and-name gint xpad))
  (parameter (type-and-name gint ypad))
)

(method get_padding 
  (of-object Misc (Gtk))
  (c-name gtk_misc_get_padding)
  (return-type none)
  (parameter (type-and-name gint* xpad))
  (parameter (type-and-name gint* ypad))
)

(function gtk_message_dialog_get_type 
  (c-name gtk_message_dialog_get_type)
  (return-type GType)
)

(function gtk_message_dialog_new 
  (c-name gtk_message_dialog_new)
  (is-constructor-of GtkMessageDialog)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkWindow* parent))
  (parameter (type-and-name GtkDialogFlags flags))
  (parameter (type-and-name GtkMessageType type))
  (parameter (type-and-name GtkButtonsType buttons))
  (parameter (type-and-name const-gchar* message_format))
;  (varargs t)
)

(function gtk_menu_shell_get_type 
  (c-name gtk_menu_shell_get_type)
  (return-type GType)
)

(method append 
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_append)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method prepend 
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_prepend)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method insert 
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_insert)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)

(method deactivate 
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_deactivate)
  (return-type none)
)

(method select_item 
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_select_item)
  (return-type none)
  (parameter (type-and-name GtkWidget* menu_item))
)

(method deselect 
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_deselect)
  (return-type none)
)

(method activate_item 
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_activate_item)
  (return-type none)
  (parameter (type-and-name GtkWidget* menu_item))
  (parameter (type-and-name gboolean force_deactivate))
)

(method select_first 
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_select_first)
  (return-type none)
  (parameter (type-and-name gboolean search_sensitive))
)

(function gtk_menu_item_get_type 
  (c-name gtk_menu_item_get_type)
  (return-type GType)
)

(function gtk_menu_item_new 
  (c-name gtk_menu_item_new)
  (is-constructor-of GtkMenuItem)
  (return-type GtkWidget*)
)

(function gtk_menu_item_new_with_label 
  (c-name gtk_menu_item_new_with_label)
  (is-constructor-of GtkMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_menu_item_new_with_mnemonic 
  (c-name gtk_menu_item_new_with_mnemonic)
  (is-constructor-of GtkMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method set_submenu 
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_set_submenu)
  (return-type none)
  (parameter (type-and-name GtkWidget* submenu))
)

(method get_submenu 
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_get_submenu)
  (return-type GtkWidget*)
)

(method remove_submenu 
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_remove_submenu)
  (return-type none)
)

(method select 
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_select)
  (return-type none)
)

(method deselect 
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_deselect)
  (return-type none)
)

(method activate 
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_activate)
  (return-type none)
)

(method toggle_size_request 
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_toggle_size_request)
  (return-type none)
  (parameter (type-and-name gint* requisition))
)

(method toggle_size_allocate 
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_toggle_size_allocate)
  (return-type none)
  (parameter (type-and-name gint allocation))
)

(method set_right_justified 
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_set_right_justified)
  (return-type none)
  (parameter (type-and-name gboolean right_justified))
)

(method get_right_justified 
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_get_right_justified)
  (return-type gboolean)
)

(method set_accel_path 
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_set_accel_path)
  (return-type none)
  (parameter (type-and-name const-gchar* accel_path))
)

(function gtk_menu_get_type 
  (c-name gtk_menu_get_type)
  (return-type GType)
)

(function gtk_menu_new 
  (c-name gtk_menu_new)
  (is-constructor-of GtkMenu)
  (return-type GtkWidget*)
)

(method popup 
  (of-object Menu (Gtk))
  (c-name gtk_menu_popup)
  (return-type none)
  (parameter (type-and-name GtkWidget* parent_menu_shell))
  (parameter (type-and-name GtkWidget* parent_menu_item))
  (parameter (type-and-name GtkMenuPositionFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name guint button))
  (parameter (type-and-name guint32 activate_time))
)

(method reposition 
  (of-object Menu (Gtk))
  (c-name gtk_menu_reposition)
  (return-type none)
)

(method popdown 
  (of-object Menu (Gtk))
  (c-name gtk_menu_popdown)
  (return-type none)
)

(method get_active 
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_active)
  (return-type GtkWidget*)
)

(method set_active 
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_active)
  (return-type none)
  (parameter (type-and-name guint index_))
)

(method set_accel_group 
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_accel_group)
  (return-type none)
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method get_accel_group 
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_accel_group)
  (return-type GtkAccelGroup*)
)

(method set_accel_path 
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_accel_path)
  (return-type none)
  (parameter (type-and-name const-gchar* accel_path))
)

(method attach_to_widget 
  (of-object Menu (Gtk))
  (c-name gtk_menu_attach_to_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* attach_widget))
  (parameter (type-and-name GtkMenuDetachFunc detacher))
)

(method detach 
  (of-object Menu (Gtk))
  (c-name gtk_menu_detach)
  (return-type none)
)

(method get_attach_widget 
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_attach_widget)
  (return-type GtkWidget*)
)

(method set_tearoff_state 
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_tearoff_state)
  (return-type none)
  (parameter (type-and-name gboolean torn_off))
)

(method get_tearoff_state 
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_tearoff_state)
  (return-type gboolean)
)

(method set_title 
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_title)
  (return-type none)
  (parameter (type-and-name const-gchar* title))
)

(method get_title 
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_title)
  (return-type gchar*)
)

(method reorder_child 
  (of-object Menu (Gtk))
  (c-name gtk_menu_reorder_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)

(method set_screen 
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_screen)
  (return-type none)
  (parameter (type-and-name GdkScreen* screen))
)

(function gtk_menu_bar_get_type 
  (c-name gtk_menu_bar_get_type)
  (return-type GType)
)

(function gtk_menu_bar_new 
  (c-name gtk_menu_bar_new)
  (is-constructor-of GtkMenuBar)
  (return-type GtkWidget*)
)

(function gtk_marshal_BOOLEAN__VOID 
  (c-name gtk_marshal_BOOLEAN__VOID)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_BOOLEAN__POINTER 
  (c-name gtk_marshal_BOOLEAN__POINTER)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT 
  (c-name gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_BOOLEAN__POINTER_INT_INT 
  (c-name gtk_marshal_BOOLEAN__POINTER_INT_INT)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT 
  (c-name gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER 
  (c-name gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_ENUM__ENUM 
  (c-name gtk_marshal_ENUM__ENUM)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_INT__POINTER 
  (c-name gtk_marshal_INT__POINTER)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_INT__POINTER_CHAR_CHAR 
  (c-name gtk_marshal_INT__POINTER_CHAR_CHAR)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__ENUM_FLOAT 
  (c-name gtk_marshal_VOID__ENUM_FLOAT)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN 
  (c-name gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__INT_INT 
  (c-name gtk_marshal_VOID__INT_INT)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__INT_INT_POINTER 
  (c-name gtk_marshal_VOID__INT_INT_POINTER)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__POINTER_INT 
  (c-name gtk_marshal_VOID__POINTER_INT)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__POINTER_POINTER 
  (c-name gtk_marshal_VOID__POINTER_POINTER)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__POINTER_POINTER_POINTER 
  (c-name gtk_marshal_VOID__POINTER_POINTER_POINTER)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__POINTER_STRING_STRING 
  (c-name gtk_marshal_VOID__POINTER_STRING_STRING)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__POINTER_UINT 
  (c-name gtk_marshal_VOID__POINTER_UINT)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__POINTER_UINT_ENUM 
  (c-name gtk_marshal_VOID__POINTER_UINT_ENUM)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__POINTER_POINTER_UINT_UINT 
  (c-name gtk_marshal_VOID__POINTER_POINTER_UINT_UINT)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT 
  (c-name gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__POINTER_UINT_UINT 
  (c-name gtk_marshal_VOID__POINTER_UINT_UINT)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__STRING_INT_POINTER 
  (c-name gtk_marshal_VOID__STRING_INT_POINTER)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER 
  (c-name gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM 
  (c-name gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_marshal_VOID__UINT_STRING 
  (c-name gtk_marshal_VOID__UINT_STRING)
  (return-type none)
  (parameter (type-and-name GClosure* closure))
  (parameter (type-and-name GValue* return_value))
  (parameter (type-and-name guint n_param_values))
  (parameter (type-and-name const-GValue* param_values))
  (parameter (type-and-name gpointer invocation_hint))
  (parameter (type-and-name gpointer marshal_data))
)

(function gtk_check_version 
  (c-name gtk_check_version)
  (return-type gchar*)
  (parameter (type-and-name guint required_major))
  (parameter (type-and-name guint required_minor))
  (parameter (type-and-name guint required_micro))
)

(function gtk_init 
  (c-name gtk_init)
  (return-type none)
  (parameter (type-and-name int* argc))
  (parameter (type-and-name char*** argv))
)

(function gtk_init_check 
  (c-name gtk_init_check)
  (return-type gboolean)
  (parameter (type-and-name int* argc))
  (parameter (type-and-name char*** argv))
)

(function gtk_init_abi_check 
  (c-name gtk_init_abi_check)
  (return-type none)
  (parameter (type-and-name int* argc))
  (parameter (type-and-name char*** argv))
  (parameter (type-and-name int num_checks))
  (parameter (type-and-name size_t sizeof_GtkWindow))
  (parameter (type-and-name size_t sizeof_GtkBox))
)

(function gtk_init_check_abi_check 
  (c-name gtk_init_check_abi_check)
  (return-type gboolean)
  (parameter (type-and-name int* argc))
  (parameter (type-and-name char*** argv))
  (parameter (type-and-name int num_checks))
  (parameter (type-and-name size_t sizeof_GtkWindow))
  (parameter (type-and-name size_t sizeof_GtkBox))
)

(function gtk_exit 
  (c-name gtk_exit)
  (return-type none)
  (parameter (type-and-name gint error_code))
)

(function gtk_disable_setlocale 
  (c-name gtk_disable_setlocale)
  (return-type none)
)

(function gtk_set_locale 
  (c-name gtk_set_locale)
  (return-type gchar*)
)

(function gtk_get_default_language 
  (c-name gtk_get_default_language)
  (return-type PangoLanguage*)
)

(function gtk_events_pending 
  (c-name gtk_events_pending)
  (return-type gint)
)

(function gtk_main_do_event 
  (c-name gtk_main_do_event)
  (return-type none)
  (parameter (type-and-name GdkEvent* event))
)

(function gtk_main 
  (c-name gtk_main)
  (return-type none)
)

(function gtk_main_level 
  (c-name gtk_main_level)
  (return-type guint)
)

(function gtk_main_quit 
  (c-name gtk_main_quit)
  (return-type none)
)

(function gtk_main_iteration 
  (c-name gtk_main_iteration)
  (return-type gboolean)
)

(function gtk_main_iteration_do 
  (c-name gtk_main_iteration_do)
  (return-type gboolean)
  (parameter (type-and-name gboolean blocking))
)

(function gtk_true 
  (c-name gtk_true)
  (return-type gboolean)
)

(function gtk_false 
  (c-name gtk_false)
  (return-type gboolean)
)

(function gtk_grab_add 
  (c-name gtk_grab_add)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_grab_get_current 
  (c-name gtk_grab_get_current)
  (return-type GtkWidget*)
)

(function gtk_grab_remove 
  (c-name gtk_grab_remove)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_init_add 
  (c-name gtk_init_add)
  (return-type none)
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function gtk_quit_add_destroy 
  (c-name gtk_quit_add_destroy)
  (return-type none)
  (parameter (type-and-name guint main_level))
  (parameter (type-and-name GtkObject* object))
)

(function gtk_quit_add 
  (c-name gtk_quit_add)
  (return-type guint)
  (parameter (type-and-name guint main_level))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function gtk_quit_add_full 
  (c-name gtk_quit_add_full)
  (return-type guint)
  (parameter (type-and-name guint main_level))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function gtk_quit_remove 
  (c-name gtk_quit_remove)
  (return-type none)
  (parameter (type-and-name guint quit_handler_id))
)

(function gtk_quit_remove_by_data 
  (c-name gtk_quit_remove_by_data)
  (return-type none)
  (parameter (type-and-name gpointer data))
)

(function gtk_timeout_add 
  (c-name gtk_timeout_add)
  (return-type guint)
  (parameter (type-and-name guint32 interval))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function gtk_timeout_add_full 
  (c-name gtk_timeout_add_full)
  (return-type guint)
  (parameter (type-and-name guint32 interval))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function gtk_timeout_remove 
  (c-name gtk_timeout_remove)
  (return-type none)
  (parameter (type-and-name guint timeout_handler_id))
)

(function gtk_idle_add 
  (c-name gtk_idle_add)
  (return-type guint)
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function gtk_idle_add_priority 
  (c-name gtk_idle_add_priority)
  (return-type guint)
  (parameter (type-and-name gint priority))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function gtk_idle_add_full 
  (c-name gtk_idle_add_full)
  (return-type guint)
  (parameter (type-and-name gint priority))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function gtk_idle_remove 
  (c-name gtk_idle_remove)
  (return-type none)
  (parameter (type-and-name guint idle_handler_id))
)

(function gtk_idle_remove_by_data 
  (c-name gtk_idle_remove_by_data)
  (return-type none)
  (parameter (type-and-name gpointer data))
)

(function gtk_input_add_full 
  (c-name gtk_input_add_full)
  (return-type guint)
  (parameter (type-and-name gint source))
  (parameter (type-and-name GdkInputCondition condition))
  (parameter (type-and-name GdkInputFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function gtk_input_remove 
  (c-name gtk_input_remove)
  (return-type none)
  (parameter (type-and-name guint input_handler_id))
)

(function gtk_key_snooper_install 
  (c-name gtk_key_snooper_install)
  (return-type guint)
  (parameter (type-and-name GtkKeySnoopFunc snooper))
  (parameter (type-and-name gpointer func_data))
)

(function gtk_key_snooper_remove 
  (c-name gtk_key_snooper_remove)
  (return-type none)
  (parameter (type-and-name guint snooper_handler_id))
)

(function gtk_get_current_event 
  (c-name gtk_get_current_event)
  (return-type GdkEvent*)
)

(function gtk_get_current_event_time 
  (c-name gtk_get_current_event_time)
  (return-type guint32)
)

(function gtk_get_current_event_state 
  (c-name gtk_get_current_event_state)
  (return-type gboolean)
  (parameter (type-and-name GdkModifierType* state))
)

(function gtk_get_event_widget 
  (c-name gtk_get_event_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkEvent* event))
)

(function gtk_propagate_event 
  (c-name gtk_propagate_event)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkEvent* event))
)

(function gtk_list_store_get_type 
  (c-name gtk_list_store_get_type)
  (return-type GType)
)

(function gtk_list_store_new 
  (c-name gtk_list_store_new)
  (is-constructor-of GtkListStore)
  (return-type GtkListStore*)
  (parameter (type-and-name gint n_columns))
;  (varargs t)
)

(function gtk_list_store_newv 
  (c-name gtk_list_store_newv)
  (return-type GtkListStore*)
  (parameter (type-and-name gint n_columns))
  (parameter (type-and-name GType* types))
)

(method set_column_types 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_set_column_types)
  (return-type none)
  (parameter (type-and-name gint n_columns))
  (parameter (type-and-name GType* types))
)

(method set_value 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_set_value)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GValue* value))
)

(method set 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_set)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
 ; (varargs t)
)

(method set_valist 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_set_valist)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name va_list var_args))
)

(method remove 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_remove)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method insert 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_insert)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name gint position))
)

(method insert_before 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_insert_before)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* sibling))
)

(method insert_after 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_insert_after)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* sibling))
)

(method prepend 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_prepend)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method append 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_append)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method clear 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_clear)
  (return-type none)
)

(method iter_is_valid 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_iter_is_valid)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method reorder 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_reorder)
  (return-type none)
  (parameter (type-and-name gint* new_order))
)

(method swap 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_swap)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* a))
  (parameter (type-and-name GtkTreeIter* b))
)

(method move_after 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_move_after)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* position))
)

(method move_before 
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_move_before)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* position))
)

(function gtk_list_item_get_type 
  (c-name gtk_list_item_get_type)
  (return-type GtkType)
)

(function gtk_list_item_new 
  (c-name gtk_list_item_new)
  (is-constructor-of GtkListItem)
  (return-type GtkWidget*)
)

(function gtk_list_item_new_with_label 
  (c-name gtk_list_item_new_with_label)
  (is-constructor-of GtkListItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method select 
  (of-object ListItem (Gtk))
  (c-name gtk_list_item_select)
  (return-type none)
)

(method deselect 
  (of-object ListItem (Gtk))
  (c-name gtk_list_item_deselect)
  (return-type none)
)

(function gtk_list_get_type 
  (c-name gtk_list_get_type)
  (return-type GtkType)
)

(function gtk_list_new 
  (c-name gtk_list_new)
  (is-constructor-of GtkList)
  (return-type GtkWidget*)
)

(method insert_items 
  (of-object List (Gtk))
  (c-name gtk_list_insert_items)
  (return-type none)
  (parameter (type-and-name GList* items))
  (parameter (type-and-name gint position))
)

(method append_items 
  (of-object List (Gtk))
  (c-name gtk_list_append_items)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method prepend_items 
  (of-object List (Gtk))
  (c-name gtk_list_prepend_items)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method remove_items 
  (of-object List (Gtk))
  (c-name gtk_list_remove_items)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method remove_items_no_unref 
  (of-object List (Gtk))
  (c-name gtk_list_remove_items_no_unref)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method clear_items 
  (of-object List (Gtk))
  (c-name gtk_list_clear_items)
  (return-type none)
  (parameter (type-and-name gint start))
  (parameter (type-and-name gint end))
)

(method select_item 
  (of-object List (Gtk))
  (c-name gtk_list_select_item)
  (return-type none)
  (parameter (type-and-name gint item))
)

(method unselect_item 
  (of-object List (Gtk))
  (c-name gtk_list_unselect_item)
  (return-type none)
  (parameter (type-and-name gint item))
)

(method select_child 
  (of-object List (Gtk))
  (c-name gtk_list_select_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method unselect_child 
  (of-object List (Gtk))
  (c-name gtk_list_unselect_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method child_position 
  (of-object List (Gtk))
  (c-name gtk_list_child_position)
  (return-type gint)
  (parameter (type-and-name GtkWidget* child))
)

(method set_selection_mode 
  (of-object List (Gtk))
  (c-name gtk_list_set_selection_mode)
  (return-type none)
  (parameter (type-and-name GtkSelectionMode mode))
)

(method extend_selection 
  (of-object List (Gtk))
  (c-name gtk_list_extend_selection)
  (return-type none)
  (parameter (type-and-name GtkScrollType scroll_type))
  (parameter (type-and-name gfloat position))
  (parameter (type-and-name gboolean auto_start_selection))
)

(method start_selection 
  (of-object List (Gtk))
  (c-name gtk_list_start_selection)
  (return-type none)
)

(method end_selection 
  (of-object List (Gtk))
  (c-name gtk_list_end_selection)
  (return-type none)
)

(method select_all 
  (of-object List (Gtk))
  (c-name gtk_list_select_all)
  (return-type none)
)

(method unselect_all 
  (of-object List (Gtk))
  (c-name gtk_list_unselect_all)
  (return-type none)
)

(method scroll_horizontal 
  (of-object List (Gtk))
  (c-name gtk_list_scroll_horizontal)
  (return-type none)
  (parameter (type-and-name GtkScrollType scroll_type))
  (parameter (type-and-name gfloat position))
)

(method scroll_vertical 
  (of-object List (Gtk))
  (c-name gtk_list_scroll_vertical)
  (return-type none)
  (parameter (type-and-name GtkScrollType scroll_type))
  (parameter (type-and-name gfloat position))
)

(method toggle_add_mode 
  (of-object List (Gtk))
  (c-name gtk_list_toggle_add_mode)
  (return-type none)
)

(method toggle_focus_row 
  (of-object List (Gtk))
  (c-name gtk_list_toggle_focus_row)
  (return-type none)
)

(method toggle_row 
  (of-object List (Gtk))
  (c-name gtk_list_toggle_row)
  (return-type none)
  (parameter (type-and-name GtkWidget* item))
)

(method undo_selection 
  (of-object List (Gtk))
  (c-name gtk_list_undo_selection)
  (return-type none)
)

(method end_drag_selection 
  (of-object List (Gtk))
  (c-name gtk_list_end_drag_selection)
  (return-type none)
)

(function gtk_layout_get_type 
  (c-name gtk_layout_get_type)
  (return-type GType)
)

(function gtk_layout_new 
  (c-name gtk_layout_new)
  (is-constructor-of GtkLayout)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* hadjustment))
  (parameter (type-and-name GtkAdjustment* vadjustment))
)

(method put 
  (of-object Layout (Gtk))
  (c-name gtk_layout_put)
  (return-type none)
  (parameter (type-and-name GtkWidget* child_widget))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method move 
  (of-object Layout (Gtk))
  (c-name gtk_layout_move)
  (return-type none)
  (parameter (type-and-name GtkWidget* child_widget))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method set_size 
  (of-object Layout (Gtk))
  (c-name gtk_layout_set_size)
  (return-type none)
  (parameter (type-and-name guint width))
  (parameter (type-and-name guint height))
)

(method get_size 
  (of-object Layout (Gtk))
  (c-name gtk_layout_get_size)
  (return-type none)
  (parameter (type-and-name guint* width))
  (parameter (type-and-name guint* height))
)

(method get_hadjustment 
  (of-object Layout (Gtk))
  (c-name gtk_layout_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment 
  (of-object Layout (Gtk))
  (c-name gtk_layout_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_hadjustment 
  (of-object Layout (Gtk))
  (c-name gtk_layout_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_vadjustment 
  (of-object Layout (Gtk))
  (c-name gtk_layout_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method freeze 
  (of-object Layout (Gtk))
  (c-name gtk_layout_freeze)
  (return-type none)
)

(method thaw 
  (of-object Layout (Gtk))
  (c-name gtk_layout_thaw)
  (return-type none)
)

(function gtk_label_get_type 
  (c-name gtk_label_get_type)
  (return-type GType)
)

(function gtk_label_new 
  (c-name gtk_label_new)
  (is-constructor-of GtkLabel)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* str))
)

(function gtk_label_new_with_mnemonic 
  (c-name gtk_label_new_with_mnemonic)
  (is-constructor-of GtkLabel)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* str))
)

(method set_text 
  (of-object Label (Gtk))
  (c-name gtk_label_set_text)
  (return-type none)
  (parameter (type-and-name const-char* str))
)

(method get_text 
  (of-object Label (Gtk))
  (c-name gtk_label_get_text)
  (return-type gchar*)
)

(method set_attributes 
  (of-object Label (Gtk))
  (c-name gtk_label_set_attributes)
  (return-type none)
  (parameter (type-and-name PangoAttrList* attrs))
)

(method get_attributes 
  (of-object Label (Gtk))
  (c-name gtk_label_get_attributes)
  (return-type PangoAttrList*)
)

(method set_label 
  (of-object Label (Gtk))
  (c-name gtk_label_set_label)
  (return-type none)
  (parameter (type-and-name const-gchar* str))
)

(method get_label 
  (of-object Label (Gtk))
  (c-name gtk_label_get_label)
  (return-type gchar*)
)

(method set_markup 
  (of-object Label (Gtk))
  (c-name gtk_label_set_markup)
  (return-type none)
  (parameter (type-and-name const-gchar* str))
)

(method set_use_markup 
  (of-object Label (Gtk))
  (c-name gtk_label_set_use_markup)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_use_markup 
  (of-object Label (Gtk))
  (c-name gtk_label_get_use_markup)
  (return-type gboolean)
)

(method set_use_underline 
  (of-object Label (Gtk))
  (c-name gtk_label_set_use_underline)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_use_underline 
  (of-object Label (Gtk))
  (c-name gtk_label_get_use_underline)
  (return-type gboolean)
)

(method set_markup_with_mnemonic 
  (of-object Label (Gtk))
  (c-name gtk_label_set_markup_with_mnemonic)
  (return-type none)
  (parameter (type-and-name const-gchar* str))
)

(method get_mnemonic_keyval 
  (of-object Label (Gtk))
  (c-name gtk_label_get_mnemonic_keyval)
  (return-type guint)
)

(method set_mnemonic_widget 
  (of-object Label (Gtk))
  (c-name gtk_label_set_mnemonic_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method get_mnemonic_widget 
  (of-object Label (Gtk))
  (c-name gtk_label_get_mnemonic_widget)
  (return-type GtkWidget*)
)

(method set_text_with_mnemonic 
  (of-object Label (Gtk))
  (c-name gtk_label_set_text_with_mnemonic)
  (return-type none)
  (parameter (type-and-name const-gchar* str))
)

(method set_justify 
  (of-object Label (Gtk))
  (c-name gtk_label_set_justify)
  (return-type none)
  (parameter (type-and-name GtkJustification jtype))
)

(method get_justify 
  (of-object Label (Gtk))
  (c-name gtk_label_get_justify)
  (return-type GtkJustification)
)

(method set_pattern 
  (of-object Label (Gtk))
  (c-name gtk_label_set_pattern)
  (return-type none)
  (parameter (type-and-name const-gchar* pattern))
)

(method set_line_wrap 
  (of-object Label (Gtk))
  (c-name gtk_label_set_line_wrap)
  (return-type none)
  (parameter (type-and-name gboolean wrap))
)

(method get_line_wrap 
  (of-object Label (Gtk))
  (c-name gtk_label_get_line_wrap)
  (return-type gboolean)
)

(method set_selectable 
  (of-object Label (Gtk))
  (c-name gtk_label_set_selectable)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_selectable 
  (of-object Label (Gtk))
  (c-name gtk_label_get_selectable)
  (return-type gboolean)
)

(method select_region 
  (of-object Label (Gtk))
  (c-name gtk_label_select_region)
  (return-type none)
  (parameter (type-and-name gint start_offset))
  (parameter (type-and-name gint end_offset))
)

(method get_selection_bounds 
  (of-object Label (Gtk))
  (c-name gtk_label_get_selection_bounds)
  (return-type gboolean)
  (parameter (type-and-name gint* start))
  (parameter (type-and-name gint* end))
)

(method get_layout 
  (of-object Label (Gtk))
  (c-name gtk_label_get_layout)
  (return-type PangoLayout*)
)

(method get_layout_offsets 
  (of-object Label (Gtk))
  (c-name gtk_label_get_layout_offsets)
  (return-type none)
  (parameter (type-and-name gint* x))
  (parameter (type-and-name gint* y))
)

(method get 
  (of-object Label (Gtk))
  (c-name gtk_label_get)
  (return-type none)
  (parameter (type-and-name char** str))
)

(method parse_uline 
  (of-object Label (Gtk))
  (c-name gtk_label_parse_uline)
  (return-type guint)
  (parameter (type-and-name const-gchar* string))
)

(function gtk_item_get_type 
  (c-name gtk_item_get_type)
  (return-type GType)
)

(method select 
  (of-object Item (Gtk))
  (c-name gtk_item_select)
  (return-type none)
)

(method deselect 
  (of-object Item (Gtk))
  (c-name gtk_item_deselect)
  (return-type none)
)

(method toggle 
  (of-object Item (Gtk))
  (c-name gtk_item_toggle)
  (return-type none)
)

(function gtk_item_factory_get_type 
  (c-name gtk_item_factory_get_type)
  (return-type GType)
)

(function gtk_item_factory_new 
  (c-name gtk_item_factory_new)
  (is-constructor-of GtkItemFactory)
  (return-type GtkItemFactory*)
  (parameter (type-and-name GType container_type))
  (parameter (type-and-name const-gchar* path))
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method construct 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_construct)
  (return-type none)
  (parameter (type-and-name GType container_type))
  (parameter (type-and-name const-gchar* path))
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(function gtk_item_factory_add_foreign 
  (c-name gtk_item_factory_add_foreign)
  (return-type none)
  (parameter (type-and-name GtkWidget* accel_widget))
  (parameter (type-and-name const-gchar* full_path))
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifiers))
)

(function gtk_item_factory_from_widget 
  (c-name gtk_item_factory_from_widget)
  (return-type GtkItemFactory*)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_item_factory_path_from_widget 
  (c-name gtk_item_factory_path_from_widget)
  (return-type gchar*)
  (parameter (type-and-name GtkWidget* widget))
)

(method get_item 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* path))
)

(method get_widget 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* path))
)

(method get_widget_by_action 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_widget_by_action)
  (return-type GtkWidget*)
  (parameter (type-and-name guint action))
)

(method get_item_by_action 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_item_by_action)
  (return-type GtkWidget*)
  (parameter (type-and-name guint action))
)

(method create_item 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_create_item)
  (return-type none)
  (parameter (type-and-name GtkItemFactoryEntry* entry))
  (parameter (type-and-name gpointer callback_data))
  (parameter (type-and-name guint callback_type))
)

(method create_items 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_create_items)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkItemFactoryEntry* entries))
  (parameter (type-and-name gpointer callback_data))
)

(method delete_item 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_delete_item)
  (return-type none)
  (parameter (type-and-name const-gchar* path))
)

(method delete_entry 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_delete_entry)
  (return-type none)
  (parameter (type-and-name GtkItemFactoryEntry* entry))
)

(method delete_entries 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_delete_entries)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkItemFactoryEntry* entries))
)

(method popup 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_popup)
  (return-type none)
  (parameter (type-and-name guint x))
  (parameter (type-and-name guint y))
  (parameter (type-and-name guint mouse_button))
  (parameter (type-and-name guint32 time_))
)

(method popup_with_data 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_popup_with_data)
  (return-type none)
  (parameter (type-and-name gpointer popup_data))
  (parameter (type-and-name GtkDestroyNotify destroy))
  (parameter (type-and-name guint x))
  (parameter (type-and-name guint y))
  (parameter (type-and-name guint mouse_button))
  (parameter (type-and-name guint32 time_))
)

(method popup_data 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_popup_data)
  (return-type gpointer)
)

(function gtk_item_factory_popup_data_from_widget 
  (c-name gtk_item_factory_popup_data_from_widget)
  (return-type gpointer)
  (parameter (type-and-name GtkWidget* widget))
)

(method set_translate_func 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_set_translate_func)
  (return-type none)
  (parameter (type-and-name GtkTranslateFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify notify))
)

(method create_items_ac 
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_create_items_ac)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkItemFactoryEntry* entries))
  (parameter (type-and-name gpointer callback_data))
  (parameter (type-and-name guint callback_type))
)

(function gtk_item_factory_from_path 
  (c-name gtk_item_factory_from_path)
  (return-type GtkItemFactory*)
  (parameter (type-and-name const-gchar* path))
)

(function gtk_item_factory_create_menu_entries 
  (c-name gtk_item_factory_create_menu_entries)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkMenuEntry* entries))
)

(function gtk_item_factories_path_delete 
  (c-name gtk_item_factories_path_delete)
  (return-type none)
  (parameter (type-and-name const-gchar* ifactory_path))
  (parameter (type-and-name const-gchar* path))
)

(function gtk_invisible_get_type 
  (c-name gtk_invisible_get_type)
  (return-type GType)
)

(function gtk_invisible_new 
  (c-name gtk_invisible_new)
  (is-constructor-of GtkInvisible)
  (return-type GtkWidget*)
)

(function gtk_invisible_new_for_screen 
  (c-name gtk_invisible_new_for_screen)
  (is-constructor-of GtkInvisible)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkScreen* screen))
)

(method set_screen 
  (of-object Invisible (Gtk))
  (c-name gtk_invisible_set_screen)
  (return-type none)
  (parameter (type-and-name GdkScreen* screen))
)

(method get_screen 
  (of-object Invisible (Gtk))
  (c-name gtk_invisible_get_screen)
  (return-type GdkScreen*)
)

(function gtk_input_dialog_get_type 
  (c-name gtk_input_dialog_get_type)
  (return-type GType)
)

(function gtk_input_dialog_new 
  (c-name gtk_input_dialog_new)
  (is-constructor-of GtkInputDialog)
  (return-type GtkWidget*)
)

(function gtk_im_multicontext_get_type 
  (c-name gtk_im_multicontext_get_type)
  (return-type GType)
)

(function gtk_im_multicontext_new 
  (c-name gtk_im_multicontext_new)
  (return-type GtkIMContext*)
)

(method append_menuitems 
  (of-object IMMulticontext (Gtk))
  (c-name gtk_im_multicontext_append_menuitems)
  (return-type none)
  (parameter (type-and-name GtkMenuShell* menushell))
)

(function gtk_im_context_simple_get_type 
  (c-name gtk_im_context_simple_get_type)
  (return-type GType)
)

(function gtk_im_context_simple_new 
  (c-name gtk_im_context_simple_new)
  (return-type GtkIMContext*)
)

(method e_add_table 
  (of-object IMContextSimple (Gtk))
  (c-name gtk_im_context_simple_add_table)
  (return-type none)
  (parameter (type-and-name guint16* data))
  (parameter (type-and-name gint max_seq_len))
  (parameter (type-and-name gint n_seqs))
)

(function gtk_im_context_get_type 
  (c-name gtk_im_context_get_type)
  (return-type GType)
)

(method set_client_window 
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_set_client_window)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
)

(method get_preedit_string 
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_get_preedit_string)
  (return-type none)
  (parameter (type-and-name gchar** str))
  (parameter (type-and-name PangoAttrList** attrs))
  (parameter (type-and-name gint* cursor_pos))
)

(method filter_keypress 
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_filter_keypress)
  (return-type gboolean)
  (parameter (type-and-name GdkEventKey* event))
)

(method focus_in 
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_focus_in)
  (return-type none)
)

(method focus_out 
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_focus_out)
  (return-type none)
)

(method reset 
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_reset)
  (return-type none)
)

(method set_cursor_location 
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_set_cursor_location)
  (return-type none)
  (parameter (type-and-name GdkRectangle* area))
)

(method set_use_preedit 
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_set_use_preedit)
  (return-type none)
  (parameter (type-and-name gboolean use_preedit))
)

(method set_surrounding 
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_set_surrounding)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
  (parameter (type-and-name gint cursor_index))
)

(method get_surrounding 
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_get_surrounding)
  (return-type gboolean)
  (parameter (type-and-name gchar** text))
  (parameter (type-and-name gint* cursor_index))
)

(method delete_surrounding 
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_delete_surrounding)
  (return-type gboolean)
  (parameter (type-and-name gint offset))
  (parameter (type-and-name gint n_chars))
)

(function gtk_image_menu_item_get_type 
  (c-name gtk_image_menu_item_get_type)
  (return-type GType)
)

(function gtk_image_menu_item_new 
  (c-name gtk_image_menu_item_new)
  (is-constructor-of GtkImageMenuItem)
  (return-type GtkWidget*)
)

(function gtk_image_menu_item_new_with_label 
  (c-name gtk_image_menu_item_new_with_label)
  (is-constructor-of GtkImageMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_image_menu_item_new_with_mnemonic 
  (c-name gtk_image_menu_item_new_with_mnemonic)
  (is-constructor-of GtkImageMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_image_menu_item_new_from_stock 
  (c-name gtk_image_menu_item_new_from_stock)
  (is-constructor-of GtkImageMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method m_set_image 
  (of-object ImageMenuItem (Gtk))
  (c-name gtk_image_menu_item_set_image)
  (return-type none)
  (parameter (type-and-name GtkWidget* image))
)

(method m_get_image 
  (of-object ImageMenuItem (Gtk))
  (c-name gtk_image_menu_item_get_image)
  (return-type GtkWidget*)
)

(function gtk_image_get_type 
  (c-name gtk_image_get_type)
  (return-type GType)
)

(function gtk_image_new 
  (c-name gtk_image_new)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
)

(function gtk_image_new_from_pixmap 
  (c-name gtk_image_new_from_pixmap)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(function gtk_image_new_from_image 
  (c-name gtk_image_new_from_image)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkImage* image))
  (parameter (type-and-name GdkBitmap* mask))
)

(function gtk_image_new_from_file 
  (c-name gtk_image_new_from_file)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* filename))
)

(function gtk_image_new_from_pixbuf 
  (c-name gtk_image_new_from_pixbuf)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkPixbuf* pixbuf))
)

(function gtk_image_new_from_stock 
  (c-name gtk_image_new_from_stock)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name GtkIconSize size))
)

(function gtk_image_new_from_icon_set 
  (c-name gtk_image_new_from_icon_set)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkIconSet* icon_set))
  (parameter (type-and-name GtkIconSize size))
)

(function gtk_image_new_from_animation 
  (c-name gtk_image_new_from_animation)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkPixbufAnimation* animation))
)

(method set_from_pixmap 
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_pixmap)
  (return-type none)
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method set_from_image 
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_image)
  (return-type none)
  (parameter (type-and-name GdkImage* gdk_image))
  (parameter (type-and-name GdkBitmap* mask))
)

(method set_from_file 
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_file)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(method set_from_pixbuf 
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_pixbuf)
  (return-type none)
  (parameter (type-and-name GdkPixbuf* pixbuf))
)

(method set_from_stock 
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_stock)
  (return-type none)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name GtkIconSize size))
)

(method set_from_icon_set 
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_icon_set)
  (return-type none)
  (parameter (type-and-name GtkIconSet* icon_set))
  (parameter (type-and-name GtkIconSize size))
)

(method set_from_animation 
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_animation)
  (return-type none)
  (parameter (type-and-name GdkPixbufAnimation* animation))
)

(method get_storage_type 
  (of-object Image (Gtk))
  (c-name gtk_image_get_storage_type)
  (return-type GtkImageType)
)

(method get_pixmap 
  (of-object Image (Gtk))
  (c-name gtk_image_get_pixmap)
  (return-type none)
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method get_image 
  (of-object Image (Gtk))
  (c-name gtk_image_get_image)
  (return-type none)
  (parameter (type-and-name GdkImage** gdk_image))
  (parameter (type-and-name GdkBitmap** mask))
)

(method get_pixbuf 
  (of-object Image (Gtk))
  (c-name gtk_image_get_pixbuf)
  (return-type GdkPixbuf*)
)

(method get_stock 
  (of-object Image (Gtk))
  (c-name gtk_image_get_stock)
  (return-type none)
  (parameter (type-and-name gchar** stock_id))
  (parameter (type-and-name GtkIconSize* size))
)

(method get_icon_set 
  (of-object Image (Gtk))
  (c-name gtk_image_get_icon_set)
  (return-type none)
  (parameter (type-and-name GtkIconSet** icon_set))
  (parameter (type-and-name GtkIconSize* size))
)

(method get_animation 
  (of-object Image (Gtk))
  (c-name gtk_image_get_animation)
  (return-type GdkPixbufAnimation*)
)

(method set 
  (of-object Image (Gtk))
  (c-name gtk_image_set)
  (return-type none)
  (parameter (type-and-name GdkImage* val))
  (parameter (type-and-name GdkBitmap* mask))
)

(method get 
  (of-object Image (Gtk))
  (c-name gtk_image_get)
  (return-type none)
  (parameter (type-and-name GdkImage** val))
  (parameter (type-and-name GdkBitmap** mask))
)

(function gtk_icon_factory_get_type 
  (c-name gtk_icon_factory_get_type)
  (return-type GType)
)

(function gtk_icon_factory_new 
  (c-name gtk_icon_factory_new)
  (is-constructor-of GtkIconFactory)
  (return-type GtkIconFactory*)
)

(method add 
  (of-object IconFactory (Gtk))
  (c-name gtk_icon_factory_add)
  (return-type none)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name GtkIconSet* icon_set))
)

(method lookup 
  (of-object IconFactory (Gtk))
  (c-name gtk_icon_factory_lookup)
  (return-type GtkIconSet*)
  (parameter (type-and-name const-gchar* stock_id))
)

(method add_default 
  (of-object IconFactory (Gtk))
  (c-name gtk_icon_factory_add_default)
  (return-type none)
)

(method remove_default 
  (of-object IconFactory (Gtk))
  (c-name gtk_icon_factory_remove_default)
  (return-type none)
)

(function gtk_icon_factory_lookup_default 
  (c-name gtk_icon_factory_lookup_default)
  (return-type GtkIconSet*)
  (parameter (type-and-name const-gchar* stock_id))
)

(function gtk_icon_size_lookup_for_settings 
  (c-name gtk_icon_size_lookup_for_settings)
  (return-type gboolean)
  (parameter (type-and-name GtkSettings* settings))
  (parameter (type-and-name GtkIconSize size))
  (parameter (type-and-name gint* width))
  (parameter (type-and-name gint* height))
)

(function gtk_icon_size_register 
  (c-name gtk_icon_size_register)
  (return-type GtkIconSize)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_icon_size_register_alias 
  (c-name gtk_icon_size_register_alias)
  (return-type none)
  (parameter (type-and-name const-gchar* alias))
  (parameter (type-and-name GtkIconSize target))
)

(function gtk_icon_size_from_name 
  (c-name gtk_icon_size_from_name)
  (return-type GtkIconSize)
  (parameter (type-and-name const-gchar* name))
)

(function gtk_icon_set_get_type 
  (c-name gtk_icon_set_get_type)
  (return-type GType)
)

(function gtk_icon_set_new 
  (c-name gtk_icon_set_new)
  (return-type GtkIconSet*)
)

(function gtk_icon_set_new_from_pixbuf 
  (c-name gtk_icon_set_new_from_pixbuf)
  (return-type GtkIconSet*)
  (parameter (type-and-name GdkPixbuf* pixbuf))
)

(function gtk_icon_source_get_type 
  (c-name gtk_icon_source_get_type)
  (return-type GType)
)

(function gtk_icon_source_new 
  (c-name gtk_icon_source_new)
  (return-type GtkIconSource*)
)

(function gtk_icon_source_copy 
  (c-name gtk_icon_source_copy)
  (return-type GtkIconSource*)
  (parameter (type-and-name const-GtkIconSource* source))
)

(function gtk_icon_source_get_filename 
  (c-name gtk_icon_source_get_filename)
  (return-type gchar*)
  (parameter (type-and-name const-GtkIconSource* source))
)

(function gtk_icon_source_get_pixbuf 
  (c-name gtk_icon_source_get_pixbuf)
  (return-type GdkPixbuf*)
  (parameter (type-and-name const-GtkIconSource* source))
)

(function gtk_icon_source_get_size_wildcarded 
  (c-name gtk_icon_source_get_size_wildcarded)
  (return-type gboolean)
  (parameter (type-and-name const-GtkIconSource* source))
)

(function gtk_icon_source_get_state_wildcarded 
  (c-name gtk_icon_source_get_state_wildcarded)
  (return-type gboolean)
  (parameter (type-and-name const-GtkIconSource* source))
)

(function gtk_icon_source_get_direction_wildcarded 
  (c-name gtk_icon_source_get_direction_wildcarded)
  (return-type gboolean)
  (parameter (type-and-name const-GtkIconSource* source))
)

(function gtk_icon_source_get_direction 
  (c-name gtk_icon_source_get_direction)
  (return-type GtkTextDirection)
  (parameter (type-and-name const-GtkIconSource* source))
)

(function gtk_icon_source_get_state 
  (c-name gtk_icon_source_get_state)
  (return-type GtkStateType)
  (parameter (type-and-name const-GtkIconSource* source))
)

(function gtk_icon_source_get_size 
  (c-name gtk_icon_source_get_size)
  (return-type GtkIconSize)
  (parameter (type-and-name const-GtkIconSource* source))
)

(function gtk_hseparator_get_type 
  (c-name gtk_hseparator_get_type)
  (return-type GType)
)

(function gtk_hseparator_new 
  (c-name gtk_hseparator_new)
  (is-constructor-of GtkHSeparator)
  (return-type GtkWidget*)
)

(function gtk_hscrollbar_get_type 
  (c-name gtk_hscrollbar_get_type)
  (return-type GType)
)

(function gtk_hscrollbar_new 
  (c-name gtk_hscrollbar_new)
  (is-constructor-of GtkHScrollbar)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(function gtk_hscale_get_type 
  (c-name gtk_hscale_get_type)
  (return-type GType)
)

(function gtk_hscale_new 
  (c-name gtk_hscale_new)
  (is-constructor-of GtkHScale)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(function gtk_hscale_new_with_range 
  (c-name gtk_hscale_new_with_range)
  (is-constructor-of GtkHScale)
  (return-type GtkWidget*)
  (parameter (type-and-name gdouble min))
  (parameter (type-and-name gdouble max))
  (parameter (type-and-name gdouble step))
)

(function gtk_hruler_get_type 
  (c-name gtk_hruler_get_type)
  (return-type GType)
)

(function gtk_hruler_new 
  (c-name gtk_hruler_new)
  (is-constructor-of GtkHRuler)
  (return-type GtkWidget*)
)

(function gtk_hpaned_get_type 
  (c-name gtk_hpaned_get_type)
  (return-type GType)
)

(function gtk_hpaned_new 
  (c-name gtk_hpaned_new)
  (is-constructor-of GtkHPaned)
  (return-type GtkWidget*)
)

(function gtk_hbox_get_type 
  (c-name gtk_hbox_get_type)
  (return-type GType)
)

(function gtk_hbox_new 
  (c-name gtk_hbox_new)
  (is-constructor-of GtkHBox)
  (return-type GtkWidget*)
  (parameter (type-and-name gboolean homogeneous))
  (parameter (type-and-name gint spacing))
)

(function gtk_hbutton_box_get_type 
  (c-name gtk_hbutton_box_get_type)
  (return-type GType)
)

(function gtk_hbutton_box_new 
  (c-name gtk_hbutton_box_new)
  (is-constructor-of GtkHButtonBox)
  (return-type GtkWidget*)
)

(function gtk_hbutton_box_get_spacing_default 
  (c-name gtk_hbutton_box_get_spacing_default)
  (return-type gint)
)

(function gtk_hbutton_box_get_layout_default 
  (c-name gtk_hbutton_box_get_layout_default)
  (return-type GtkButtonBoxStyle)
)

(function gtk_hbutton_box_set_spacing_default 
  (c-name gtk_hbutton_box_set_spacing_default)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(function gtk_hbutton_box_set_layout_default 
  (c-name gtk_hbutton_box_set_layout_default)
  (return-type none)
  (parameter (type-and-name GtkButtonBoxStyle layout))
)

(function gtk_handle_box_get_type 
  (c-name gtk_handle_box_get_type)
  (return-type GType)
)

(function gtk_handle_box_new 
  (c-name gtk_handle_box_new)
  (is-constructor-of GtkHandleBox)
  (return-type GtkWidget*)
)

(method set_shadow_type 
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)

(method get_shadow_type 
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_get_shadow_type)
  (return-type GtkShadowType)
)

(method set_handle_position 
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_set_handle_position)
  (return-type none)
  (parameter (type-and-name GtkPositionType position))
)

(method get_handle_position 
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_get_handle_position)
  (return-type GtkPositionType)
)

(method set_snap_edge 
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_set_snap_edge)
  (return-type none)
  (parameter (type-and-name GtkPositionType edge))
)

(method get_snap_edge 
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_get_snap_edge)
  (return-type GtkPositionType)
)

(function gtk_gc_get 
  (c-name gtk_gc_get)
  (return-type GdkGC*)
  (parameter (type-and-name gint depth))
  (parameter (type-and-name GdkColormap* colormap))
  (parameter (type-and-name GdkGCValues* values))
  (parameter (type-and-name GdkGCValuesMask values_mask))
)

(function gtk_gc_release 
  (c-name gtk_gc_release)
  (return-type none)
  (parameter (type-and-name GdkGC* gc))
)

(function gtk_gamma_curve_get_type 
  (c-name gtk_gamma_curve_get_type)
  (return-type GType)
)

(function gtk_gamma_curve_new 
  (c-name gtk_gamma_curve_new)
  (is-constructor-of GtkGammaCurve)
  (return-type GtkWidget*)
)

(function gtk_frame_get_type 
  (c-name gtk_frame_get_type)
  (return-type GType)
)

(function gtk_frame_new 
  (c-name gtk_frame_new)
  (is-constructor-of GtkFrame)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method set_label 
  (of-object Frame (Gtk))
  (c-name gtk_frame_set_label)
  (return-type none)
  (parameter (type-and-name const-gchar* label))
)

(method get_label 
  (of-object Frame (Gtk))
  (c-name gtk_frame_get_label)
  (return-type gchar*)
)

(method set_label_widget 
  (of-object Frame (Gtk))
  (c-name gtk_frame_set_label_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* label_widget))
)

(method get_label_widget 
  (of-object Frame (Gtk))
  (c-name gtk_frame_get_label_widget)
  (return-type GtkWidget*)
)

(method set_label_align 
  (of-object Frame (Gtk))
  (c-name gtk_frame_set_label_align)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
)

(method get_label_align 
  (of-object Frame (Gtk))
  (c-name gtk_frame_get_label_align)
  (return-type none)
  (parameter (type-and-name gfloat* xalign))
  (parameter (type-and-name gfloat* yalign))
)

(method set_shadow_type 
  (of-object Frame (Gtk))
  (c-name gtk_frame_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)

(method get_shadow_type 
  (of-object Frame (Gtk))
  (c-name gtk_frame_get_shadow_type)
  (return-type GtkShadowType)
)

(function gtk_font_selection_get_type 
  (c-name gtk_font_selection_get_type)
  (return-type GType)
)

(function gtk_font_selection_new 
  (c-name gtk_font_selection_new)
  (is-constructor-of GtkFontSelection)
  (return-type GtkWidget*)
)

(method get_font_name 
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_get_font_name)
  (return-type gchar*)
)

(method get_font 
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_get_font)
  (return-type GdkFont*)
)

(method set_font_name 
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_set_font_name)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* fontname))
)

(method get_preview_text 
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_get_preview_text)
  (return-type gchar*)
)

(method set_preview_text 
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_set_preview_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(function gtk_font_selection_dialog_get_type 
  (c-name gtk_font_selection_dialog_get_type)
  (return-type GType)
)

(function gtk_font_selection_dialog_new 
  (c-name gtk_font_selection_dialog_new)
  (is-constructor-of GtkFontSelectionDialog)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* title))
)

(method g_get_font_name 
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_get_font_name)
  (return-type gchar*)
)

(method g_get_font 
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_get_font)
  (return-type GdkFont*)
)

(method g_set_font_name 
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_set_font_name)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* fontname))
)

(method g_get_preview_text 
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_get_preview_text)
  (return-type gchar*)
)

(method g_set_preview_text 
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_set_preview_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(function gtk_fixed_get_type 
  (c-name gtk_fixed_get_type)
  (return-type GType)
)

(function gtk_fixed_new 
  (c-name gtk_fixed_new)
  (is-constructor-of GtkFixed)
  (return-type GtkWidget*)
)

(method put 
  (of-object Fixed (Gtk))
  (c-name gtk_fixed_put)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method move 
  (of-object Fixed (Gtk))
  (c-name gtk_fixed_move)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method set_has_window 
  (of-object Fixed (Gtk))
  (c-name gtk_fixed_set_has_window)
  (return-type none)
  (parameter (type-and-name gboolean has_window))
)

(method get_has_window 
  (of-object Fixed (Gtk))
  (c-name gtk_fixed_get_has_window)
  (return-type gboolean)
)

(function gtk_file_selection_get_type 
  (c-name gtk_file_selection_get_type)
  (return-type GType)
)

(function gtk_file_selection_new 
  (c-name gtk_file_selection_new)
  (is-constructor-of GtkFileSelection)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* title))
)

(method set_filename 
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_set_filename)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(method get_filename 
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_get_filename)
  (return-type gchar*)
)

(method complete 
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_complete)
  (return-type none)
  (parameter (type-and-name const-gchar* pattern))
)

(method show_fileop_buttons 
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_show_fileop_buttons)
  (return-type none)
)

(method hide_fileop_buttons 
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_hide_fileop_buttons)
  (return-type none)
)

(method get_selections 
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_get_selections)
  (return-type gchar**)
)

(method set_select_multiple 
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_set_select_multiple)
  (return-type none)
  (parameter (type-and-name gboolean select_multiple))
)

(method get_select_multiple 
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_get_select_multiple)
  (return-type gboolean)
)

(function gtk_event_box_get_type 
  (c-name gtk_event_box_get_type)
  (return-type GType)
)

(function gtk_event_box_new 
  (c-name gtk_event_box_new)
  (is-constructor-of GtkEventBox)
  (return-type GtkWidget*)
)

(function gtk_entry_get_type 
  (c-name gtk_entry_get_type)
  (return-type GType)
)

(function gtk_entry_new 
  (c-name gtk_entry_new)
  (is-constructor-of GtkEntry)
  (return-type GtkWidget*)
)

(method set_visibility 
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_visibility)
  (return-type none)
  (parameter (type-and-name gboolean visible))
)

(method get_visibility 
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_visibility)
  (return-type gboolean)
)

(method set_invisible_char 
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_invisible_char)
  (return-type none)
  (parameter (type-and-name gunichar ch))
)

(method get_invisible_char 
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_invisible_char)
  (return-type gunichar)
)

(method set_has_frame 
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_has_frame)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_has_frame 
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_has_frame)
  (return-type gboolean)
)

(method set_max_length 
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_max_length)
  (return-type none)
  (parameter (type-and-name gint max))
)

(method get_max_length 
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_max_length)
  (return-type gint)
)

(method set_activates_default 
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_activates_default)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_activates_default 
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_activates_default)
  (return-type gboolean)
)

(method set_width_chars 
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_width_chars)
  (return-type none)
  (parameter (type-and-name gint n_chars))
)

(method get_width_chars 
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_width_chars)
  (return-type gint)
)

(method set_text 
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(method get_text 
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_text)
  (return-type gchar*)
)

(method get_layout 
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_layout)
  (return-type PangoLayout*)
)

(method get_layout_offsets 
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_layout_offsets)
  (return-type none)
  (parameter (type-and-name gint* x))
  (parameter (type-and-name gint* y))
)

(function gtk_entry_new_with_max_length 
  (c-name gtk_entry_new_with_max_length)
  (is-constructor-of GtkEntry)
  (return-type GtkWidget*)
  (parameter (type-and-name gint max))
)

(method append_text 
  (of-object Entry (Gtk))
  (c-name gtk_entry_append_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(method prepend_text 
  (of-object Entry (Gtk))
  (c-name gtk_entry_prepend_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(method set_position 
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_position)
  (return-type none)
  (parameter (type-and-name gint position))
)

(method select_region 
  (of-object Entry (Gtk))
  (c-name gtk_entry_select_region)
  (return-type none)
  (parameter (type-and-name gint start))
  (parameter (type-and-name gint end))
)

(method set_editable 
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_editable)
  (return-type none)
  (parameter (type-and-name gboolean editable))
)

(function gtk_editable_get_type 
  (c-name gtk_editable_get_type)
  (return-type GType)
)

(function gtk_drawing_area_get_type 
  (c-name gtk_drawing_area_get_type)
  (return-type GType)
)

(function gtk_drawing_area_new 
  (c-name gtk_drawing_area_new)
  (is-constructor-of GtkDrawingArea)
  (return-type GtkWidget*)
)

(method size 
  (of-object DrawingArea (Gtk))
  (c-name gtk_drawing_area_size)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_drag_get_data 
  (c-name gtk_drag_get_data)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint32 time_))
)

(function gtk_drag_finish 
  (c-name gtk_drag_finish)
  (return-type none)
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name gboolean success))
  (parameter (type-and-name gboolean del))
  (parameter (type-and-name guint32 time_))
)

(function gtk_drag_get_source_widget 
  (c-name gtk_drag_get_source_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkDragContext* context))
)

(function gtk_drag_highlight 
  (c-name gtk_drag_highlight)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_drag_unhighlight 
  (c-name gtk_drag_unhighlight)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_drag_dest_set 
  (c-name gtk_drag_dest_set)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GtkDestDefaults flags))
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name gint n_targets))
  (parameter (type-and-name GdkDragAction actions))
)

(function gtk_drag_dest_set_proxy 
  (c-name gtk_drag_dest_set_proxy)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkWindow* proxy_window))
  (parameter (type-and-name GdkDragProtocol protocol))
  (parameter (type-and-name gboolean use_coordinates))
)

(function gtk_drag_dest_unset 
  (c-name gtk_drag_dest_unset)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_drag_dest_find_target 
  (c-name gtk_drag_dest_find_target)
  (return-type GdkAtom)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name GtkTargetList* target_list))
)

(function gtk_drag_dest_get_target_list 
  (c-name gtk_drag_dest_get_target_list)
  (return-type GtkTargetList*)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_drag_dest_set_target_list 
  (c-name gtk_drag_dest_set_target_list)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GtkTargetList* target_list))
)

(function gtk_drag_source_set 
  (c-name gtk_drag_source_set)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkModifierType start_button_mask))
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name gint n_targets))
  (parameter (type-and-name GdkDragAction actions))
)

(function gtk_drag_source_unset 
  (c-name gtk_drag_source_unset)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_drag_source_set_icon 
  (c-name gtk_drag_source_set_icon)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkColormap* colormap))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(function gtk_drag_source_set_icon_pixbuf 
  (c-name gtk_drag_source_set_icon_pixbuf)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkPixbuf* pixbuf))
)

(function gtk_drag_source_set_icon_stock 
  (c-name gtk_drag_source_set_icon_stock)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* stock_id))
)

(function gtk_drag_begin 
  (c-name gtk_drag_begin)
  (return-type GdkDragContext*)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GtkTargetList* targets))
  (parameter (type-and-name GdkDragAction actions))
  (parameter (type-and-name gint button))
  (parameter (type-and-name GdkEvent* event))
)

(function gtk_drag_set_icon_widget 
  (c-name gtk_drag_set_icon_widget)
  (return-type none)
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint hot_x))
  (parameter (type-and-name gint hot_y))
)

(function gtk_drag_set_icon_pixmap 
  (c-name gtk_drag_set_icon_pixmap)
  (return-type none)
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name GdkColormap* colormap))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
  (parameter (type-and-name gint hot_x))
  (parameter (type-and-name gint hot_y))
)

(function gtk_drag_set_icon_pixbuf 
  (c-name gtk_drag_set_icon_pixbuf)
  (return-type none)
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name GdkPixbuf* pixbuf))
  (parameter (type-and-name gint hot_x))
  (parameter (type-and-name gint hot_y))
)

(function gtk_drag_set_icon_stock 
  (c-name gtk_drag_set_icon_stock)
  (return-type none)
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name gint hot_x))
  (parameter (type-and-name gint hot_y))
)

(function gtk_drag_set_icon_default 
  (c-name gtk_drag_set_icon_default)
  (return-type none)
  (parameter (type-and-name GdkDragContext* context))
)

(function gtk_drag_check_threshold 
  (c-name gtk_drag_check_threshold)
  (return-type gboolean)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint start_x))
  (parameter (type-and-name gint start_y))
  (parameter (type-and-name gint current_x))
  (parameter (type-and-name gint current_y))
)

(function gtk_drag_set_default_icon 
  (c-name gtk_drag_set_default_icon)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
  (parameter (type-and-name gint hot_x))
  (parameter (type-and-name gint hot_y))
)

(function gtk_dialog_get_type 
  (c-name gtk_dialog_get_type)
  (return-type GType)
)

(function gtk_dialog_new 
  (c-name gtk_dialog_new)
  (is-constructor-of GtkDialog)
  (return-type GtkWidget*)
)

(function gtk_dialog_new_with_buttons 
  (c-name gtk_dialog_new_with_buttons)
  (is-constructor-of GtkDialog)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* title))
  (parameter (type-and-name GtkWindow* parent))
  (parameter (type-and-name GtkDialogFlags flags))
  (parameter (type-and-name const-gchar* first_button_text))
;  (varargs t)
)

(method add_action_widget 
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_add_action_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint response_id))
)

(method add_button 
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_add_button)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* button_text))
  (parameter (type-and-name gint response_id))
)

(method add_buttons 
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_add_buttons)
  (return-type none)
  (parameter (type-and-name const-gchar* first_button_text))
 ; (varargs t)
)

(method set_response_sensitive 
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_set_response_sensitive)
  (return-type none)
  (parameter (type-and-name gint response_id))
  (parameter (type-and-name gboolean setting))
)

(method set_default_response 
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_set_default_response)
  (return-type none)
  (parameter (type-and-name gint response_id))
)

(method set_has_separator 
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_set_has_separator)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_has_separator 
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_get_has_separator)
  (return-type gboolean)
)

(method response 
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_response)
  (return-type none)
  (parameter (type-and-name gint response_id))
)

(method run 
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_run)
  (return-type gint)
)

(function gtk_curve_get_type 
  (c-name gtk_curve_get_type)
  (return-type GType)
)

(function gtk_curve_new 
  (c-name gtk_curve_new)
  (is-constructor-of GtkCurve)
  (return-type GtkWidget*)
)

(method reset 
  (of-object Curve (Gtk))
  (c-name gtk_curve_reset)
  (return-type none)
)

(method set_gamma 
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_gamma)
  (return-type none)
  (parameter (type-and-name gfloat gamma_))
)

(method set_range 
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_range)
  (return-type none)
  (parameter (type-and-name gfloat min_x))
  (parameter (type-and-name gfloat max_x))
  (parameter (type-and-name gfloat min_y))
  (parameter (type-and-name gfloat max_y))
)

(method get_vector 
  (of-object Curve (Gtk))
  (c-name gtk_curve_get_vector)
  (return-type none)
  (parameter (type-and-name int veclen))
  (parameter (type-and-name gfloat vector[]))
)

(method set_vector 
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_vector)
  (return-type none)
  (parameter (type-and-name int veclen))
  (parameter (type-and-name gfloat vector[]))
)

(method set_curve_type 
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_curve_type)
  (return-type none)
  (parameter (type-and-name GtkCurveType type))
)

(function gtk_ctree_get_type 
  (c-name gtk_ctree_get_type)
  (return-type GtkType)
)

(function gtk_ctree_new_with_titles 
  (c-name gtk_ctree_new_with_titles)
  (is-constructor-of GtkCTree)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gint tree_column))
  (parameter (type-and-name gchar* titles[]))
)

(function gtk_ctree_new 
  (c-name gtk_ctree_new)
  (is-constructor-of GtkCTree)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gint tree_column))
)

(method insert_node 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_insert_node)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* parent))
  (parameter (type-and-name GtkCTreeNode* sibling))
  (parameter (type-and-name gchar* text[]))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap_closed))
  (parameter (type-and-name GdkBitmap* mask_closed))
  (parameter (type-and-name GdkPixmap* pixmap_opened))
  (parameter (type-and-name GdkBitmap* mask_opened))
  (parameter (type-and-name gboolean is_leaf))
  (parameter (type-and-name gboolean expanded))
)

(method remove_node 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_remove_node)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method insert_gnode 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_insert_gnode)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* parent))
  (parameter (type-and-name GtkCTreeNode* sibling))
  (parameter (type-and-name GNode* gnode))
  (parameter (type-and-name GtkCTreeGNodeFunc func))
  (parameter (type-and-name gpointer data))
)

(method export_to_gnode 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_export_to_gnode)
  (return-type GNode*)
  (parameter (type-and-name GNode* parent))
  (parameter (type-and-name GNode* sibling))
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeGNodeFunc func))
  (parameter (type-and-name gpointer data))
)

(method post_recursive 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_post_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method post_recursive_to_depth 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_post_recursive_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method pre_recursive 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_pre_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method pre_recursive_to_depth 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_pre_recursive_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method is_viewable 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_is_viewable)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method last 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_last)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method find_node_ptr 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_node_ptr)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeRow* ctree_row))
)

(method node_nth 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_nth)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name guint row))
)

(method find 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeNode* child))
)

(method is_ancestor 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_is_ancestor)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeNode* child))
)

(method find_by_row_data 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_by_row_data)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
)

(method find_all_by_row_data 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_all_by_row_data)
  (return-type GList*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
)

(method find_by_row_data_custom 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_by_row_data_custom)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GCompareFunc func))
)

(method find_all_by_row_data_custom 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_all_by_row_data_custom)
  (return-type GList*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GCompareFunc func))
)

(method is_hot_spot 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_is_hot_spot)
  (return-type gboolean)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method move 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_move)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeNode* new_parent))
  (parameter (type-and-name GtkCTreeNode* new_sibling))
)

(method expand 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_expand)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method expand_recursive 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_expand_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method expand_to_depth 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_expand_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
)

(method collapse 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_collapse)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method collapse_recursive 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_collapse_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method collapse_to_depth 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_collapse_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
)

(method toggle_expansion 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_toggle_expansion)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method toggle_expansion_recursive 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_toggle_expansion_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method select 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_select)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method select_recursive 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_select_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method unselect 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_unselect)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method unselect_recursive 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_unselect_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method real_select_recursive 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_real_select_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint state))
)

(method node_set_text 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_text)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
)

(method node_set_pixmap 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_pixmap)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method node_set_pixtext 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_pixtext)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method set_node_info 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_node_info)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap_closed))
  (parameter (type-and-name GdkBitmap* mask_closed))
  (parameter (type-and-name GdkPixmap* pixmap_opened))
  (parameter (type-and-name GdkBitmap* mask_opened))
  (parameter (type-and-name gboolean is_leaf))
  (parameter (type-and-name gboolean expanded))
)

(method node_set_shift 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_shift)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint vertical))
  (parameter (type-and-name gint horizontal))
)

(method node_set_selectable 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_selectable)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gboolean selectable))
)

(method node_get_selectable 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_selectable)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method node_get_cell_type 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_cell_type)
  (return-type GtkCellType)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
)

(method node_get_text 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_text)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
)

(method node_get_pixmap 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_pixmap)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method node_get_pixtext 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_pixtext)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
  (parameter (type-and-name guint8* spacing))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method get_node_info 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_get_node_info)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gchar** text))
  (parameter (type-and-name guint8* spacing))
  (parameter (type-and-name GdkPixmap** pixmap_closed))
  (parameter (type-and-name GdkBitmap** mask_closed))
  (parameter (type-and-name GdkPixmap** pixmap_opened))
  (parameter (type-and-name GdkBitmap** mask_opened))
  (parameter (type-and-name gboolean* is_leaf))
  (parameter (type-and-name gboolean* expanded))
)

(method node_set_row_style 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_row_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkStyle* style))
)

(method node_get_row_style 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_row_style)
  (return-type GtkStyle*)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method node_set_cell_style 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_cell_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkStyle* style))
)

(method node_get_cell_style 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_cell_style)
  (return-type GtkStyle*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
)

(method node_set_foreground 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_foreground)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GdkColor* color))
)

(method node_set_background 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_background)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GdkColor* color))
)

(method node_set_row_data 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_row_data)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
)

(method node_set_row_data_full 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_row_data_full)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method node_get_row_data 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_row_data)
  (return-type gpointer)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method node_moveto 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_moveto)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gfloat row_align))
  (parameter (type-and-name gfloat col_align))
)

(method node_is_visible 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_is_visible)
  (return-type GtkVisibility)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method set_indent 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_indent)
  (return-type none)
  (parameter (type-and-name gint indent))
)

(method set_spacing 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_spacing)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(method set_show_stub 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_show_stub)
  (return-type none)
  (parameter (type-and-name gboolean show_stub))
)

(method set_line_style 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_line_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeLineStyle line_style))
)

(method set_expander_style 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_expander_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeExpanderStyle expander_style))
)

(method set_drag_compare_func 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_drag_compare_func)
  (return-type none)
  (parameter (type-and-name GtkCTreeCompareDragFunc cmp_func))
)

(method sort_node 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_sort_node)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method sort_recursive 
  (of-object CTree (Gtk))
  (c-name gtk_ctree_sort_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(function gtk_ctree_node_get_type 
  (c-name gtk_ctree_node_get_type)
  (return-type GType)
)

(function gtk_container_get_type 
  (c-name gtk_container_get_type)
  (return-type GType)
)

(method set_border_width 
  (of-object Container (Gtk))
  (c-name gtk_container_set_border_width)
  (return-type none)
  (parameter (type-and-name guint border_width))
)

(method get_border_width 
  (of-object Container (Gtk))
  (c-name gtk_container_get_border_width)
  (return-type guint)
)

(method add 
  (of-object Container (Gtk))
  (c-name gtk_container_add)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method remove 
  (of-object Container (Gtk))
  (c-name gtk_container_remove)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method set_resize_mode 
  (of-object Container (Gtk))
  (c-name gtk_container_set_resize_mode)
  (return-type none)
  (parameter (type-and-name GtkResizeMode resize_mode))
)

(method get_resize_mode 
  (of-object Container (Gtk))
  (c-name gtk_container_get_resize_mode)
  (return-type GtkResizeMode)
)

(method check_resize 
  (of-object Container (Gtk))
  (c-name gtk_container_check_resize)
  (return-type none)
)

(method foreach 
  (of-object Container (Gtk))
  (c-name gtk_container_foreach)
  (return-type none)
  (parameter (type-and-name GtkCallback callback))
  (parameter (type-and-name gpointer callback_data))
)

(method foreach_full 
  (of-object Container (Gtk))
  (c-name gtk_container_foreach_full)
  (return-type none)
  (parameter (type-and-name GtkCallback callback))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer callback_data))
  (parameter (type-and-name GtkDestroyNotify notify))
)

(method get_children 
  (of-object Container (Gtk))
  (c-name gtk_container_get_children)
  (return-type GList*)
)

(method propagate_expose 
  (of-object Container (Gtk))
  (c-name gtk_container_propagate_expose)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GdkEventExpose* event))
)

(method set_focus_chain 
  (of-object Container (Gtk))
  (c-name gtk_container_set_focus_chain)
  (return-type none)
  (parameter (type-and-name GList* focusable_widgets))
)

(method get_focus_chain 
  (of-object Container (Gtk))
  (c-name gtk_container_get_focus_chain)
  (return-type gboolean)
  (parameter (type-and-name GList** focusable_widgets))
)

(method unset_focus_chain 
  (of-object Container (Gtk))
  (c-name gtk_container_unset_focus_chain)
  (return-type none)
)

(method set_reallocate_redraws 
  (of-object Container (Gtk))
  (c-name gtk_container_set_reallocate_redraws)
  (return-type none)
  (parameter (type-and-name gboolean needs_redraws))
)

(method set_focus_child 
  (of-object Container (Gtk))
  (c-name gtk_container_set_focus_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method set_focus_vadjustment 
  (of-object Container (Gtk))
  (c-name gtk_container_set_focus_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_focus_vadjustment 
  (of-object Container (Gtk))
  (c-name gtk_container_get_focus_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_focus_hadjustment 
  (of-object Container (Gtk))
  (c-name gtk_container_set_focus_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_focus_hadjustment 
  (of-object Container (Gtk))
  (c-name gtk_container_get_focus_hadjustment)
  (return-type GtkAdjustment*)
)

(method resize_children 
  (of-object Container (Gtk))
  (c-name gtk_container_resize_children)
  (return-type none)
)

(method child_type 
  (of-object Container (Gtk))
  (c-name gtk_container_child_type)
  (return-type GType)
)

(function gtk_container_class_find_child_property 
  (c-name gtk_container_class_find_child_property)
  (return-type GParamSpec*)
  (parameter (type-and-name GObjectClass* cclass))
  (parameter (type-and-name const-gchar* property_name))
)

(function gtk_container_class_list_child_properties 
  (c-name gtk_container_class_list_child_properties)
  (return-type GParamSpec**)
  (parameter (type-and-name GObjectClass* cclass))
  (parameter (type-and-name guint* n_properties))
)

(method add_with_properties 
  (of-object Container (Gtk))
  (c-name gtk_container_add_with_properties)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* first_prop_name))
 ; (varargs t)
)

(method child_set 
  (of-object Container (Gtk))
  (c-name gtk_container_child_set)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* first_prop_name))
 ; (varargs t)
)

(method child_get 
  (of-object Container (Gtk))
  (c-name gtk_container_child_get)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* first_prop_name))
 ; (varargs t)
)

(method child_set_valist 
  (of-object Container (Gtk))
  (c-name gtk_container_child_set_valist)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* first_property_name))
  (parameter (type-and-name va_list var_args))
)

(method child_get_valist 
  (of-object Container (Gtk))
  (c-name gtk_container_child_get_valist)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* first_property_name))
  (parameter (type-and-name va_list var_args))
)

(method child_set_property 
  (of-object Container (Gtk))
  (c-name gtk_container_child_set_property)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* property_name))
  (parameter (type-and-name const-GValue* value))
)

(method child_get_property 
  (of-object Container (Gtk))
  (c-name gtk_container_child_get_property)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* property_name))
  (parameter (type-and-name GValue* value))
)

(method forall 
  (of-object Container (Gtk))
  (c-name gtk_container_forall)
  (return-type none)
  (parameter (type-and-name GtkCallback callback))
  (parameter (type-and-name gpointer callback_data))
)

(function gtk_combo_get_type 
  (c-name gtk_combo_get_type)
  (return-type GType)
)

(function gtk_combo_new 
  (c-name gtk_combo_new)
  (is-constructor-of GtkCombo)
  (return-type GtkWidget*)
)

(method set_value_in_list 
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_value_in_list)
  (return-type none)
  (parameter (type-and-name gboolean val))
  (parameter (type-and-name gboolean ok_if_empty))
)

(method set_use_arrows 
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_use_arrows)
  (return-type none)
  (parameter (type-and-name gboolean val))
)

(method set_use_arrows_always 
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_use_arrows_always)
  (return-type none)
  (parameter (type-and-name gboolean val))
)

(method set_case_sensitive 
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_case_sensitive)
  (return-type none)
  (parameter (type-and-name gboolean val))
)

(method set_item_string 
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_item_string)
  (return-type none)
  (parameter (type-and-name GtkItem* item))
  (parameter (type-and-name const-gchar* item_value))
)

(method set_popdown_strings 
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_popdown_strings)
  (return-type none)
  (parameter (type-and-name GList* strings))
)

(method disable_activate 
  (of-object Combo (Gtk))
  (c-name gtk_combo_disable_activate)
  (return-type none)
)

(function gtk_color_selection_get_type 
  (c-name gtk_color_selection_get_type)
  (return-type GType)
)

(function gtk_color_selection_new 
  (c-name gtk_color_selection_new)
  (is-constructor-of GtkColorSelection)
  (return-type GtkWidget*)
)

(method get_has_opacity_control 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_has_opacity_control)
  (return-type gboolean)
)

(method set_has_opacity_control 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_has_opacity_control)
  (return-type none)
  (parameter (type-and-name gboolean has_opacity))
)

(method get_has_palette 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_has_palette)
  (return-type gboolean)
)

(method set_has_palette 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_has_palette)
  (return-type none)
  (parameter (type-and-name gboolean has_palette))
)

(method set_current_color 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_current_color)
  (return-type none)
  (parameter (type-and-name GdkColor* color))
)

(method set_current_alpha 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_current_alpha)
  (return-type none)
  (parameter (type-and-name guint16 alpha))
)

(method get_current_color 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_current_color)
  (return-type none)
  (parameter (type-and-name GdkColor* color))
)

(method get_current_alpha 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_current_alpha)
  (return-type guint16)
)

(method set_previous_color 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_previous_color)
  (return-type none)
  (parameter (type-and-name GdkColor* color))
)

(method set_previous_alpha 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_previous_alpha)
  (return-type none)
  (parameter (type-and-name guint16 alpha))
)

(method get_previous_color 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_previous_color)
  (return-type none)
  (parameter (type-and-name GdkColor* color))
)

(method get_previous_alpha 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_previous_alpha)
  (return-type guint16)
)

(method is_adjusting 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_is_adjusting)
  (return-type gboolean)
)

(function gtk_color_selection_palette_from_string 
  (c-name gtk_color_selection_palette_from_string)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* str))
  (parameter (type-and-name GdkColor** colors))
  (parameter (type-and-name gint* n_colors))
)

(function gtk_color_selection_palette_to_string 
  (c-name gtk_color_selection_palette_to_string)
  (return-type gchar*)
  (parameter (type-and-name const-GdkColor* colors))
  (parameter (type-and-name gint n_colors))
)

(function gtk_color_selection_set_change_palette_hook 
  (c-name gtk_color_selection_set_change_palette_hook)
  (return-type GtkColorSelectionChangePaletteFunc)
  (parameter (type-and-name GtkColorSelectionChangePaletteFunc func))
)

(function gtk_color_selection_set_change_palette_with_screen_hook 
  (c-name gtk_color_selection_set_change_palette_with_screen_hook)
  (return-type GtkColorSelectionChangePaletteWithScreenFunc)
  (parameter (type-and-name GtkColorSelectionChangePaletteWithScreenFunc func))
)

(method set_color 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_color)
  (return-type none)
  (parameter (type-and-name gdouble* color))
)

(method get_color 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_color)
  (return-type none)
  (parameter (type-and-name gdouble* color))
)

(method set_update_policy 
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_update_policy)
  (return-type none)
  (parameter (type-and-name GtkUpdateType policy))
)

(function gtk_color_selection_dialog_get_type 
  (c-name gtk_color_selection_dialog_get_type)
  (return-type GType)
)

(function gtk_color_selection_dialog_new 
  (c-name gtk_color_selection_dialog_new)
  (is-constructor-of GtkColorSelectionDialog)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* title))
)

(function gtk_clist_get_type 
  (c-name gtk_clist_get_type)
  (return-type GtkType)
)

(function gtk_clist_new 
  (c-name gtk_clist_new)
  (is-constructor-of GtkCList)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
)

(function gtk_clist_new_with_titles 
  (c-name gtk_clist_new_with_titles)
  (is-constructor-of GtkCList)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gchar* titles[]))
)

(method set_hadjustment 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_vadjustment 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_hadjustment 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_shadow_type 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)

(method set_selection_mode 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_selection_mode)
  (return-type none)
  (parameter (type-and-name GtkSelectionMode mode))
)

(method set_reorderable 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_reorderable)
  (return-type none)
  (parameter (type-and-name gboolean reorderable))
)

(method set_use_drag_icons 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_use_drag_icons)
  (return-type none)
  (parameter (type-and-name gboolean use_icons))
)

(method set_button_actions 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_button_actions)
  (return-type none)
  (parameter (type-and-name guint button))
  (parameter (type-and-name guint8 button_actions))
)

(method freeze 
  (of-object CList (Gtk))
  (c-name gtk_clist_freeze)
  (return-type none)
)

(method thaw 
  (of-object CList (Gtk))
  (c-name gtk_clist_thaw)
  (return-type none)
)

(method column_titles_show 
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_show)
  (return-type none)
)

(method column_titles_hide 
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_hide)
  (return-type none)
)

(method column_title_active 
  (of-object CList (Gtk))
  (c-name gtk_clist_column_title_active)
  (return-type none)
  (parameter (type-and-name gint column))
)

(method column_title_passive 
  (of-object CList (Gtk))
  (c-name gtk_clist_column_title_passive)
  (return-type none)
  (parameter (type-and-name gint column))
)

(method column_titles_active 
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_active)
  (return-type none)
)

(method column_titles_passive 
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_passive)
  (return-type none)
)

(method set_column_title 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_title)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* title))
)

(method get_column_title 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_column_title)
  (return-type gchar*)
  (parameter (type-and-name gint column))
)

(method set_column_widget 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_widget)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkWidget* widget))
)

(method get_column_widget 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_column_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name gint column))
)

(method set_column_justification 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_justification)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkJustification justification))
)

(method set_column_visibility 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_visibility)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gboolean visible))
)

(method set_column_resizeable 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_resizeable)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gboolean resizeable))
)

(method set_column_auto_resize 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_auto_resize)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gboolean auto_resize))
)

(method columns_autosize 
  (of-object CList (Gtk))
  (c-name gtk_clist_columns_autosize)
  (return-type gint)
)

(method optimal_column_width 
  (of-object CList (Gtk))
  (c-name gtk_clist_optimal_column_width)
  (return-type gint)
  (parameter (type-and-name gint column))
)

(method set_column_width 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_width)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint width))
)

(method set_column_min_width 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_min_width)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint min_width))
)

(method set_column_max_width 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_max_width)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint max_width))
)

(method set_row_height 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_height)
  (return-type none)
  (parameter (type-and-name guint height))
)

(method moveto 
  (of-object CList (Gtk))
  (c-name gtk_clist_moveto)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gfloat row_align))
  (parameter (type-and-name gfloat col_align))
)

(method row_is_visible 
  (of-object CList (Gtk))
  (c-name gtk_clist_row_is_visible)
  (return-type GtkVisibility)
  (parameter (type-and-name gint row))
)

(method get_cell_type 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_cell_type)
  (return-type GtkCellType)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method set_text 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_text)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
)

(method get_text 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_text)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
)

(method set_pixmap 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_pixmap)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method get_pixmap 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_pixmap)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method set_pixtext 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_pixtext)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method get_pixtext 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_pixtext)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
  (parameter (type-and-name guint8* spacing))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method set_foreground 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_foreground)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name GdkColor* color))
)

(method set_background 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_background)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name GdkColor* color))
)

(method set_cell_style 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_cell_style)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkStyle* style))
)

(method get_cell_style 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_cell_style)
  (return-type GtkStyle*)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method set_row_style 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_style)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name GtkStyle* style))
)

(method get_row_style 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_row_style)
  (return-type GtkStyle*)
  (parameter (type-and-name gint row))
)

(method set_shift 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_shift)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint vertical))
  (parameter (type-and-name gint horizontal))
)

(method set_selectable 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_selectable)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gboolean selectable))
)

(method get_selectable 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_selectable)
  (return-type gboolean)
  (parameter (type-and-name gint row))
)

(method prepend 
  (of-object CList (Gtk))
  (c-name gtk_clist_prepend)
  (return-type gint)
  (parameter (type-and-name gchar* text[]))
)

(method append 
  (of-object CList (Gtk))
  (c-name gtk_clist_append)
  (return-type gint)
  (parameter (type-and-name gchar* text[]))
)

(method insert 
  (of-object CList (Gtk))
  (c-name gtk_clist_insert)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gchar* text[]))
)

(method remove 
  (of-object CList (Gtk))
  (c-name gtk_clist_remove)
  (return-type none)
  (parameter (type-and-name gint row))
)

(method set_row_data 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_data)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gpointer data))
)

(method set_row_data_full 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_data_full)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method get_row_data 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_row_data)
  (return-type gpointer)
  (parameter (type-and-name gint row))
)

(method find_row_from_data 
  (of-object CList (Gtk))
  (c-name gtk_clist_find_row_from_data)
  (return-type gint)
  (parameter (type-and-name gpointer data))
)

(method select_row 
  (of-object CList (Gtk))
  (c-name gtk_clist_select_row)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method unselect_row 
  (of-object CList (Gtk))
  (c-name gtk_clist_unselect_row)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method undo_selection 
  (of-object CList (Gtk))
  (c-name gtk_clist_undo_selection)
  (return-type none)
)

(method clear 
  (of-object CList (Gtk))
  (c-name gtk_clist_clear)
  (return-type none)
)

(method get_selection_info 
  (of-object CList (Gtk))
  (c-name gtk_clist_get_selection_info)
  (return-type gint)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint* row))
  (parameter (type-and-name gint* column))
)

(method select_all 
  (of-object CList (Gtk))
  (c-name gtk_clist_select_all)
  (return-type none)
)

(method unselect_all 
  (of-object CList (Gtk))
  (c-name gtk_clist_unselect_all)
  (return-type none)
)

(method swap_rows 
  (of-object CList (Gtk))
  (c-name gtk_clist_swap_rows)
  (return-type none)
  (parameter (type-and-name gint row1))
  (parameter (type-and-name gint row2))
)

(method row_move 
  (of-object CList (Gtk))
  (c-name gtk_clist_row_move)
  (return-type none)
  (parameter (type-and-name gint source_row))
  (parameter (type-and-name gint dest_row))
)

(method set_compare_func 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_compare_func)
  (return-type none)
  (parameter (type-and-name GtkCListCompareFunc cmp_func))
)

(method set_sort_column 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_sort_column)
  (return-type none)
  (parameter (type-and-name gint column))
)

(method set_sort_type 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_sort_type)
  (return-type none)
  (parameter (type-and-name GtkSortType sort_type))
)

(method sort 
  (of-object CList (Gtk))
  (c-name gtk_clist_sort)
  (return-type none)
)

(method set_auto_sort 
  (of-object CList (Gtk))
  (c-name gtk_clist_set_auto_sort)
  (return-type none)
  (parameter (type-and-name gboolean auto_sort))
)

(function gtk_clipboard_get_type 
  (c-name gtk_clipboard_get_type)
  (return-type GType)
)

(function gtk_clipboard_get_for_display 
  (c-name gtk_clipboard_get_for_display)
  (return-type GtkClipboard*)
  (parameter (type-and-name GdkDisplay* display))
  (parameter (type-and-name GdkAtom selection))
)

(function gtk_clipboard_get 
  (c-name gtk_clipboard_get)
  (return-type GtkClipboard*)
  (parameter (type-and-name GdkAtom selection))
)

(function gtk_check_menu_item_get_type 
  (c-name gtk_check_menu_item_get_type)
  (return-type GType)
)

(function gtk_check_menu_item_new 
  (c-name gtk_check_menu_item_new)
  (is-constructor-of GtkCheckMenuItem)
  (return-type GtkWidget*)
)

(function gtk_check_menu_item_new_with_label 
  (c-name gtk_check_menu_item_new_with_label)
  (is-constructor-of GtkCheckMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_check_menu_item_new_with_mnemonic 
  (c-name gtk_check_menu_item_new_with_mnemonic)
  (is-constructor-of GtkCheckMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method m_set_active 
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_set_active)
  (return-type none)
  (parameter (type-and-name gboolean is_active))
)

(method m_get_active 
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_get_active)
  (return-type gboolean)
)

(method m_toggled 
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_toggled)
  (return-type none)
)

(method m_set_inconsistent 
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_set_inconsistent)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method m_get_inconsistent 
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_get_inconsistent)
  (return-type gboolean)
)

(method m_set_show_toggle 
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_set_show_toggle)
  (return-type none)
  (parameter (type-and-name gboolean always))
)

(function gtk_check_button_get_type 
  (c-name gtk_check_button_get_type)
  (return-type GType)
)

(function gtk_check_button_new 
  (c-name gtk_check_button_new)
  (is-constructor-of GtkCheckButton)
  (return-type GtkWidget*)
)

(function gtk_check_button_new_with_label 
  (c-name gtk_check_button_new_with_label)
  (is-constructor-of GtkCheckButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_check_button_new_with_mnemonic 
  (c-name gtk_check_button_new_with_mnemonic)
  (is-constructor-of GtkCheckButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_cell_renderer_toggle_get_type 
  (c-name gtk_cell_renderer_toggle_get_type)
  (return-type GType)
)

(function gtk_cell_renderer_toggle_new 
  (c-name gtk_cell_renderer_toggle_new)
  (return-type GtkCellRenderer*)
)

(method e_get_radio 
  (of-object CellRendererToggle (Gtk))
  (c-name gtk_cell_renderer_toggle_get_radio)
  (return-type gboolean)
)

(method e_set_radio 
  (of-object CellRendererToggle (Gtk))
  (c-name gtk_cell_renderer_toggle_set_radio)
  (return-type none)
  (parameter (type-and-name gboolean radio))
)

(method e_get_active 
  (of-object CellRendererToggle (Gtk))
  (c-name gtk_cell_renderer_toggle_get_active)
  (return-type gboolean)
)

(method e_set_active 
  (of-object CellRendererToggle (Gtk))
  (c-name gtk_cell_renderer_toggle_set_active)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(function gtk_cell_renderer_text_get_type 
  (c-name gtk_cell_renderer_text_get_type)
  (return-type GType)
)

(function gtk_cell_renderer_text_new 
  (c-name gtk_cell_renderer_text_new)
  (return-type GtkCellRenderer*)
)

(method t_set_fixed_height_from_font 
  (of-object CellRendererText (Gtk))
  (c-name gtk_cell_renderer_text_set_fixed_height_from_font)
  (return-type none)
  (parameter (type-and-name gint number_of_rows))
)

(function gtk_cell_renderer_pixbuf_get_type 
  (c-name gtk_cell_renderer_pixbuf_get_type)
  (return-type GType)
)

(function gtk_cell_renderer_pixbuf_new 
  (c-name gtk_cell_renderer_pixbuf_new)
  (return-type GtkCellRenderer*)
)

(function gtk_cell_renderer_get_type 
  (c-name gtk_cell_renderer_get_type)
  (return-type GType)
)

(method get_size 
  (of-object CellRenderer (Gtk))
  (c-name gtk_cell_renderer_get_size)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkRectangle* cell_area))
  (parameter (type-and-name gint* x_offset))
  (parameter (type-and-name gint* y_offset))
  (parameter (type-and-name gint* width))
  (parameter (type-and-name gint* height))
)

(method render 
  (of-object CellRenderer (Gtk))
  (c-name gtk_cell_renderer_render)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkRectangle* background_area))
  (parameter (type-and-name GdkRectangle* cell_area))
  (parameter (type-and-name GdkRectangle* expose_area))
  (parameter (type-and-name GtkCellRendererState flags))
)

(method activate 
  (of-object CellRenderer (Gtk))
  (c-name gtk_cell_renderer_activate)
  (return-type gboolean)
  (parameter (type-and-name GdkEvent* event))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* path))
  (parameter (type-and-name GdkRectangle* background_area))
  (parameter (type-and-name GdkRectangle* cell_area))
  (parameter (type-and-name GtkCellRendererState flags))
)

(method start_editing 
  (of-object CellRenderer (Gtk))
  (c-name gtk_cell_renderer_start_editing)
  (return-type GtkCellEditable*)
  (parameter (type-and-name GdkEvent* event))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* path))
  (parameter (type-and-name GdkRectangle* background_area))
  (parameter (type-and-name GdkRectangle* cell_area))
  (parameter (type-and-name GtkCellRendererState flags))
)

(method set_fixed_size 
  (of-object CellRenderer (Gtk))
  (c-name gtk_cell_renderer_set_fixed_size)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method get_fixed_size 
  (of-object CellRenderer (Gtk))
  (c-name gtk_cell_renderer_get_fixed_size)
  (return-type none)
  (parameter (type-and-name gint* width))
  (parameter (type-and-name gint* height))
)

(function gtk_cell_editable_get_type 
  (c-name gtk_cell_editable_get_type)
  (return-type GType)
)

(function gtk_calendar_get_type 
  (c-name gtk_calendar_get_type)
  (return-type GType)
)

(function gtk_calendar_new 
  (c-name gtk_calendar_new)
  (is-constructor-of GtkCalendar)
  (return-type GtkWidget*)
)

(method select_month 
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_select_month)
  (return-type gboolean)
  (parameter (type-and-name guint month))
  (parameter (type-and-name guint year))
)

(method select_day 
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_select_day)
  (return-type none)
  (parameter (type-and-name guint day))
)

(method mark_day 
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_mark_day)
  (return-type gboolean)
  (parameter (type-and-name guint day))
)

(method unmark_day 
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_unmark_day)
  (return-type gboolean)
  (parameter (type-and-name guint day))
)

(method clear_marks 
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_clear_marks)
  (return-type none)
)

(method display_options 
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_display_options)
  (return-type none)
  (parameter (type-and-name GtkCalendarDisplayOptions flags))
)

(method get_date 
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_get_date)
  (return-type none)
  (parameter (type-and-name guint* year))
  (parameter (type-and-name guint* month))
  (parameter (type-and-name guint* day))
)

(method freeze 
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_freeze)
  (return-type none)
)

(method thaw 
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_thaw)
  (return-type none)
)

(function gtk_button_get_type 
  (c-name gtk_button_get_type)
  (return-type GType)
)

(function gtk_button_new 
  (c-name gtk_button_new)
  (is-constructor-of GtkButton)
  (return-type GtkWidget*)
)

(function gtk_button_new_with_label 
  (c-name gtk_button_new_with_label)
  (is-constructor-of GtkButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_button_new_from_stock 
  (c-name gtk_button_new_from_stock)
  (is-constructor-of GtkButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* stock_id))
)

(function gtk_button_new_with_mnemonic 
  (c-name gtk_button_new_with_mnemonic)
  (is-constructor-of GtkButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method pressed 
  (of-object Button (Gtk))
  (c-name gtk_button_pressed)
  (return-type none)
)

(method released 
  (of-object Button (Gtk))
  (c-name gtk_button_released)
  (return-type none)
)

(method clicked 
  (of-object Button (Gtk))
  (c-name gtk_button_clicked)
  (return-type none)
)

(method enter 
  (of-object Button (Gtk))
  (c-name gtk_button_enter)
  (return-type none)
)

(method leave 
  (of-object Button (Gtk))
  (c-name gtk_button_leave)
  (return-type none)
)

(method set_relief 
  (of-object Button (Gtk))
  (c-name gtk_button_set_relief)
  (return-type none)
  (parameter (type-and-name GtkReliefStyle newstyle))
)

(method get_relief 
  (of-object Button (Gtk))
  (c-name gtk_button_get_relief)
  (return-type GtkReliefStyle)
)

(method set_label 
  (of-object Button (Gtk))
  (c-name gtk_button_set_label)
  (return-type none)
  (parameter (type-and-name const-gchar* label))
)

(method get_label 
  (of-object Button (Gtk))
  (c-name gtk_button_get_label)
  (return-type gchar*)
)

(method set_use_underline 
  (of-object Button (Gtk))
  (c-name gtk_button_set_use_underline)
  (return-type none)
  (parameter (type-and-name gboolean use_underline))
)

(method get_use_underline 
  (of-object Button (Gtk))
  (c-name gtk_button_get_use_underline)
  (return-type gboolean)
)

(method set_use_stock 
  (of-object Button (Gtk))
  (c-name gtk_button_set_use_stock)
  (return-type none)
  (parameter (type-and-name gboolean use_stock))
)

(method get_use_stock 
  (of-object Button (Gtk))
  (c-name gtk_button_get_use_stock)
  (return-type gboolean)
)

(function gtk_box_get_type 
  (c-name gtk_box_get_type)
  (return-type GType)
)

(method pack_start 
  (of-object Box (Gtk))
  (c-name gtk_box_pack_start)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name guint padding))
)

(method pack_end 
  (of-object Box (Gtk))
  (c-name gtk_box_pack_end)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name guint padding))
)

(method pack_start_defaults 
  (of-object Box (Gtk))
  (c-name gtk_box_pack_start_defaults)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method pack_end_defaults 
  (of-object Box (Gtk))
  (c-name gtk_box_pack_end_defaults)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method set_homogeneous 
  (of-object Box (Gtk))
  (c-name gtk_box_set_homogeneous)
  (return-type none)
  (parameter (type-and-name gboolean homogeneous))
)

(method get_homogeneous 
  (of-object Box (Gtk))
  (c-name gtk_box_get_homogeneous)
  (return-type gboolean)
)

(method set_spacing 
  (of-object Box (Gtk))
  (c-name gtk_box_set_spacing)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(method get_spacing 
  (of-object Box (Gtk))
  (c-name gtk_box_get_spacing)
  (return-type gint)
)

(method reorder_child 
  (of-object Box (Gtk))
  (c-name gtk_box_reorder_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)

(method query_child_packing 
  (of-object Box (Gtk))
  (c-name gtk_box_query_child_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean* expand))
  (parameter (type-and-name gboolean* fill))
  (parameter (type-and-name guint* padding))
  (parameter (type-and-name GtkPackType* pack_type))
)

(method set_child_packing 
  (of-object Box (Gtk))
  (c-name gtk_box_set_child_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name guint padding))
  (parameter (type-and-name GtkPackType pack_type))
)

(function gtk_bin_get_type 
  (c-name gtk_bin_get_type)
  (return-type GType)
)

(method get_child 
  (of-object Bin (Gtk))
  (c-name gtk_bin_get_child)
  (return-type GtkWidget*)
)

(function gtk_binding_set_new 
  (c-name gtk_binding_set_new)
  (is-constructor-of GtkBindingSet)
  (return-type GtkBindingSet*)
  (parameter (type-and-name const-gchar* set_name))
)

(function gtk_binding_set_by_class 
  (c-name gtk_binding_set_by_class)
  (return-type GtkBindingSet*)
  (parameter (type-and-name gpointer object_class))
)

(function gtk_binding_set_find 
  (c-name gtk_binding_set_find)
  (return-type GtkBindingSet*)
  (parameter (type-and-name const-gchar* set_name))
)

(function gtk_bindings_activate 
  (c-name gtk_bindings_activate)
  (return-type gboolean)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifiers))
)

(function gtk_binding_entry_clear 
  (c-name gtk_binding_entry_clear)
  (return-type none)
  (parameter (type-and-name GtkBindingSet* binding_set))
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifiers))
)

(function gtk_binding_entry_add_signal 
  (c-name gtk_binding_entry_add_signal)
  (return-type none)
  (parameter (type-and-name GtkBindingSet* binding_set))
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifiers))
  (parameter (type-and-name const-gchar* signal_name))
  (parameter (type-and-name guint n_args))
;  (varargs t)
)

(function gtk_binding_entry_remove 
  (c-name gtk_binding_entry_remove)
  (return-type none)
  (parameter (type-and-name GtkBindingSet* binding_set))
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifiers))
)

(function gtk_binding_entry_add_signall 
  (c-name gtk_binding_entry_add_signall)
  (return-type none)
  (parameter (type-and-name GtkBindingSet* binding_set))
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifiers))
  (parameter (type-and-name const-gchar* signal_name))
  (parameter (type-and-name GSList* binding_args))
)

(function gtk_binding_parse_binding 
  (c-name gtk_binding_parse_binding)
  (return-type guint)
  (parameter (type-and-name GScanner* scanner))
)

(function gtk_button_box_get_type 
  (c-name gtk_button_box_get_type)
  (return-type GType)
)

(method get_layout 
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_get_layout)
  (return-type GtkButtonBoxStyle)
)

(method set_layout 
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_set_layout)
  (return-type none)
  (parameter (type-and-name GtkButtonBoxStyle layout_style))
)

(method set_child_secondary 
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_set_child_secondary)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean is_secondary))
)

(method set_child_size 
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_set_child_size)
  (return-type none)
  (parameter (type-and-name gint min_width))
  (parameter (type-and-name gint min_height))
)

(method set_child_ipadding 
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_set_child_ipadding)
  (return-type none)
  (parameter (type-and-name gint ipad_x))
  (parameter (type-and-name gint ipad_y))
)

(method get_child_size 
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_get_child_size)
  (return-type none)
  (parameter (type-and-name gint* min_width))
  (parameter (type-and-name gint* min_height))
)

(method get_child_ipadding 
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_get_child_ipadding)
  (return-type none)
  (parameter (type-and-name gint* ipad_x))
  (parameter (type-and-name gint* ipad_y))
)

(function gtk_aspect_frame_get_type 
  (c-name gtk_aspect_frame_get_type)
  (return-type GType)
)

(function gtk_aspect_frame_new 
  (c-name gtk_aspect_frame_new)
  (is-constructor-of GtkAspectFrame)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
  (parameter (type-and-name gfloat ratio))
  (parameter (type-and-name gboolean obey_child))
)

(method set 
  (of-object AspectFrame (Gtk))
  (c-name gtk_aspect_frame_set)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
  (parameter (type-and-name gfloat ratio))
  (parameter (type-and-name gboolean obey_child))
)

(function gtk_arrow_get_type 
  (c-name gtk_arrow_get_type)
  (return-type GType)
)

(function gtk_arrow_new 
  (c-name gtk_arrow_new)
  (is-constructor-of GtkArrow)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name GtkShadowType shadow_type))
)

(method set 
  (of-object Arrow (Gtk))
  (c-name gtk_arrow_set)
  (return-type none)
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name GtkShadowType shadow_type))
)

(function gtk_alignment_get_type 
  (c-name gtk_alignment_get_type)
  (return-type GType)
)

(function gtk_alignment_new 
  (c-name gtk_alignment_new)
  (is-constructor-of GtkAlignment)
  (return-type GtkWidget*)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
  (parameter (type-and-name gfloat xscale))
  (parameter (type-and-name gfloat yscale))
)

(method set 
  (of-object Alignment (Gtk))
  (c-name gtk_alignment_set)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
  (parameter (type-and-name gfloat xscale))
  (parameter (type-and-name gfloat yscale))
)

(function gtk_adjustment_get_type 
  (c-name gtk_adjustment_get_type)
  (return-type GType)
)

(function gtk_adjustment_new 
  (c-name gtk_adjustment_new)
  (is-constructor-of GtkAdjustment)
  (return-type GtkObject*)
  (parameter (type-and-name gdouble value))
  (parameter (type-and-name gdouble lower))
  (parameter (type-and-name gdouble upper))
  (parameter (type-and-name gdouble step_increment))
  (parameter (type-and-name gdouble page_increment))
  (parameter (type-and-name gdouble page_size))
)

(method changed 
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_changed)
  (return-type none)
)

(method value_changed 
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_value_changed)
  (return-type none)
)

(method clamp_page 
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_clamp_page)
  (return-type none)
  (parameter (type-and-name gdouble lower))
  (parameter (type-and-name gdouble upper))
)

(method get_value 
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_get_value)
  (return-type gdouble)
)

(method set_value 
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_set_value)
  (return-type none)
  (parameter (type-and-name gdouble value))
)

(function gtk_accessible_get_type 
  (c-name gtk_accessible_get_type)
  (return-type GType)
)

(method connect_widget_destroyed 
  (of-object Accessible (Gtk))
  (c-name gtk_accessible_connect_widget_destroyed)
  (return-type none)
)

(function gtk_accel_map_add_entry 
  (c-name gtk_accel_map_add_entry)
  (return-type none)
  (parameter (type-and-name const-gchar* accel_path))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(function gtk_accel_map_lookup_entry 
  (c-name gtk_accel_map_lookup_entry)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* accel_path))
  (parameter (type-and-name GtkAccelKey* key))
)

(function gtk_accel_map_change_entry 
  (c-name gtk_accel_map_change_entry)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* accel_path))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
  (parameter (type-and-name gboolean replace))
)

(function gtk_accel_map_load 
  (c-name gtk_accel_map_load)
  (return-type none)
  (parameter (type-and-name const-gchar* file_name))
)

(function gtk_accel_map_save 
  (c-name gtk_accel_map_save)
  (return-type none)
  (parameter (type-and-name const-gchar* file_name))
)

(function gtk_accel_map_foreach 
  (c-name gtk_accel_map_foreach)
  (return-type none)
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkAccelMapForeach foreach_func))
)

(function gtk_accel_map_load_fd 
  (c-name gtk_accel_map_load_fd)
  (return-type none)
  (parameter (type-and-name gint fd))
)

(function gtk_accel_map_load_scanner 
  (c-name gtk_accel_map_load_scanner)
  (return-type none)
  (parameter (type-and-name GScanner* scanner))
)

(function gtk_accel_map_save_fd 
  (c-name gtk_accel_map_save_fd)
  (return-type none)
  (parameter (type-and-name gint fd))
)

(function gtk_accel_map_add_filter 
  (c-name gtk_accel_map_add_filter)
  (return-type none)
  (parameter (type-and-name const-gchar* filter_pattern))
)

(function gtk_accel_map_foreach_unfiltered 
  (c-name gtk_accel_map_foreach_unfiltered)
  (return-type none)
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkAccelMapForeach foreach_func))
)

(function gtk_accel_label_get_type 
  (c-name gtk_accel_label_get_type)
  (return-type GType)
)

(function gtk_accel_label_new 
  (c-name gtk_accel_label_new)
  (is-constructor-of GtkAccelLabel)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* string))
)

(method get_accel_widget 
  (of-object AccelLabel (Gtk))
  (c-name gtk_accel_label_get_accel_widget)
  (return-type GtkWidget*)
)

(method get_accel_width 
  (of-object AccelLabel (Gtk))
  (c-name gtk_accel_label_get_accel_width)
  (return-type guint)
)

(method set_accel_widget 
  (of-object AccelLabel (Gtk))
  (c-name gtk_accel_label_set_accel_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* accel_widget))
)

(method set_accel_closure 
  (of-object AccelLabel (Gtk))
  (c-name gtk_accel_label_set_accel_closure)
  (return-type none)
  (parameter (type-and-name GClosure* accel_closure))
)

(method refetch 
  (of-object AccelLabel (Gtk))
  (c-name gtk_accel_label_refetch)
  (return-type gboolean)
)

(function gtk_accel_group_get_type 
  (c-name gtk_accel_group_get_type)
  (return-type GType)
)

(function gtk_accel_group_new 
  (c-name gtk_accel_group_new)
  (is-constructor-of GtkAccelGroup)
  (return-type GtkAccelGroup*)
)

(method lock 
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_lock)
  (return-type none)
)

(method unlock 
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_unlock)
  (return-type none)
)

(method connect 
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_connect)
  (return-type none)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
  (parameter (type-and-name GtkAccelFlags accel_flags))
  (parameter (type-and-name GClosure* closure))
)

(method connect_by_path 
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_connect_by_path)
  (return-type none)
  (parameter (type-and-name const-gchar* accel_path))
  (parameter (type-and-name GClosure* closure))
)

(method disconnect 
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_disconnect)
  (return-type gboolean)
  (parameter (type-and-name GClosure* closure))
)

(method disconnect_key 
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_disconnect_key)
  (return-type gboolean)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(function gtk_accel_groups_activate 
  (c-name gtk_accel_groups_activate)
  (return-type gboolean)
  (parameter (type-and-name GObject* object))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(function gtk_accel_groups_from_object 
  (c-name gtk_accel_groups_from_object)
  (return-type GSList*)
  (parameter (type-and-name GObject* object))
)

(method find 
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_find)
  (return-type GtkAccelKey*)
  (parameter (type-and-name GtkAccelGroupFindFunc find_func))
  (parameter (type-and-name gpointer data))
)

(function gtk_accel_group_from_accel_closure 
  (c-name gtk_accel_group_from_accel_closure)
  (return-type GtkAccelGroup*)
  (parameter (type-and-name GClosure* closure))
)

(function gtk_accelerator_valid 
  (c-name gtk_accelerator_valid)
  (return-type gboolean)
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifiers))
)

(function gtk_accelerator_parse 
  (c-name gtk_accelerator_parse)
  (return-type none)
  (parameter (type-and-name const-gchar* accelerator))
  (parameter (type-and-name guint* accelerator_key))
  (parameter (type-and-name GdkModifierType* accelerator_mods))
)

(function gtk_accelerator_name 
  (c-name gtk_accelerator_name)
  (return-type gchar*)
  (parameter (type-and-name guint accelerator_key))
  (parameter (type-and-name GdkModifierType accelerator_mods))
)

(function gtk_accelerator_set_default_mod_mask 
  (c-name gtk_accelerator_set_default_mod_mask)
  (return-type none)
  (parameter (type-and-name GdkModifierType default_mod_mask))
)

(function gtk_accelerator_get_default_mod_mask 
  (c-name gtk_accelerator_get_default_mod_mask)
  (return-type guint)
)

(method query 
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_query)
  (return-type GtkAccelGroupEntry*)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
  (parameter (type-and-name guint* n_entries))
)

